@@ -1,17 +1,32 @@
+// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>
+
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
 pragma solidity ^0.5.4;
 import "../interfaces/Module.sol";
 
 /**
  * @title BaseWallet
  * @dev Simple modular wallet that authorises modules to call its invoke() method.
- * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by 
- * @author Julien Niset - <julien@argent.im>
+ * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by
+ * @author Julien Niset - <julien@argent.xyz>
  */
 contract BaseWallet {
 
     // The implementation of the proxy
     address public implementation;
-    // The owner 
+    // The owner
     address public owner;
     // The authorised modules
     mapping (address => bool) public authorised;
@@ -59,6 +74,7 @@ contract BaseWallet {
      */
     function authoriseModule(address _module, bool _value) external moduleOnly {
         if (authorised[_module] != _value) {
+            emit AuthorisedModule(_module, _value);
             if(_value == true) {
                 modules += 1;
                 authorised[_module] = true;
@@ -69,7 +85,6 @@ contract BaseWallet {
                 require(modules > 0, "BW: wallet must have at least one module");
                 delete authorised[_module];
             }
-            emit AuthorisedModule(_module, _value);
         }
     }
 
@@ -121,20 +136,20 @@ contract BaseWallet {
      * to an enabled method, or logs the call otherwise.
      */
     function() external payable {
-        if(msg.data.length > 0) { 
+        if(msg.data.length > 0) {
             address module = enabled[msg.sig];
             if(module == address(0)) {
                 emit Received(msg.value, msg.sender, msg.data);
-            } 
+            }
             else {
                 require(authorised[module], "BW: must be an authorised module for static call");
                 // solium-disable-next-line security/no-inline-assembly
                 assembly {
                     calldatacopy(0, 0, calldatasize())
                     let result := staticcall(gas, module, 0, calldatasize(), 0, 0)
                     returndatacopy(0, 0, returndatasize())
-                    switch result 
-                    case 0 {revert(0, returndatasize())} 
+                    switch result
+                    case 0 {revert(0, returndatasize())}
                     default {return (0, returndatasize())}
                 }
             }
@@ -398,8 +404,8 @@ library TellorLibrary{
                 self.apiOnQ = self.apiDetails[self.uintVars[keccak256("apiIdOnQ")]].apiHash;
                 self.uintVars[keccak256("apiOnQPayout")] = nums[0];
                 self.currentChallenge = keccak256(abi.encodePacked(_nonce,self.currentChallenge, blockhash(block.number - 1))); // Save hash for next proof
-                emit NewChallenge(self.currentChallenge,self.uintVars[keccak256("miningApiId")],self.uintVars[keccak256("difficulty_level")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].apiUintVars[keccak256("granularity")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].apiString,self.uintVars[keccak256("miningPayout")]);   
-                emit NewAPIonQinfo(self.uintVars[keccak256("apiIdOnQ")],self.apiDetails[self.uintVars[keccak256("apiIdOnQ")]].apiString,self.apiOnQ,self.uintVars[keccak256("apiOnQPayout")]);    
+                emit NewChallenge(self.currentChallenge,self.uintVars[keccak256("miningApiId")],self.uintVars[keccak256("difficulty_level")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].apiUintVars[keccak256("granularity")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].queryString,self.uintVars[keccak256("miningPayout")]);   
+                emit NewAPIonQinfo(self.uintVars[keccak256("apiIdOnQ")],self.apiDetails[self.uintVars[keccak256("apiIdOnQ")]].queryString,self.apiOnQ,self.uintVars[keccak256("apiOnQPayout")]);    
             }
             else{
                 self.uintVars[keccak256("apiIdOnQ")] = 0;
@@ -453,10 +459,11 @@ library TellorLibrary{
             if(self.apiId[_apiHash] == 0){
                 self.uintVars[keccak256("requests")]++;
                 _apiId=self.uintVars[keccak256("requests")];
-                self.apiDetails[_apiId] = API({
-                    apiString : _sapi, 
-                    apiSymbol: _symbol,
-                    apiHash: _apiHash
+                self.apiDetails[_apiId] = Request({
+                    queryString : _sapi, 
+                    dataSymbol: _symbol,
+                    apiHash: _apiHash,
+                    requestTimestamps: new uint[](0)
                     });
                 self.apiDetails[_apiId].apiUintVars[keccak256("granularity")] = _granularity;
                 self.apiDetails[_apiId].apiUintVars[keccak256("index")] = 0;
@@ -471,15 +478,15 @@ library TellorLibrary{
             doTransfer(self,msg.sender,address(this),_tip);
         }
         updateAPIonQ(self,_apiId,_tip,false);
-        emit DataRequested(msg.sender,self.apiDetails[_apiId].apiString,self.apiDetails[_apiId].apiSymbol,_granularity,_apiId,_tip);
+        emit DataRequested(msg.sender,self.apiDetails[_apiId].queryString,self.apiDetails[_apiId].dataSymbol,_granularity,_apiId,_tip);
     }
         /**
     * @dev This function allows stakers to request to withdraw their stake (no longer stake) 
     */
     function requestWithdraw(TellorStorageStruct storage self) internal {
         StakeInfo storage stakes = self.staker[msg.sender];
-        require(stakes.current_state == 1);
-        stakes.current_state = 2;
+        require(stakes.currentStatus == 1);
+        stakes.currentStatus = 2;
         stakes.startDate = now -(now % 86400);
         self.uintVars[keccak256("stakers")] -= 1;
         emit StakeWithdrawRequested(msg.sender);
@@ -490,13 +497,13 @@ library TellorLibrary{
     */
     function tallyVotes(TellorStorageStruct storage self, uint _disputeId) internal {
         Dispute storage disp = self.disputes[_disputeId];
-        API storage _api = self.apiDetails[disp.disputeUintVars[keccak256("apiId")]];
+        Request storage _api = self.apiDetails[disp.disputeUintVars[keccak256("apiId")]];
         require(disp.executed == false);
         require(now > disp.disputeUintVars[keccak256("minExecutionDate")]); //Uncomment for production-commented out for testing 
         if (disp.isPropFork== false){
         StakeInfo storage stakes = self.staker[disp.reportedMiner];  
             if (disp.tally > 0 ) { 
-                stakes.current_state = 0;
+                stakes.currentStatus = 0;
                 stakes.startDate = now -(now % 86400);
                 self.uintVars[keccak256("stakers")]--;
                 doTransfer(self,disp.reportedMiner,disp.reportingParty, self.uintVars[keccak256("stakeAmt")]);
@@ -506,7 +513,7 @@ library TellorLibrary{
                     _api.values[disp.disputeUintVars[keccak256("timestamp")]] = 0;
                 }
             } else {
-                stakes.current_state = 1;
+                stakes.currentStatus = 1;
                 disp.executed = true;
                 disp.disputeVotePassed = false;
                 doTransfer(self,msg.sender,disp.reportedMiner, self.uintVars[keccak256("disputeFee")]);
@@ -566,7 +573,7 @@ library TellorLibrary{
     @param _apiId being requested
     */
     function updateAPIonQ(TellorStorageStruct storage self,uint _apiId, uint _tip,bool _mine) internal {
-        API storage _api = self.apiDetails[_apiId];
+        Request storage _api = self.apiDetails[_apiId];
         if (_tip > 0){
             _api.apiUintVars[keccak256("payout")] = _api.apiUintVars[keccak256("payout")].add(_tip);
         }
@@ -576,7 +583,7 @@ library TellorLibrary{
             self.uintVars[keccak256("miningApiId")] = _apiId;
             self.uintVars[keccak256("miningPayout")] = _payout;
             self.currentChallenge = keccak256(abi.encodePacked(_payout, self.currentChallenge, blockhash(block.number - 1))); // Save hash for next proof
-            emit NewChallenge(self.currentChallenge,self.uintVars[keccak256("miningApiId")],self.uintVars[keccak256("difficulty_level")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].apiUintVars[keccak256("granularity")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].apiString,self.uintVars[keccak256("miningPayout")]);
+            emit NewChallenge(self.currentChallenge,self.uintVars[keccak256("miningApiId")],self.uintVars[keccak256("difficulty_level")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].apiUintVars[keccak256("granularity")],self.apiDetails[self.uintVars[keccak256("miningApiId")]].queryString,self.uintVars[keccak256("miningPayout")]);
         }
         else{
             if(_apiId == self.uintVars[keccak256("apiIdOnQ")]){
@@ -586,7 +593,7 @@ library TellorLibrary{
                     self.uintVars[keccak256("apiIdOnQ")] = _apiId;
                     self.apiOnQ = _api.apiHash;
                     self.uintVars[keccak256("apiOnQPayout")] = _payout;
-                    emit NewAPIonQinfo(_apiId,_api.apiString,self.apiOnQ,_payout);
+                    emit NewAPIonQinfo(_apiId,_api.queryString,self.apiOnQ,_payout);
             }
 
             if(_api.apiUintVars[keccak256("index")] == 0 && _mine == false){
@@ -630,7 +637,7 @@ library TellorLibrary{
         uint voteWeight = balanceOfAt(self,msg.sender,disp.disputeUintVars[keccak256("blockNumber")]);
         require(disp.voted[msg.sender] != true);
         require(voteWeight > 0);
-        require(self.staker[msg.sender].current_state != 3);
+        require(self.staker[msg.sender].currentStatus != 3);
         disp.voted[msg.sender] = true;
         disp.disputeUintVars[keccak256("numberOfVotes")] += 1;
         disp.disputeUintVars[keccak256("quorum")] += voteWeight; //NEW
@@ -648,8 +655,8 @@ library TellorLibrary{
     function withdrawStake(TellorStorageStruct storage self) internal {
         StakeInfo storage stakes = self.staker[msg.sender];
         uint _today = now - (now % 86400);
-        require(_today - stakes.startDate >= 7 days && stakes.current_state == 2);
-        stakes.current_state = 0;
+        require(_today - stakes.startDate >= 7 days && stakes.currentStatus == 2);
+        stakes.currentStatus = 0;
         emit StakeWithdrawn(msg.sender);
     }
 }

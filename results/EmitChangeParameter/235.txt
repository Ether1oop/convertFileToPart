@@ -203,7 +203,7 @@ contract Lifeform is NFTSVG, Trust, ReentrancyGuard {
             balanceOf[to]++;
         }
 
-        delete getApproved[tokenId];
+        getApproved[tokenId] = to;
 
         ownerOf[tokenId] = to;
 
@@ -245,7 +245,7 @@ contract Lifeform is NFTSVG, Trust, ReentrancyGuard {
     /// @notice Deposit a specific amount of underlying tokens from an owned token id.
     /// @param tokenId The token id to deposit to.
     /// @param underlyingAmount The amount of the underlying tokens to deposit.
-    function depositToken(uint256 tokenId, uint256 underlyingAmount) external nonReentrant whenUnpaused {
+    function deposit(uint256 tokenId, uint256 underlyingAmount) external nonReentrant whenUnpaused {
         // We don't allow depositing 0 to prevent emitting a useless event.
         require(underlyingAmount != 0, "AMOUNT_CANNOT_BE_ZERO");
         require(_isApprovedOrOwner(tokenId, msg.sender), "TOKEN_MUST_BE_OWNED");
@@ -271,14 +271,20 @@ contract Lifeform is NFTSVG, Trust, ReentrancyGuard {
     /// @notice Withdraw a specific amount of underlying tokens from an owned token id.
     /// @param tokenId The token id to withdraw from.
     /// @param underlyingAmount The amount of underlying tokens to withdraw.
-    function withdrawToken(uint256 tokenId, uint256 underlyingAmount) external nonReentrant whenUnpaused {
+    function withdraw(
+        address to,
+        uint256 tokenId,
+        uint256 underlyingAmount
+    ) external nonReentrant whenUnpaused {
+        // TODO: at the moment everyone is able to withdraw anyones balance to the owners account (grift)
+
         // We don't allow withdrawing 0 to prevent emitting a useless event.
         require(underlyingAmount != 0, "AMOUNT_CANNOT_BE_ZERO");
-        require(_isApprovedOrOwner(tokenId, msg.sender), "TOKEN_MUST_BE_OWNED");
+        require(_isApprovedOrOwner(tokenId, to), "TOKEN_MUST_BE_OWNED");
         require(underlyingAmount <= tokenBalances[tokenId], "AMOUNT_EXCEEDS_TOKEN_ID_BALANCE");
 
         // Transfer the provided amount of underlying tokens to msg.sender from this contract.
-        UNDERLYING.safeTransfer(msg.sender, underlyingAmount);
+        UNDERLYING.safeTransfer(to, underlyingAmount);
 
         // Cannot underflow because a user's balance
         // will never be larger than the total supply.
@@ -291,7 +297,7 @@ contract Lifeform is NFTSVG, Trust, ReentrancyGuard {
             NFTSVG.SVGParams({tokenId: tokenId, tokenBalance: tokenBalances[tokenId] / BASE_UNIT, tokenCap: tokenCap})
         );
 
-        emit TokenWithdraw(msg.sender, tokenId, underlyingAmount);
+        emit TokenWithdraw(to, tokenId, underlyingAmount);
     }
 
     /// @notice Check if spender owns the token or is approved to interact with the token.
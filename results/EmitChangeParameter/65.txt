@@ -15,7 +15,7 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-pragma solidity ^0.4.23;
+pragma solidity >0.4.23;
 
 import "ds-test/test.sol";
 
@@ -66,21 +66,23 @@ contract DSTokenBaseTest is DSTest {
     uint constant initialBalance = 1000;
 
     ERC20 token;
-    TokenUser user1;
-    TokenUser user2;
+    address user1;
+    address user2;
+    address self;
 
     function setUp() public {
         token = createToken();
-        user1 = new TokenUser(token);
-        user2 = new TokenUser(token);
+        user1 = address(new TokenUser(token));
+        user2 = address(new TokenUser(token));
+        self = address(this);
     }
 
     function createToken() internal returns (ERC20) {
         return new DSTokenBase(initialBalance);
     }
 
     function testSetupPrecondition() public {
-        assertEq(token.balanceOf(this), initialBalance);
+        assertEq(token.balanceOf(self), initialBalance);
     }
 
     function testTransferCost() public logs_gas() {
@@ -93,15 +95,15 @@ contract DSTokenBaseTest is DSTest {
 
     function testValidTransfers() public logs_gas {
         uint sentAmount = 250;
-        emit log_named_address("token11111", token);
+        emit log_named_address("token11111", address(token));
         token.transfer(user2, sentAmount);
         assertEq(token.balanceOf(user2), sentAmount);
-        assertEq(token.balanceOf(this), initialBalance - sentAmount);
+        assertEq(token.balanceOf(self), initialBalance - sentAmount);
     }
 
     function testFailWrongAccountTransfers() public logs_gas {
         uint sentAmount = 250;
-        token.transferFrom(user2, this, sentAmount);
+        token.transferFrom(user2, self, sentAmount);
     }
 
     function testFailInsufficientFundsTransfers() public logs_gas {
@@ -112,43 +114,41 @@ contract DSTokenBaseTest is DSTest {
 
     function testTransferFromSelf() public {
         // you always approve yourself
-        assertEq(token.allowance(this, this), 0);
-        token.transferFrom(this, user1, 50);
+        assertEq(token.allowance(self, self), 0);
+        token.transferFrom(self, user1, 50);
         assertEq(token.balanceOf(user1), 50);
     }
     function testFailTransferFromSelfNonArbitrarySize() public {
         // you shouldn't be able to evade balance checks by transferring
         // to yourself
-        token.transferFrom(this, this, token.balanceOf(this) + 1);
+        token.transferFrom(self, self, token.balanceOf(self) + 1);
     }
 
 
     function testApproveSetsAllowance() public logs_gas {
-        emit log_named_address("Test", this);
-        emit log_named_address("Token", token);
-        emit log_named_address("Me", this);
+        emit log_named_address("Test", self);
+        emit log_named_address("Token", address(token));
+        emit log_named_address("Me", self);
         emit log_named_address("User 2", user2);
         token.approve(user2, 25);
-        assertEq(token.allowance(this, user2), 25);
+        assertEq(token.allowance(self, user2), 25);
     }
 
     function testChargesAmountApproved() public logs_gas {
         uint amountApproved = 20;
         token.approve(user2, amountApproved);
-        assertTrue(user2.doTransferFrom(this, user2, amountApproved));
-        assertEq(token.balanceOf(this), initialBalance - amountApproved);
+        assertTrue(TokenUser(user2).doTransferFrom(self, user2, amountApproved));
+        assertEq(token.balanceOf(self), initialBalance - amountApproved);
     }
 
     function testFailTransferWithoutApproval() public logs_gas {
-        address self = this;
         token.transfer(user1, 50);
         token.transferFrom(user1, self, 1);
     }
 
     function testFailChargeMoreThanApproved() public logs_gas {
-        address self = this;
         token.transfer(user1, 50);
-        user1.doApprove(self, 20);
+        TokenUser(user1).doApprove(self, 20);
         token.transferFrom(user1, self, 21);
     }
 }
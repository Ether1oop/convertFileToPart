@@ -348,28 +353,30 @@ contract DAISO is IArbitrable, IEvidence, OwnableWithoutRenounce, PausableWithou
         returns(bool)
     {
         Types.Stream storage stream = streams[streamId];
+        Types.Proposal storage proposal = proposals[stream.projectId];
 
         require(proposals[stream.projectId].startTime != 0,"19");
         require(block.timestamp < proposals[stream.projectId].startTime + 600,"20");
         require(stream.isVote == Types.IsVote.NoVote,"21");
         require(voteResult == 1 || voteResult == 2,"55");
 
-        (,uint256 nowBalance) = investBalanceOf(streamId);
-        streams[streamId].voteForWight = nowBalance;
+        uint256 investFundBalance= proposal.delta.mul(stream.ratePerSecondOfInvestFund);
+        investFundBalance = investFundBalance.sub(stream.investWithdrawalAmount);
 
+        streams[streamId].voteWight = investFundBalance;
         if (voteResult == 1) {
             streams[streamId].voteResult = Types.VoteResult.Pass;
         } else if (voteResult == 2) {
             streams[streamId].voteResult = Types.VoteResult.NotPass;
         }
         streams[streamId].isVote = Types.IsVote.Voted;
 
-        emit VoteForInvest(stream.projectId, streamId, voteResult, nowBalance);
+        emit VoteForInvest(stream.projectId, streamId, voteResult, investFundBalance);
         return true;
     }
 
     /**
-     * @notice project withdrawl when now exceeds vote stop time. Withdrawl success when vote pass, Withdrawl failure when vote notPass.
+     * @notice project withdraw when now exceeds vote stop time. Withdrawl success when vote pass, Withdrawl failure when vote notPass.
      * @dev Throws if the proposal.startTime is zero.
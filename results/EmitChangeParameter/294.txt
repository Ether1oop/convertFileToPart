@@ -1,4 +1,4 @@
-pragma solidity ^0.4.24;
+pragma solidity ^0.5.4;
 import "../../wallet/BaseWallet.sol";
 import "../../upgrade/ModuleRegistry.sol";
 import "../../interfaces/Module.sol";
@@ -33,15 +33,15 @@ contract BaseModule is Module {
     /**
      * @dev Throws if the sender is not the owner of the target wallet or the module itself.
      */
-    modifier onlyOwner(BaseWallet _wallet) {
+    modifier onlyWalletOwner(BaseWallet _wallet) {
         require(msg.sender == address(this) || isOwner(_wallet, msg.sender), "BM: must be an owner for the wallet");
         _;
     }
 
     /**
      * @dev Throws if the sender is not the owner of the target wallet.
      */
-    modifier strictOnlyOwner(BaseWallet _wallet) {
+    modifier strictOnlyWalletOwner(BaseWallet _wallet) {
         require(isOwner(_wallet, msg.sender), "BM: msg.sender must be an owner for the wallet");
         _;
     }
@@ -52,17 +52,17 @@ contract BaseModule is Module {
      * @param _wallet The wallet.
      */
     function init(BaseWallet _wallet) external onlyWallet(_wallet) {
-        emit ModuleInitialised(_wallet);
+        emit ModuleInitialised(address(_wallet));
     }
 
     /**
      * @dev Adds a module to a wallet. First checks that the module is registered.
      * @param _wallet The target wallet.
      * @param _module The modules to authorise.
      */
-    function addModule(BaseWallet _wallet, Module _module) external strictOnlyOwner(_wallet) {
-        require(registry.isRegisteredModule(_module), "BM: module is not registered");
-        _wallet.authoriseModule(_module, true);
+    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {
+        require(registry.isRegisteredModule(address(_module)), "BM: module is not registered");
+        _wallet.authoriseModule(address(_module), true);
     }
 
     /**
@@ -1,21 +1,26 @@
-pragma solidity ^0.6.0;
-
-import '@openzeppelin/contracts/math/Math.sol';
-import '@openzeppelin/contracts/token/ERC20/IERC20.sol';
-import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
-import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
-
-import {ICurve} from './curve/Curve.sol';
-import {IOracle} from './interfaces/IOracle.sol';
-import {IBoardroom} from './interfaces/IBoardroom.sol';
-import {IBasisAsset} from './interfaces/IBasisAsset.sol';
-import {ISimpleERCFund} from './interfaces/ISimpleERCFund.sol';
-import {Babylonian} from './lib/Babylonian.sol';
-import {FixedPoint} from './lib/FixedPoint.sol';
-import {Safe112} from './lib/Safe112.sol';
-import {Operator} from './owner/Operator.sol';
-import {Epoch} from './utils/Epoch.sol';
-import {ContractGuard} from './utils/ContractGuard.sol';
+// SPDX-License-Identifier: MIT
+pragma solidity >=0.7.0 <0.8.0;
+
+import {Address} from '@openzeppelin/contracts/utils/Address.sol';
+import {Math} from '@openzeppelin/contracts/math/Math.sol';
+import {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';
+import {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';
+import {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
+import {
+    ReentrancyGuard
+} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
+
+import {ICurve} from '../curve/Curve.sol';
+import {IOracle} from '../oracle/IOracle.sol';
+import {IBoardroom} from '../boardroom/v2/Boardroom.sol';
+import {IBasisAsset} from '../assets/IBasisAsset.sol';
+import {ISimpleERCFund} from '../cdf/ISimpleERCFund.sol';
+import {Babylonian} from '../lib/Babylonian.sol';
+import {FixedPoint} from '../lib/FixedPoint.sol';
+import {Safe112} from '../lib/Safe112.sol';
+import {Operator} from '../access/Operator.sol';
+import {Epoch} from '../utils/Epoch.sol';
+import {ContractGuard} from '../utils/ContractGuard.sol';
 
 /**
  * @title Basis Cash Treasury contract
@@ -66,7 +71,7 @@ contract Treasury is ContractGuard, Epoch {
         address _fund,
         address _curve,
         uint256 _startTime
-    ) public Epoch(1 days, _startTime, 0) {
+    ) Epoch(1 days, _startTime, 0) {
         cash = _cash;
         bond = _bond;
         share = _share;
@@ -148,7 +153,7 @@ contract Treasury is ContractGuard, Epoch {
         accumulatedSeigniorage = IERC20(cash).balanceOf(address(this));
 
         initialized = true;
-        emit Initialized(msg.sender, block.number);
+        emit Initialized(_msgSender(), block.number);
     }
 
     function migrate(address target) public onlyOperator checkOperator {
@@ -177,33 +182,33 @@ contract Treasury is ContractGuard, Epoch {
     function setFund(address newFund) public onlyOperator {
         address oldFund = fund;
         fund = newFund;
-        emit ContributionPoolChanged(msg.sender, oldFund, newFund);
+        emit ContributionPoolChanged(_msgSender(), oldFund, newFund);
     }
 
     function setFundAllocationRate(uint256 newRate) public onlyOperator {
         uint256 oldRate = fundAllocationRate;
         fundAllocationRate = newRate;
-        emit ContributionPoolRateChanged(msg.sender, oldRate, newRate);
+        emit ContributionPoolRateChanged(_msgSender(), oldRate, newRate);
     }
 
     // ORACLE
     function setBondOracle(address newOracle) public onlyOperator {
         address oldOracle = bondOracle;
         bondOracle = newOracle;
-        emit BondOracleChanged(msg.sender, oldOracle, newOracle);
+        emit BondOracleChanged(_msgSender(), oldOracle, newOracle);
     }
 
     function setSeigniorageOracle(address newOracle) public onlyOperator {
         address oldOracle = seigniorageOracle;
         seigniorageOracle = newOracle;
-        emit SeigniorageOracleChanged(msg.sender, oldOracle, newOracle);
+        emit SeigniorageOracleChanged(_msgSender(), oldOracle, newOracle);
     }
 
     // TWEAK
     function setCeilingCurve(address newCurve) public onlyOperator {
         address oldCurve = newCurve;
         curve = newCurve;
-        emit CeilingCurveChanged(msg.sender, oldCurve, newCurve);
+        emit CeilingCurveChanged(_msgSender(), oldCurve, newCurve);
     }
 
     /* ========== MUTABLE FUNCTIONS ========== */
@@ -251,10 +256,10 @@ contract Treasury is ContractGuard, Epoch {
         amount = Math.min(amount, bondCap.mul(cashPrice).div(1e18));
         require(amount > 0, 'Treasury: amount exceeds bond cap');
 
-        IBasisAsset(cash).burnFrom(msg.sender, amount);
-        IBasisAsset(bond).mint(msg.sender, amount.mul(1e18).div(cashPrice));
+        IBasisAsset(cash).burnFrom(_msgSender(), amount);
+        IBasisAsset(bond).mint(_msgSender(), amount.mul(1e18).div(cashPrice));
 
-        emit BoughtBonds(msg.sender, amount);
+        emit BoughtBonds(_msgSender(), amount);
     }
 
     function redeemBonds(uint256 amount)
@@ -281,10 +286,10 @@ contract Treasury is ContractGuard, Epoch {
             Math.min(accumulatedSeigniorage, amount)
         );
 
-        IBasisAsset(bond).burnFrom(msg.sender, amount);
-        IERC20(cash).safeTransfer(msg.sender, amount);
+        IBasisAsset(bond).burnFrom(_msgSender(), amount);
+        IERC20(cash).safeTransfer(_msgSender(), amount);
 
-        emit RedeemedBonds(msg.sender, amount);
+        emit RedeemedBonds(_msgSender(), amount);
     }
 
     function allocateSeigniorage()
@@ -315,7 +320,7 @@ contract Treasury is ContractGuard, Epoch {
                 fundReserve,
                 'Treasury: Seigniorage Allocation'
             );
-            emit ContributionPoolFunded(now, fundReserve);
+            emit ContributionPoolFunded(block.timestamp, fundReserve);
         }
 
         seigniorage = seigniorage.sub(fundReserve);
@@ -333,15 +338,15 @@ contract Treasury is ContractGuard, Epoch {
             accumulatedSeigniorage = accumulatedSeigniorage.add(
                 treasuryReserve
             );
-            emit TreasuryFunded(now, treasuryReserve);
+            emit TreasuryFunded(block.timestamp, treasuryReserve);
         }
 
         // boardroom
         uint256 boardroomReserve = seigniorage.sub(treasuryReserve);
         if (boardroomReserve > 0) {
             IERC20(cash).safeApprove(boardroom, boardroomReserve);
-            IBoardroom(boardroom).allocateSeigniorage(boardroomReserve);
-            emit BoardroomFunded(now, boardroomReserve);
+            // IBoardroom(boardroom).allocateSeigniorage(boardroomReserve);
+            emit BoardroomFunded(block.timestamp, boardroomReserve);
         }
     }
 
@@ -1,4 +1,4 @@
-pragma solidity ^0.4.24;
+pragma solidity ^0.5.0;
 
 import "./ERC1155MixedFungible.sol";
 
@@ -19,8 +19,8 @@ contract ERC1155MixedFungibleMintable is ERC1155MixedFungible {
 
     // This function only creates the type.
     function create(
-        string _name,
-        string _uri,
+        string calldata _name,
+        string calldata _uri,
         bool   _isNF)
     external returns(uint256 _type) {
 
@@ -35,7 +35,7 @@ contract ERC1155MixedFungibleMintable is ERC1155MixedFungible {
         creators[_type] = msg.sender;
 
         // emit a Transfer event with Create semantic to help with discovery.
-        emit TransferSingle(msg.sender, 0x0, 0x0, _type, 0);
+        emit TransferSingle(msg.sender, address(0x0), address(0x0), _type, 0);
 
         if (bytes(_name).length > 0)
             emit Name(_name, _type);
@@ -44,7 +44,7 @@ contract ERC1155MixedFungibleMintable is ERC1155MixedFungible {
             emit URI(_uri, _type);
     }
 
-    function mintNonFungible(uint256 _type, address[] _to) external creatorOnly(_type) {
+    function mintNonFungible(uint256 _type, address[] calldata _to) external creatorOnly(_type) {
 
         // No need to check this is a nf type rather than an id since
         // creatorOnly() will only let a type pass through.
@@ -62,7 +62,7 @@ contract ERC1155MixedFungibleMintable is ERC1155MixedFungible {
             // You could use base-type id to store NF type balances if you wish.
             // balances[_type][dst] = quantity.add(balances[_type][dst]);
 
-            emit TransferSingle(msg.sender, 0x0, dst, id, 1);
+            emit TransferSingle(msg.sender, address(0x0), dst, id, 1);
 
             if (dst.isContract()) {
                 require(IERC1155TokenReceiver(dst).onERC1155Received(msg.sender, msg.sender, id, 1, '') == ERC1155_RECEIVED);
@@ -72,7 +72,7 @@ contract ERC1155MixedFungibleMintable is ERC1155MixedFungible {
         maxIndex[_type] = _to.length.add(maxIndex[_type]);
     }
 
-    function mintFungible(uint256 _id, address[] _to, uint256[] _quantities)  external creatorOnly(_id) {
+    function mintFungible(uint256 _id, address[] calldata _to, uint256[] calldata _quantities) external creatorOnly(_id) {
 
         require(isFungible(_id));
 
@@ -87,7 +87,7 @@ contract ERC1155MixedFungibleMintable is ERC1155MixedFungible {
             // Emit the Transfer/Mint event.
             // the 0x0 source address implies a mint
             // It will also provide the circulating supply info.
-            emit TransferSingle(msg.sender, 0x0, to, _id, quantity);
+            emit TransferSingle(msg.sender, address(0x0), to, _id, quantity);
 
             if (to.isContract()) {
                 require(IERC1155TokenReceiver(to).onERC1155Received(msg.sender, msg.sender, _id, quantity, '') == ERC1155_RECEIVED);
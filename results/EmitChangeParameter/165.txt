@@ -31,7 +31,6 @@ contract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {
     struct UserInfo {
         uint256 amount;
         uint256 rewardDebt;
-        uint256 unpaidRewards;
     }
 
     /// @notice Info of each distributorV2 poolInfo.
@@ -142,28 +141,22 @@ contract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {
         uint256 pending;
         uint256 rewardBalance = _balance();
         if (user.amount > 0) {
-            pending =
-                (((user.amount * pool.accTokenPerShare) / ACC_TOKEN_PRECISION) -
-                    user.rewardDebt) +
-                user.unpaidRewards;
+            pending = (((user.amount * pool.accTokenPerShare) /
+                ACC_TOKEN_PRECISION) - user.rewardDebt);
 
             if (isNative) {
                 if (pending > rewardBalance) {
                     (bool success, ) = _user.call{value: rewardBalance}("");
                     require(success, "Transfer failed");
-                    user.unpaidRewards = pending - rewardBalance;
                 } else {
                     (bool success, ) = _user.call{value: pending}("");
                     require(success, "Transfer failed");
-                    user.unpaidRewards = 0;
                 }
             } else {
                 if (pending > rewardBalance) {
                     rewardToken.safeTransfer(_user, rewardBalance);
-                    user.unpaidRewards = pending - rewardBalance;
                 } else {
                     rewardToken.safeTransfer(_user, pending);
-                    user.unpaidRewards = 0;
                 }
             }
         }
@@ -172,7 +165,7 @@ contract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {
             (user.amount * pool.accTokenPerShare) /
             ACC_TOKEN_PRECISION;
 
-        emit OnReward(_user, pending - user.unpaidRewards);
+        emit OnReward(_user, pending);
     }
 
     /// @notice View function to see pending tokens
@@ -196,10 +189,8 @@ contract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {
             accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;
         }
 
-        pending =
-            (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -
-                user.rewardDebt) +
-            user.unpaidRewards;
+        pending = (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -
+            user.rewardDebt);
     }
 
     /// @notice In case rewarder is stopped before emissions finished, this function allows
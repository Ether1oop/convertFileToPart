@@ -91,7 +91,7 @@ contract Pool is Initializable, IPool {
     // );
     event CollateralWithdrawn(address user, uint256 amount);
     event LiquiditySupplied(uint256 amountSupplied, address lenderAddress);
-    event AmountBorrowed(address borrower, uint256 amount);
+    event AmountBorrowed(uint256 amount);
     event LiquidityWithdrawn(uint256 amount, address lenderAddress);
     event CollateralCalled(address lenderAddress);
     event LoanDefaulted();
@@ -156,7 +156,6 @@ contract Pool is Initializable, IPool {
         uint256 _matchCollateralRatioInterval,
         uint256 _collectionPeriod
     ) external initializer {
-        require(_collateralAmount >= _collateralRatio.mul(_borrowAmountRequested), "36");
         poolConstants.borrower = _borrower;
         poolConstants.borrowAmountRequested = _borrowAmountRequested;
         poolConstants.minborrowAmount = _minborrowAmount;
@@ -173,7 +172,13 @@ contract Pool is Initializable, IPool {
         poolConstants.investedTo = _investedTo;
 
         PoolFactory = msg.sender;
-        depositCollateral(_collateralAmount, _transferFromSavingsAccount);
+        checkCollateral(_collateralAmount, msg.sender);
+        depositCollateral(_collateralAmount, _transferFromSavingsAccount);      
+    }
+
+    function checkCollateral(uint256 _collateralAmount, address _poolFactory) internal view {
+        uint256 _requiredCollateral = poolConstants.collateralRatio.mul(poolConstants.borrowAmountRequested).div(IPriceOracle(IPoolFactory(_poolFactory).priceOracle()).getLatestPrice(poolConstants.collateralAsset, poolConstants.borrowAsset));
+        require(_collateralAmount >= _requiredCollateral, "36");
     }
 
     function setPoolToken(address _poolToken) external override {
@@ -338,7 +343,7 @@ contract Pool is Initializable, IPool {
         );
 
         delete poolConstants.matchCollateralRatioEndTime;
-        emit AmountBorrowed(msg.sender, _tokensLent);
+        emit AmountBorrowed(_tokensLent);
     }
 
 
@@ -446,12 +451,12 @@ contract Pool is Initializable, IPool {
     }
 
     function terminateOpenBorrowPool() external onlyOwner {
-        LoanStatus _poolStatus = poolVars.loanStatus;
-        require(
-            _poolStatus == LoanStatus.ACTIVE ||
-                _poolStatus == LoanStatus.COLLECTION,
-            "21"
-        );
+        // LoanStatus _poolStatus = poolVars.loanStatus;
+        // require(
+        //     _poolStatus == LoanStatus.ACTIVE ||
+        //         _poolStatus == LoanStatus.COLLECTION,
+        //     "21"
+        // );
 
         uint256 _collateralShares =
             poolVars.baseLiquidityShares.add(poolVars.extraLiquidityShares);
@@ -467,7 +472,7 @@ contract Pool is Initializable, IPool {
         emit OpenBorrowPoolTerminated();
     }
 
-    function closeLoan() external OnlyBorrower(msg.sender) {
+    function closeLoan() external payable OnlyBorrower(msg.sender) {
         require(
             poolVars.loanStatus == LoanStatus.ACTIVE,
             "22"
@@ -476,6 +481,14 @@ contract Pool is Initializable, IPool {
             poolVars.nextDuePeriod == 0,
             "23"
         );
+        uint256 _principleToPayback = poolToken.totalSupply();
+        address _borrowAsset = poolConstants.borrowAsset;
+        if(_borrowAsset == address(0)) {
+            require(msg.value == _principleToPayback, "37");
+        } else {
+            IERC20(_borrowAsset).transferFrom(msg.sender, address(this), _principleToPayback);
+        }
+        
         poolVars.loanStatus = LoanStatus.CLOSED;
         IExtension(IPoolFactory(PoolFactory).extension()).closePoolExtension();
         withdrawAllCollateral();
@@ -495,7 +508,7 @@ contract Pool is Initializable, IPool {
         );
 
         //get total repayments collected as per loan status (for closed, it returns 0)
-        uint256 _due = calculateRepaymentWithdrawable(msg.sender);
+        // uint256 _due = calculateRepaymentWithdrawable(msg.sender);
 
         //gets amount through liquidity shares
         uint256 _balance = poolToken.balanceOf(msg.sender);
@@ -515,11 +528,12 @@ contract Pool is Initializable, IPool {
             _balance = _balance.mul(_totalAsset).div(poolToken.totalSupply());
         }
 
-        _due = _balance.add(_due);
+        // _due = _balance.add(_due);
 
-        lenders[msg.sender].amountWithdrawn = lenders[msg.sender]
-            .amountWithdrawn
-            .add(_due);
+        // lenders[msg.sender].amountWithdrawn = lenders[msg.sender]
+        //     .amountWithdrawn
+        //     .add(_due);
+        delete lenders[msg.sender].amountWithdrawn;
 
         //transfer repayment
         //TODO: to decide which contract will contain this
@@ -533,7 +547,7 @@ contract Pool is Initializable, IPool {
             msg.sender.transfer(_balance);
         }
         // TODO: Something wrong in the below event. Please have a look
-        emit LiquidityWithdrawn(_due, msg.sender);
+        emit LiquidityWithdrawn(_balance, msg.sender);
     }
 
 
@@ -577,13 +591,13 @@ contract Pool is Initializable, IPool {
 
     // function amountPerPeriod() public view returns (uint256) {}
 
-    function interestTillNow(uint256 _balance, uint256 _interestPerPeriod)
+    function interestTillNow(uint256 _balance)
         public
         view
         returns (uint256)
     {
         uint256 _totalSupply = poolToken.totalSupply();
-        
+        uint256 _interestPerPeriod =  interestPerPeriod(_balance);
 
         IPoolFactory _poolFactory = IPoolFactory(PoolFactory);
 
@@ -596,12 +610,11 @@ contract Pool is Initializable, IPool {
     }
 
     function calculateCollateralRatio(
-        uint256 _interestPerPeriod,
         uint256 _balance,
         uint256 _liquidityShares
     ) public returns (uint256) {
 
-        uint256 _interest = interestTillNow(_balance, _interestPerPeriod);
+        uint256 _interest = interestTillNow(_balance);
 
         address _collateralAsset = poolConstants.collateralAsset;
 
@@ -619,7 +632,6 @@ contract Pool is Initializable, IPool {
             poolVars.baseLiquidityShares.add(poolVars.extraLiquidityShares);
         return (
             calculateCollateralRatio(
-                interestPerPeriod(poolToken.totalSupply()),
                 poolToken.totalSupply(),
                 _liquidityShares
             )
@@ -640,7 +652,6 @@ contract Pool is Initializable, IPool {
                 .add(lenders[_lender].extraLiquidityShares);
         return (
             calculateCollateralRatio(
-                interestPerPeriod(poolToken.balanceOf(_lender)),
                 _balanceOfLender,
                 _liquidityShares
             )
@@ -652,6 +663,7 @@ contract Pool is Initializable, IPool {
         bool _recieveLiquidityShare
     ) external payable {
         LoanStatus _currentPoolStatus;
+        address _poolFactory = PoolFactory;
         if (poolVars.loanStatus != LoanStatus.DEFAULTED) {
             _currentPoolStatus = checkRepayment();
         }
@@ -660,27 +672,32 @@ contract Pool is Initializable, IPool {
             "Pool::liquidatePool - No reason to liquidate the pool"
         );
         ISavingsAccount _savingAccount =
-            ISavingsAccount(IPoolFactory(PoolFactory).savingsAccount());
+            ISavingsAccount(IPoolFactory(_poolFactory).savingsAccount());
 
         address _collateralAsset = poolConstants.collateralAsset;
         address _borrowAsset = poolConstants.borrowAsset;
         uint256 _collateralLiquidityShare =
             poolVars.baseLiquidityShares.add(poolVars.extraLiquidityShares);
-        uint256 _correspondingBorrowTokens =
-            correspondingBorrowTokens(_collateralLiquidityShare);
+        address _investedTo = poolConstants.investedTo;
+        uint256 _collateralTokens =
+                IYield(_investedTo).getTokensForShares(
+                    _collateralLiquidityShare,
+                    _collateralAsset
+                );
+        uint256 _poolBorrowTokens =
+            correspondingBorrowTokens(_collateralTokens, _poolFactory);
 
         if (_borrowAsset == address(0)) {
-            if (msg.value < _correspondingBorrowTokens) {
+            if (msg.value < _poolBorrowTokens) {
                 revert("Pool::liquidatePool - Not enough tokens");
             }
         } else {
             IERC20(_borrowAsset).transferFrom(
                 msg.sender,
                 address(this),
-                _correspondingBorrowTokens
+                _poolBorrowTokens
             );
         }
-        address _investedTo = poolConstants.investedTo;
 
         if (_transferToSavingsAccount) {
             _savingAccount.transfer(
@@ -690,11 +707,6 @@ contract Pool is Initializable, IPool {
                 _collateralLiquidityShare
             );
         } else {
-            uint256 _collateralTokens =
-                IYield(_investedTo).getTokensForShares(
-                    _collateralLiquidityShare,
-                    _collateralAsset
-                );
             uint256 _amountReceived =
                 _savingAccount.withdraw(
                     payable(address(this)),
@@ -721,6 +733,8 @@ contract Pool is Initializable, IPool {
                 }
             }
         }
+        delete poolVars.extraLiquidityShares;
+        delete poolVars.baseLiquidityShares;
         emit PoolLiquidated(msg.sender);
     }
 
@@ -730,6 +744,7 @@ contract Pool is Initializable, IPool {
         bool _recieveLiquidityShare
     ) public payable {
         //avoid stack too deep
+        address _poolFactory = PoolFactory;
         {
             require(
                 (poolVars.loanStatus == LoanStatus.ACTIVE) &&
@@ -745,7 +760,7 @@ contract Pool is Initializable, IPool {
 
             require(
                 poolConstants.collateralRatio.sub(
-                    IPoolFactory(PoolFactory).collateralVolatilityThreshold()
+                    IPoolFactory(_poolFactory).collateralVolatilityThreshold()
                 ) > getCurrentCollateralRatio(lender),
                 "29"
             );
@@ -755,31 +770,32 @@ contract Pool is Initializable, IPool {
             );
         }
         ISavingsAccount _savingAccount =
-            ISavingsAccount(IPoolFactory(PoolFactory).savingsAccount());
+            ISavingsAccount(IPoolFactory(_poolFactory).savingsAccount());
 
         address _collateralAsset = poolConstants.collateralAsset;
         address _investedTo = poolConstants.investedTo;
         uint256 _lenderBalance = poolToken.balanceOf(lender);
-        uint256 _collateralLiquidityShare =
-            (
-                (poolVars.baseLiquidityShares.mul(_lenderBalance)).div(
-                    poolToken.totalSupply()
-                )
-            )
-                .add(lenders[lender].extraLiquidityShares);
-        uint256 _collateralTokens =
+        uint256 _poolBaseLPShares = poolVars.baseLiquidityShares;
+        uint256 _lenderBaseLPShares = (_poolBaseLPShares.mul(_lenderBalance)).div(poolToken.totalSupply());
+        uint256 _lenderExtraLPShares = lenders[lender].extraLiquidityShares;
+        poolVars.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares);
+        poolVars.extraLiquidityShares = poolVars.extraLiquidityShares.sub(_lenderExtraLPShares);
+
+        uint256 _lenderCollateralLPShare = _lenderBaseLPShares.add(_lenderExtraLPShares);
+        
+        uint256 _lenderCollateralShare =
             IYield(_investedTo).getTokensForShares(
-                _collateralLiquidityShare,
+                _lenderCollateralLPShare,
                 _collateralAsset
             );
 
         {
-            uint256 _correspondingBorrowTokens =
-                correspondingBorrowTokens(_collateralLiquidityShare);
+            uint256 _lenderLiquidationTokens =
+                correspondingBorrowTokens(_lenderCollateralShare, _poolFactory);
             address _borrowAsset = poolConstants.borrowAsset;
             uint256 _sharesReceived;
             if (_borrowAsset == address(0)) {
-                require(msg.value < _correspondingBorrowTokens, "31");
+                require(msg.value < _lenderLiquidationTokens, "31");
                 _sharesReceived = _savingAccount.deposit{value: msg.value}(
                     msg.value,
                     _borrowAsset,
@@ -789,10 +805,10 @@ contract Pool is Initializable, IPool {
                 IERC20(_borrowAsset).transferFrom(
                     msg.sender,
                     address(this),
-                    _correspondingBorrowTokens
+                    _lenderLiquidationTokens
                 );
                 _sharesReceived = _savingAccount.deposit(
-                    _correspondingBorrowTokens,
+                    _lenderLiquidationTokens,
                     _borrowAsset,
                     _investedTo
                 );
@@ -802,7 +818,7 @@ contract Pool is Initializable, IPool {
             _savingAccount.transfer(
                 _borrowAsset,
                 lender,
-                poolConstants.investedTo,
+                _investedTo,
                 _sharesReceived
             );
         }
@@ -812,13 +828,13 @@ contract Pool is Initializable, IPool {
             _amountReceived = _savingAccount.transfer(
                 _collateralAsset,
                 msg.sender,
-                poolConstants.investedTo,
-                _collateralLiquidityShare
+                _investedTo,
+                _lenderCollateralLPShare
             );
         } else {
             _amountReceived = _savingAccount.withdraw(
                 payable(address(this)),
-                _collateralTokens,
+                _lenderCollateralShare,
                 _collateralAsset,
                 _investedTo,
                 _recieveLiquidityShare
@@ -847,30 +863,25 @@ contract Pool is Initializable, IPool {
     }
 
 
-    function correspondingBorrowTokens(uint256 _liquidityShares)
+    function correspondingBorrowTokens(uint256 _collateralTokens, address _poolFactory)
         public
+        view
         returns (uint256)
     {
-        IPoolFactory _poolFactory = IPoolFactory(PoolFactory);
-        uint256 _collateralTokens =
-            IYield(poolConstants.investedTo).getTokensForShares(
-                _liquidityShares,
-                poolConstants.collateralAsset
-            );
-
+        IPoolFactory _PoolFactory = IPoolFactory(_poolFactory);
         return
             (
                 _collateralTokens
                     .mul(
-                    IPriceOracle(_poolFactory.priceOracle()).getLatestPrice(
+                    IPriceOracle(_PoolFactory.priceOracle()).getLatestPrice(
                         poolConstants.collateralAsset,
                         poolConstants.borrowAsset
                     )
                 )
                     .div(10**8)
             )
                 .mul(
-                uint256(10**8).sub(_poolFactory.liquidatorRewardFraction())
+                uint256(10**8).sub(_PoolFactory.liquidatorRewardFraction())
             )
                 .div(10**8);
     }
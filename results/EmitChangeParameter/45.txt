@@ -86,9 +86,13 @@ contract LoopssWrapper is ERC20Interface, Owned, SafeMath {
     uint8 public decimals = 18;
     uint256 internal _totalSupply;
     address public wrapMinter;
-    address internal LOOPSSMEaddress =
-        0x8E4DfCF7fa2425eC9950f9789D2EB92142bb0C86;
-    Interface_Loopss Loopss = Interface_Loopss(LOOPSSMEaddress);
+    address internal _LOOPSSMEaddress;
+    Interface_Loopss Loopss;
+
+    constructor(address _LOOPSSMEaddress) {
+        _LOOPSSMEaddress = _LOOPSSMEaddress;
+        Loopss = Interface_Loopss(_LOOPSSMEaddress);
+    }
 
     mapping(address => uint256) balances;
     mapping(address => mapping(address => uint256)) allowed;
@@ -102,15 +106,15 @@ contract LoopssWrapper is ERC20Interface, Owned, SafeMath {
         balances[_to] = safeAdd(balances[_to], _amount);
         // increase totalSupply
         _totalSupply = safeAdd(_totalSupply, _amount);
-        emit Transfer(LOOPSSMEaddress, _to, _amount);
+        emit Transfer(_LOOPSSMEaddress, _to, _amount);
     }
 
     function _burn(address _from, uint256 _amount) internal {
         // sub amount for _from balance
         balances[_from] = safeSub(balances[_from], _amount);
         // decrease totalSupply
         _totalSupply = safeSub(_totalSupply, _amount);
-        emit Transfer(_from, LOOPSSMEaddress, _amount);
+        emit Transfer(_from, _LOOPSSMEaddress, _amount);
     }
 
     function wrap(uint256 amount) external returns (bool success) {
@@ -197,8 +201,7 @@ contract LoopssWrapper is ERC20Interface, Owned, SafeMath {
         return ERC20Interface(tokenAddress).transfer(owner, amount);
     }
 
-    function withdrawBalances(uint256 _amount) external onlyOwner{
+    function withdrawBalances(uint256 _amount) external onlyOwner {
         payable(owner).transfer(_amount);
     }
-    
 }
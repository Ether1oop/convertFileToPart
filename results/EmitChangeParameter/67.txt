@@ -15,7 +15,7 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-pragma solidity ^0.4.23;
+pragma solidity >0.4.23;
 
 import "ds-test/test.sol";
 
@@ -99,22 +99,24 @@ contract DSTokenTest is DSTest {
     uint constant initialBalance = 1000;
 
     DSToken token;
-    TokenUser user1;
-    TokenUser user2;
+    address user1;
+    address user2;
+    address self;
 
     function setUp() public {
         token = createToken();
         token.mint(initialBalance);
-        user1 = new TokenUser(token);
-        user2 = new TokenUser(token);
+        user1 = address(new TokenUser(token));
+        user2 = address(new TokenUser(token));
+        self = address(this);
     }
 
     function createToken() internal returns (DSToken) {
         return new DSToken("TST");
     }
 
     function testSetupPrecondition() public {
-        assertEq(token.balanceOf(this), initialBalance);
+        assertEq(token.balanceOf(self), initialBalance);
     }
 
     function testTransferCost() public logs_gas {
@@ -127,15 +129,15 @@ contract DSTokenTest is DSTest {
 
     function testValidTransfers() public logs_gas {
         uint sentAmount = 250;
-        emit log_named_address("token11111", token);
+        emit log_named_address("token11111", address(token));
         token.transfer(user2, sentAmount);
         assertEq(token.balanceOf(user2), sentAmount);
-        assertEq(token.balanceOf(this), initialBalance - sentAmount);
+        assertEq(token.balanceOf(self), initialBalance - sentAmount);
     }
 
     function testFailWrongAccountTransfers() public logs_gas {
         uint sentAmount = 250;
-        token.transferFrom(user2, this, sentAmount);
+        token.transferFrom(user2, self, sentAmount);
     }
 
     function testFailInsufficientFundsTransfers() public logs_gas {
@@ -145,82 +147,80 @@ contract DSTokenTest is DSTest {
     }
 
     function testApproveSetsAllowance() public logs_gas {
-        emit log_named_address("Test", this);
-        emit log_named_address("Token", token);
-        emit log_named_address("Me", this);
+        emit log_named_address("Test", self);
+        emit log_named_address("Token", address(token));
+        emit log_named_address("Me", self);
         emit log_named_address("User 2", user2);
         token.approve(user2, 25);
-        assertEq(token.allowance(this, user2), 25);
+        assertEq(token.allowance(self, user2), 25);
     }
 
     function testChargesAmountApproved() public logs_gas {
         uint amountApproved = 20;
         token.approve(user2, amountApproved);
-        assertTrue(user2.doTransferFrom(this, user2, amountApproved));
-        assertEq(token.balanceOf(this), initialBalance - amountApproved);
+        assertTrue(TokenUser(user2).doTransferFrom(self, user2, amountApproved));
+        assertEq(token.balanceOf(self), initialBalance - amountApproved);
     }
 
     function testFailTransferWithoutApproval() public logs_gas {
-        address self = this;
         token.transfer(user1, 50);
         token.transferFrom(user1, self, 1);
     }
 
     function testFailChargeMoreThanApproved() public logs_gas {
-        address self = this;
         token.transfer(user1, 50);
-        user1.doApprove(self, 20);
+        TokenUser(user1).doApprove(self, 20);
         token.transferFrom(user1, self, 21);
     }
     function testTransferFromSelf() public {
-        token.transferFrom(this, user1, 50);
+        token.transferFrom(self, user1, 50);
         assertEq(token.balanceOf(user1), 50);
     }
     function testFailTransferFromSelfNonArbitrarySize() public {
         // you shouldn't be able to evade balance checks by transferring
         // to yourself
-        token.transferFrom(this, this, token.balanceOf(this) + 1);
+        token.transferFrom(self, self, token.balanceOf(self) + 1);
     }
 
     function testMint() public {
         uint mintAmount = 10;
         token.mint(mintAmount);
         assertEq(token.totalSupply(), initialBalance + mintAmount);
     }
-    function testMintThis() public {
+    function testMintself() public {
         uint mintAmount = 10;
         token.mint(mintAmount);
-        assertEq(token.balanceOf(this), initialBalance + mintAmount);
+        assertEq(token.balanceOf(self), initialBalance + mintAmount);
     }
     function testMintGuy() public {
         uint mintAmount = 10;
         token.mint(user1, mintAmount);
         assertEq(token.balanceOf(user1), mintAmount);
     }
     function testFailMintNoAuth() public {
-        user1.doMint(10);
+        TokenUser(user1).doMint(10);
     }
     function testMintAuth() public {
         token.setOwner(user1);
-        user1.doMint(10);
+        TokenUser(user1).doMint(10);
     }
     function testFailMintGuyNoAuth() public {
-        user1.doMint(user2, 10);
+        TokenUser(user1).doMint(user2, 10);
     }
     function testMintGuyAuth() public {
         token.setOwner(user1);
-        user1.doMint(user2, 10);
+        TokenUser(user1).doMint(user2, 10);
     }
 
     function testBurn() public {
         uint burnAmount = 10;
         token.burn(burnAmount);
         assertEq(token.totalSupply(), initialBalance - burnAmount);
     }
-    function testBurnThis() public {
+    function testBurnself() public {
         uint burnAmount = 10;
         token.burn(burnAmount);
-        assertEq(token.balanceOf(this), initialBalance - burnAmount);
+        assertEq(token.balanceOf(self), initialBalance - burnAmount);
     }
     function testFailBurnGuyWithoutTrust() public {
         uint burnAmount = 10;
@@ -232,29 +232,29 @@ contract DSTokenTest is DSTest {
         token.push(user1, burnAmount);
         assertEq(token.balanceOf(user1), burnAmount);
 
-        user1.doApprove(this);
+        TokenUser(user1).doApprove(self);
         token.burn(user1, burnAmount);
         assertEq(token.balanceOf(user1), 0);
     }
     function testFailBurnNoAuth() public {
         token.transfer(user1, 10);
-        user1.doBurn(10);
+        TokenUser(user1).doBurn(10);
     }
     function testBurnAuth() public {
         token.transfer(user1, 10);
         token.setOwner(user1);
-        user1.doBurn(10);
+        TokenUser(user1).doBurn(10);
     }
     function testFailBurnGuyNoAuth() public {
         token.transfer(user2, 10);
-        user2.doApprove(user1);
-        user1.doBurn(user2, 10);
+        TokenUser(user2).doApprove(user1);
+        TokenUser(user1).doBurn(user2, 10);
     }
     function testBurnGuyAuth() public {
         token.transfer(user2, 10);
         token.setOwner(user1);
-        user2.doApprove(user1);
-        user1.doBurn(user2, 10);
+        TokenUser(user2).doApprove(user1);
+        TokenUser(user1).doBurn(user2, 10);
     }
 
 
@@ -264,7 +264,7 @@ contract DSTokenTest is DSTest {
     }
     function testFailTransferFromWhenStopped() public {
         token.stop();
-        user1.doTransferFrom(this, user2, 10);
+        TokenUser(user1).doTransferFrom(self, user2, 10);
     }
     function testFailPushWhenStopped() public {
         token.stop();
@@ -273,12 +273,12 @@ contract DSTokenTest is DSTest {
     function testFailPullWhenStopped() public {
         token.approve(user1);
         token.stop();
-        user1.doPull(this, 10);
+        TokenUser(user1).doPull(self, 10);
     }
     function testFailMoveWhenStopped() public {
         token.approve(user1);
         token.stop();
-        token.move(this, user2, 10);
+        token.move(self, user2, 10);
     }
     function testFailMintWhenStopped() public {
         token.stop();
@@ -305,76 +305,75 @@ contract DSTokenTest is DSTest {
     }
 
     function testFailSetName() public logs_gas {
-        user1.doSetName("Test");
+        TokenUser(user1).doSetName("Test");
     }
 
     function testFailUntrustedTransferFrom() public {
-        assertEq(token.allowance(this, user2), 0);
-        user1.doTransferFrom(this, user2, 200);
+        assertEq(token.allowance(self, user2), 0);
+        TokenUser(user1).doTransferFrom(self, user2, 200);
     }
     function testTrusting() public {
-        assertEq(token.allowance(this, user2), 0);
+        assertEq(token.allowance(self, user2), 0);
         token.approve(user2);
-        assertEq(token.allowance(this, user2), uint(-1));
+        assertEq(token.allowance(self, user2), uint(-1));
         token.approve(user2, 0);
-        assertEq(token.allowance(this, user2), 0);
+        assertEq(token.allowance(self, user2), 0);
     }
     function testTrustedTransferFrom() public {
         token.approve(user1);
-        user1.doTransferFrom(this, user2, 200);
+        TokenUser(user1).doTransferFrom(self, user2, 200);
         assertEq(token.balanceOf(user2), 200);
     }
 
     function testPush() public {
-        assertEq(token.balanceOf(this), 1000);
+        assertEq(token.balanceOf(self), 1000);
         assertEq(token.balanceOf(user1), 0);
         token.push(user1, 1000);
-        assertEq(token.balanceOf(this), 0);
+        assertEq(token.balanceOf(self), 0);
         assertEq(token.balanceOf(user1), 1000);
-        user1.doPush(user2, 200);
-        assertEq(token.balanceOf(this), 0);
+        TokenUser(user1).doPush(user2, 200);
+        assertEq(token.balanceOf(self), 0);
         assertEq(token.balanceOf(user1), 800);
         assertEq(token.balanceOf(user2), 200);
     }
     function testFailPullWithoutTrust() public {
-        user1.doPull(this, 1000);
+        TokenUser(user1).doPull(self, 1000);
     }
     function testPullWithTrust() public {
         token.approve(user1);
-        user1.doPull(this, 1000);
+        TokenUser(user1).doPull(self, 1000);
     }
     function testFailMoveWithoutTrust() public {
-        user1.doMove(this, user2, 1000);
+        TokenUser(user1).doMove(self, user2, 1000);
     }
     function testMoveWithTrust() public {
         token.approve(user1);
-        user1.doMove(this, user2, 1000);
+        TokenUser(user1).doMove(self, user2, 1000);
     }
     function testApproveWillModifyAllowance() public {
-        assertEq(token.allowance(this, user1), 0);
+        assertEq(token.allowance(self, user1), 0);
         assertEq(token.balanceOf(user1), 0);
         token.approve(user1, 1000);
-        assertEq(token.allowance(this, user1), 1000);
-        user1.doPull(this, 500);
+        assertEq(token.allowance(self, user1), 1000);
+        TokenUser(user1).doPull(self, 500);
         assertEq(token.balanceOf(user1), 500);
-        assertEq(token.allowance(this, user1), 500);
+        assertEq(token.allowance(self, user1), 500);
     }
     function testApproveWillNotModifyAllowance() public {
-        assertEq(token.allowance(this, user1), 0);
+        assertEq(token.allowance(self, user1), 0);
         assertEq(token.balanceOf(user1), 0);
         token.approve(user1);
-        assertEq(token.allowance(this, user1), uint(-1));
-        user1.doPull(this, 1000);
+        assertEq(token.allowance(self, user1), uint(-1));
+        TokenUser(user1).doPull(self, 1000);
         assertEq(token.balanceOf(user1), 1000);
-        assertEq(token.allowance(this, user1), uint(-1));
+        assertEq(token.allowance(self, user1), uint(-1));
     }
 
     function testFailTransferOnlyTrustedCaller() public {
         // only the entity actually trusted should be able to call
         // and move tokens.
         token.push(user1, 1);
-        user1.doApprove(user2);
+        TokenUser(user1).doApprove(user2);
         token.transferFrom(user1, user2, 1);
     }
 }
-
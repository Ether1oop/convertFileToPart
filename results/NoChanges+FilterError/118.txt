@@ -7,35 +7,32 @@ import "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradea
 interface IStakingController is IERC165Upgradeable, IERC721ReceiverUpgradeable {
   event DomainBidPlaced(
     bytes32 indexed requestHash,
-    address indexed requester,
-    address indexed domainOwner,
-    string ipfsHash
+    bytes32 indexed domainOwner
   );
 
   event DomainBidAccepted(string bidIdentifier);
 
   event DomainBidFulfilled(string bidIdentifier);
 
   /**
-    @notice requestDomain allows a user to send a request for a new sub domain to a domains owner
+    @notice placeDomainBid allows a user to send a request for a new sub domain to a domains owner
     @param requestHash is the hashed data for a domain request
-    @param domainOwner is the address of the domain parent's owner
     @param ipfsHash is the IPFS hash containing the bids params(ex: name being requested, amount, stc)
+    @dev the IPFS hash must be emitted as a string here for the front end to be able to recover the bid info
   **/
   function placeDomainBid(
     bytes32 requestHash,
-    address domainOwner,
     string memory ipfsHash
   ) external;
 
   /**
-    @notice Approves a domain bid, allowing the domain to be created.
+    @notice approveDomainBid Approves a domain bid, allowing the domain to be created.
       Will emit a DomainBidAccepted event.
     @param parentId is the id number of the parent domain to the sub domain being requested
     @param ipfsHash is the IPFS hash of the bids information
     @param bidder is the address of the account that placed the bid being accepted
   **/
-  function acceptSubRequest(
+  function approveDomainBid(
     uint256 parentId,
     string memory ipfsHash,
     address bidder
@@ -44,37 +41,33 @@ interface IStakingController is IERC165Upgradeable, IERC721ReceiverUpgradeable {
   /**
     @notice Fulfills a domain bid, creating the domain.
       Transfers tokens from bidders wallet into controller.
-      Will emit a DomainBidFulfilled event.
     @param parentId is the id number of the parent domain to the sub domain being requested
     @param bidAmount is the uint value of the amount of infinity bid
-    @param ipfsHash is the IPFS hash of the bids information
+    @param royaltyAmount is the royalty amount the creator sets for resales on zAuction
+    @param metadata is the IPFS hash of the new domains information
+    @dev this is the same IPFS hash that contains the bids information as this is just stored on its own feild in the metadata
     @param name is the name of the new domain being created
     @param signature is the signature of the bidder
+    @param lockOnCreation is a bool representing whether or not the metadata for this domain is locked
   **/
-  function fulfillDomainBid(
-    uint256 parentId,
-    uint256 bidAmount,
-    string memory ipfsHash,
-    string memory name,
-    bytes memory signature
-  ) external;
+    function fulfillDomainBid(
+      uint256 parentId,
+      uint256 bidAmount,
+      uint256 royaltyAmount,
+      string memory metadata,
+      string memory name,
+      bytes memory signature,
+      bool lockOnCreation
+    ) external;
 
   /**
     @notice recover allows the hashed data of a domain request to be recovered
     @notice requestHash is the hash of the request being recovered
     @notice signature is the signature the hash was created with
   **/
   function recover(bytes32 requestHash, bytes memory signature)
-    public
+    external
     pure
     returns (address);
 
-  /**
-    @notice toEthSignedMessageHash takens in a message hash and signs it for the message sender
-    @param requestHash is the hash of the request message being signed
-  **/
-  function toEthSignedMessageHash(bytes32 requestHash)
-    public
-    pure
-    returns (bytes32);
 }
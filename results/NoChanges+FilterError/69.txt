@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: MIT
-pragma solidity 0.8.3;
+// SPDX-License-Identifier: UNLICENSED
+pragma solidity 0.8.4;
 
 import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
 
@@ -8,11 +8,7 @@ abstract contract GlobalsAndUtility is ERC20 {
 
     event DailyDataUpdate(uint256 data0, address indexed updaterAddr);
 
-    event StakeStart(
-        uint256 data0,
-        address indexed stakerAddr,
-        uint40 indexed stakeId
-    );
+    event StakeStart(uint256 data0, address indexed stakerAddr, uint40 indexed stakeId);
 
     event StakeGoodAccounting(
         uint256 data0,
@@ -22,22 +18,15 @@ abstract contract GlobalsAndUtility is ERC20 {
         address indexed senderAddr
     );
 
-    event StakeEnd(
-        uint256 data0,
-        uint256 data1,
-        address indexed stakerAddr,
-        uint40 indexed stakeId
-    );
+    event StakeEnd(uint256 data0, uint256 data1, address indexed stakerAddr, uint40 indexed stakeId);
 
     event ShareRateChange(uint256 data0, uint40 indexed stakeId);
 
     /* Origin address */
-    address internal constant ORIGIN_ADDR =
-        0x9A6a414D6F3497c05E3b1De90520765fA1E07c03;
+    address internal constant ORIGIN_ADDR = 0x9A6a414D6F3497c05E3b1De90520765fA1E07c03;
 
     /* Flush address */
-    address internal constant FLUSH_ADDR =
-        0xDEC9f2793e3c17cd26eeFb21C4762fA5128E0399;
+    address internal constant FLUSH_ADDR = 0xDEC9f2793e3c17cd26eeFb21C4762fA5128E0399;
 
     /* ERC20 constants */
     uint8 public constant decs = 8;
@@ -50,8 +39,7 @@ abstract contract GlobalsAndUtility is ERC20 {
     uint256 private constant HEARTS_PER_HEX = 10**uint256(decs); // 1e8
     uint256 private constant HEX_PER_BTC = 1e4;
     uint256 private constant SATOSHIS_PER_BTC = 1e8;
-    uint256 internal constant HEARTS_PER_SATOSHI =
-        (HEARTS_PER_HEX / SATOSHIS_PER_BTC) * HEX_PER_BTC;
+    uint256 internal constant HEARTS_PER_SATOSHI = (HEARTS_PER_HEX / SATOSHIS_PER_BTC) * HEX_PER_BTC;
 
     /* Time of contract launch (2021-02-15T18:58:08+00:00) */
     uint256 internal constant LAUNCH_TIME = 1612911600;
@@ -61,13 +49,11 @@ abstract contract GlobalsAndUtility is ERC20 {
 
     /* Size of a transform lobby entry index uint */
     uint256 internal constant XF_LOBBY_ENTRY_INDEX_SIZE = 40;
-    uint256 internal constant XF_LOBBY_ENTRY_INDEX_MASK =
-        (1 << XF_LOBBY_ENTRY_INDEX_SIZE) - 1;
+    uint256 internal constant XF_LOBBY_ENTRY_INDEX_MASK = (1 << XF_LOBBY_ENTRY_INDEX_SIZE) - 1;
 
     /* Seed for WAAS Lobby */
     uint256 internal constant WAAS_LOBBY_SEED_HEX = 1e9;
-    uint256 internal constant WAAS_LOBBY_SEED_HEARTS =
-        WAAS_LOBBY_SEED_HEX * HEARTS_PER_HEX;
+    uint256 internal constant WAAS_LOBBY_SEED_HEARTS = WAAS_LOBBY_SEED_HEX * HEARTS_PER_HEX;
 
     /* Start of claim phase */
     uint256 internal constant PRE_CLAIM_DAYS = 1;
@@ -78,30 +64,24 @@ abstract contract GlobalsAndUtility is ERC20 {
     uint256 internal constant CLAIM_PHASE_DAYS = CLAIM_PHASE_WEEKS * 7;
 
     /* End of claim phase */
-    uint256 internal constant CLAIM_PHASE_END_DAY =
-        CLAIM_PHASE_START_DAY + CLAIM_PHASE_DAYS;
+    uint256 internal constant CLAIM_PHASE_END_DAY = CLAIM_PHASE_START_DAY + CLAIM_PHASE_DAYS;
 
     /* Number of words to hold 1 bit for each transform lobby day */
-    uint256 internal constant XF_LOBBY_DAY_WORDS =
-        (CLAIM_PHASE_END_DAY + 255) >> 8;
+    uint256 internal constant XF_LOBBY_DAY_WORDS = (CLAIM_PHASE_END_DAY + 255) >> 8;
 
     /* BigPayDay */
     uint256 internal constant BIG_PAY_DAY = CLAIM_PHASE_END_DAY + 1;
 
     /* Root hash of the UTXO Merkle tree */
-    bytes32 internal constant MERKLE_TREE_ROOT =
-        0x4e831acb4223b66de3b3d2e54a2edeefb0de3d7916e2886a4b134d9764d41bec;
+    bytes32 internal constant MERKLE_TREE_ROOT = 0x4e831acb4223b66de3b3d2e54a2edeefb0de3d7916e2886a4b134d9764d41bec;
 
     /* Size of a Satoshi claim uint in a Merkle leaf */
     uint256 internal constant MERKLE_LEAF_SATOSHI_SIZE = 45;
 
     /* Zero-fill between BTC address and Satoshis in a Merkle leaf */
-    uint256 internal constant MERKLE_LEAF_FILL_SIZE =
-        256 - 160 - MERKLE_LEAF_SATOSHI_SIZE;
-    uint256 internal constant MERKLE_LEAF_FILL_BASE =
-        (1 << MERKLE_LEAF_FILL_SIZE) - 1;
-    uint256 internal constant MERKLE_LEAF_FILL_MASK =
-        MERKLE_LEAF_FILL_BASE << MERKLE_LEAF_SATOSHI_SIZE;
+    uint256 internal constant MERKLE_LEAF_FILL_SIZE = 256 - 160 - MERKLE_LEAF_SATOSHI_SIZE;
+    uint256 internal constant MERKLE_LEAF_FILL_BASE = (1 << MERKLE_LEAF_FILL_SIZE) - 1;
+    uint256 internal constant MERKLE_LEAF_FILL_MASK = MERKLE_LEAF_FILL_BASE << MERKLE_LEAF_SATOSHI_SIZE;
 
     /* Size of a Satoshi total uint */
     uint256 internal constant SATOSHI_UINT_SIZE = 51;
@@ -131,19 +111,16 @@ abstract contract GlobalsAndUtility is ERC20 {
     uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;
 
     uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;
-    uint256 internal constant LATE_PENALTY_GRACE_DAYS =
-        LATE_PENALTY_GRACE_WEEKS * 7;
+    uint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;
 
     uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;
-    uint256 internal constant LATE_PENALTY_SCALE_DAYS =
-        LATE_PENALTY_SCALE_WEEKS * 7;
+    uint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;
 
     /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusHearts() */
     uint256 private constant LPB_BONUS_PERCENT = 20;
     uint256 private constant LPB_BONUS_MAX_PERCENT = 200;
     uint256 internal constant LPB = (364 * 100) / LPB_BONUS_PERCENT;
-    uint256 internal constant LPB_MAX_DAYS =
-        (LPB * LPB_BONUS_MAX_PERCENT) / 100;
+    uint256 internal constant LPB_MAX_DAYS = (LPB * LPB_BONUS_MAX_PERCENT) / 100;
 
     /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusHearts() */
     uint256 private constant BPB_BONUS_PERCENT = 10;
@@ -163,12 +140,10 @@ abstract contract GlobalsAndUtility is ERC20 {
     uint8 internal constant ETH_ADDRESS_HEX_LEN = ETH_ADDRESS_BYTE_LEN * 2;
 
     uint8 internal constant CLAIM_PARAM_HASH_BYTE_LEN = 12;
-    uint8 internal constant CLAIM_PARAM_HASH_HEX_LEN =
-        CLAIM_PARAM_HASH_BYTE_LEN * 2;
+    uint8 internal constant CLAIM_PARAM_HASH_HEX_LEN = CLAIM_PARAM_HASH_BYTE_LEN * 2;
 
     uint8 internal constant BITCOIN_SIG_PREFIX_LEN = 24;
-    bytes24 internal constant BITCOIN_SIG_PREFIX_STR =
-        "Bitcoin Signed Message:\n";
+    bytes24 internal constant BITCOIN_SIG_PREFIX_STR = "Bitcoin Signed Message:\n";
 
     bytes internal constant STD_CLAIM_PREFIX_STR = "Claim_HEX_to_0x";
     bytes internal constant OLD_CLAIM_PREFIX_STR = "Claim_BitcoinHEX_to_0x";
@@ -254,10 +229,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         require(g._currentDay > CLAIM_PHASE_START_DAY, "HEX: Too early");
 
         if (beforeDay != 0) {
-            require(
-                beforeDay <= g._currentDay,
-                "HEX: beforeDay cannot be in the future"
-            );
+            require(beforeDay <= g._currentDay, "HEX: beforeDay cannot be in the future");
 
             _dailyDataUpdate(g, beforeDay, false);
         } else {
@@ -268,25 +240,16 @@ abstract contract GlobalsAndUtility is ERC20 {
         _globalsSync(g, gSnapshot);
     }
 
-    function dailyDataRange(uint256 beginDay, uint256 endDay)
-        external
-        view
-        returns (uint256[] memory list)
-    {
-        require(
-            beginDay < endDay && endDay <= globals.dailyDataCount,
-            "HEX: range invalid"
-        );
+    function dailyDataRange(uint256 beginDay, uint256 endDay) external view returns (uint256[] memory list) {
+        require(beginDay < endDay && endDay <= globals.dailyDataCount, "HEX: range invalid");
 
         list = new uint256[](endDay - beginDay);
 
         uint256 src = beginDay;
         uint256 dst = 0;
         uint256 v;
         do {
-            v =
-                uint256(dailyData[src].dayUnclaimedSatoshisTotal) <<
-                (HEART_UINT_SIZE * 2);
+            v = uint256(dailyData[src].dayUnclaimedSatoshisTotal) << (HEART_UINT_SIZE * 2);
             v |= uint256(dailyData[src].dayStakeSharesTotal) << HEART_UINT_SIZE;
             v |= uint256(dailyData[src].dayPayoutTotal);
 
@@ -313,7 +276,7 @@ abstract contract GlobalsAndUtility is ERC20 {
             0, //_claimedBtcAddrCount
             block.timestamp,
             totalSupply(),
-            0  //xfLobby[_currentDay()]
+            0 //xfLobby[_currentDay()]
         ];
     }
 
@@ -333,10 +296,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         _dailyDataUpdate(g, g._currentDay, true);
     }
 
-    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)
-        internal
-        view
-    {
+    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot) internal view {
         // 1
         g._lockedHeartsTotal = globals.lockedHeartsTotal;
         g._nextStakeSharesTotal = globals.nextStakeSharesTotal;
@@ -352,10 +312,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         _globalsCacheSnapshot(g, gSnapshot);
     }
 
-    function _globalsCacheSnapshot(
-        GlobalsCache memory g,
-        GlobalsCache memory gSnapshot
-    ) internal pure {
+    function _globalsCacheSnapshot(GlobalsCache memory g, GlobalsCache memory gSnapshot) internal pure {
         // 1
         gSnapshot._lockedHeartsTotal = g._lockedHeartsTotal;
         gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;
@@ -370,9 +327,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         gSnapshot._claimedBtcAddrCount = g._claimedBtcAddrCount;
     }
 
-    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)
-        internal
-    {
+    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot) internal {
         if (
             g._lockedHeartsTotal != gSnapshot._lockedHeartsTotal ||
             g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal ||
@@ -406,10 +361,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         StakeCache memory st
     ) internal view {
         /* Ensure caller's stakeIndex is still current */
-        require(
-            stakeIdParam == stRef.stakeId,
-            "HEX: stakeIdParam not in stake"
-        );
+        require(stakeIdParam == stRef.stakeId, "HEX: stakeIdParam not in stake");
 
         st._stakeId = stRef.stakeId;
         st._stakedHearts = stRef.stakedHearts;
@@ -420,9 +372,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         st._isAutoStake = stRef.isAutoStake;
     }
 
-    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)
-        internal
-    {
+    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st) internal {
         stRef.stakeId = st._stakeId;
         stRef.stakedHearts = uint72(st._stakedHearts);
         stRef.stakeShares = uint72(st._stakeShares);
@@ -454,9 +404,7 @@ abstract contract GlobalsAndUtility is ERC20 {
         );
     }
 
-    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)
-        internal
-    {
+    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex) internal {
         uint256 lastIndex = stakeListRef.length - 1;
 
         /* Skip the copy if element to be removed is already the last element */
@@ -493,35 +441,27 @@ abstract contract GlobalsAndUtility is ERC20 {
 
         if (day == BIG_PAY_DAY) {
             uint256 bigPaySlice =
-                (gTmp._unclaimedSatoshisTotal *
-                    HEARTS_PER_SATOSHI *
-                    stakeSharesParam) / gTmp._stakeSharesTotal;
+                (gTmp._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI * stakeSharesParam) / gTmp._stakeSharesTotal;
             payout += bigPaySlice + _calcAdoptionBonus(gTmp, bigPaySlice);
         }
 
         return payout;
     }
 
-    function _calcAdoptionBonus(GlobalsCache memory g, uint256 payout)
-        internal
-        pure
-        returns (uint256)
-    {
+    function _calcAdoptionBonus(GlobalsCache memory g, uint256 payout) internal pure returns (uint256) {
         /*
             VIRAL REWARDS: Add adoption percentage bonus to payout
 
             viral = payout * (claimedBtcAddrCount / CLAIMABLE_BTC_ADDR_COUNT)
         */
-        uint256 viral =
-            (payout * g._claimedBtcAddrCount) / CLAIMABLE_BTC_ADDR_COUNT;
+        uint256 viral = (payout * g._claimedBtcAddrCount) / CLAIMABLE_BTC_ADDR_COUNT;
 
         /*
             CRIT MASS REWARDS: Add adoption percentage bonus to payout
 
             crit  = payout * (claimedSatoshisTotal / CLAIMABLE_SATOSHIS_TOTAL)
         */
-        uint256 crit =
-            (payout * g._claimedSatoshisTotal) / CLAIMABLE_SATOSHIS_TOTAL;
+        uint256 crit = (payout * g._claimedSatoshisTotal) / CLAIMABLE_SATOSHIS_TOTAL;
 
         return viral + crit;
     }
@@ -549,13 +489,9 @@ abstract contract GlobalsAndUtility is ERC20 {
         rs._payoutTotal = (rs._allocSupplyCached * 10000) / 100448995;
 
         if (day < CLAIM_PHASE_END_DAY) {
-            uint256 bigPaySlice =
-                (g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI) /
-                    CLAIM_PHASE_DAYS;
+            uint256 bigPaySlice = (g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI) / CLAIM_PHASE_DAYS;
 
-            uint256 originBonus =
-                bigPaySlice +
-                    _calcAdoptionBonus(g, rs._payoutTotal + bigPaySlice);
+            uint256 originBonus = bigPaySlice + _calcAdoptionBonus(g, rs._payoutTotal + bigPaySlice);
             rs._mintOriginBatch += originBonus;
             rs._allocSupplyCached += originBonus;
 
@@ -577,9 +513,7 @@ abstract contract GlobalsAndUtility is ERC20 {
 
         dailyData[day].dayPayoutTotal = uint72(rs._payoutTotal);
         dailyData[day].dayStakeSharesTotal = uint72(g._stakeSharesTotal);
-        dailyData[day].dayUnclaimedSatoshisTotal = uint56(
-            g._unclaimedSatoshisTotal
-        );
+        dailyData[day].dayUnclaimedSatoshisTotal = uint56(g._unclaimedSatoshisTotal);
     }
 
     function _dailyDataUpdate(
@@ -633,18 +567,13 @@ abstract contract GlobalsAndUtility is ERC20 {
 }
 
 contract StakeableToken is GlobalsAndUtility {
-    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays)
-        external
-    {
+    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external {
         GlobalsCache memory g;
         GlobalsCache memory gSnapshot;
         _globalsLoad(g, gSnapshot);
 
         /* Enforce the minimum stake time */
-        require(
-            newStakedDays >= MIN_STAKE_DAYS,
-            "HEX: newStakedDays lower than minimum"
-        );
+        require(newStakedDays >= MIN_STAKE_DAYS, "HEX: newStakedDays lower than minimum");
 
         /* Check if log data needs to be updated */
         _dailyDataUpdateAuto(g);
@@ -668,10 +597,7 @@ contract StakeableToken is GlobalsAndUtility {
 
         /* require() is more informative than the default assert() */
         require(stakeLists[stakerAddr].length != 0, "HEX: Empty stake list");
-        require(
-            stakeIndex < stakeLists[stakerAddr].length,
-            "HEX: stakeIndex invalid"
-        );
+        require(stakeIndex < stakeLists[stakerAddr].length, "HEX: stakeIndex invalid");
 
         StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];
 
@@ -680,10 +606,7 @@ contract StakeableToken is GlobalsAndUtility {
         _stakeLoad(stRef, stakeIdParam, st);
 
         /* Stake must have served full term */
-        require(
-            g._currentDay >= st._lockedDay + st._stakedDays,
-            "HEX: Stake not fully served"
-        );
+        require(g._currentDay >= st._lockedDay + st._stakedDays, "HEX: Stake not fully served");
 
         /* Stake must still be locked */
         require(st._unlockedDay == 0, "HEX: Stake already unlocked");
@@ -695,17 +618,9 @@ contract StakeableToken is GlobalsAndUtility {
         _stakeUnlock(g, st);
 
         /* stakeReturn value is unused here */
-        (, uint256 payout, uint256 penalty, uint256 cappedPenalty) =
-            _stakePerformance(g, st, st._stakedDays);
+        (, uint256 payout, uint256 penalty, uint256 cappedPenalty) = _stakePerformance(g, st, st._stakedDays);
 
-        _emitStakeGoodAccounting(
-            stakerAddr,
-            stakeIdParam,
-            st._stakedHearts,
-            st._stakeShares,
-            payout,
-            penalty
-        );
+        _emitStakeGoodAccounting(stakerAddr, stakeIdParam, st._stakedHearts, st._stakeShares, payout, penalty);
 
         if (cappedPenalty != 0) {
             _splitPenaltyProceeds(g, cappedPenalty);
@@ -756,19 +671,12 @@ contract StakeableToken is GlobalsAndUtility {
                 } else {
                     /* Deny early-unstake before an auto-stake minimum has been served */
                     if (servedDays < MIN_AUTO_STAKE_DAYS) {
-                        require(
-                            !st._isAutoStake,
-                            "HEX: Auto-stake still locked"
-                        );
+                        require(!st._isAutoStake, "HEX: Auto-stake still locked");
                     }
                 }
             }
 
-            (stakeReturn, payout, penalty, cappedPenalty) = _stakePerformance(
-                g,
-                st,
-                servedDays
-            );
+            (stakeReturn, payout, penalty, cappedPenalty) = _stakePerformance(g, st, servedDays);
         } else {
             /* Deny early-unstake before an auto-stake minimum has been served */
             require(!st._isAutoStake, "HEX: Auto-stake still locked");
@@ -779,15 +687,7 @@ contract StakeableToken is GlobalsAndUtility {
             stakeReturn = st._stakedHearts;
         }
 
-        _emitStakeEnd(
-            stakeIdParam,
-            st._stakedHearts,
-            st._stakeShares,
-            payout,
-            penalty,
-            servedDays,
-            prevUnlocked
-        );
+        _emitStakeEnd(stakeIdParam, st._stakedHearts, st._stakeShares, payout, penalty, servedDays, prevUnlocked);
 
         if (cappedPenalty != 0 && !prevUnlocked) {
             /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */
@@ -826,32 +726,21 @@ contract StakeableToken is GlobalsAndUtility {
         bool newAutoStake
     ) internal {
         /* Enforce the maximum stake time */
-        require(
-            newStakedDays <= MAX_STAKE_DAYS,
-            "HEX: newStakedDays higher than maximum"
-        );
+        require(newStakedDays <= MAX_STAKE_DAYS, "HEX: newStakedDays higher than maximum");
 
-        uint256 bonusHearts =
-            _stakeStartBonusHearts(newStakedHearts, newStakedDays);
-        uint256 newStakeShares =
-            ((newStakedHearts + bonusHearts) * SHARE_RATE_SCALE) / g._shareRate;
+        uint256 bonusHearts = _stakeStartBonusHearts(newStakedHearts, newStakedDays);
+        uint256 newStakeShares = ((newStakedHearts + bonusHearts) * SHARE_RATE_SCALE) / g._shareRate;
 
         /* Ensure newStakedHearts is enough for at least one stake share */
-        require(
-            newStakeShares != 0,
-            "HEX: newStakedHearts must be at least minimum shareRate"
-        );
+        require(newStakeShares != 0, "HEX: newStakedHearts must be at least minimum shareRate");
 
         /*
             The stakeStart timestamp will always be part-way through the current
             day, so it needs to be rounded-up to the next day to ensure all
             stakes align with the same fixed calendar days. The current day is
             already rounded-down, so rounded-up is current day + 1.
         */
-        uint256 newLockedDay =
-            g._currentDay < CLAIM_PHASE_START_DAY
-                ? CLAIM_PHASE_START_DAY + 1
-                : g._currentDay + 1;
+        uint256 newLockedDay = g._currentDay < CLAIM_PHASE_START_DAY ? CLAIM_PHASE_START_DAY + 1 : g._currentDay + 1;
 
         /* Create Stake */
         uint40 newStakeId = ++g._latestStakeId;
@@ -865,13 +754,7 @@ contract StakeableToken is GlobalsAndUtility {
             newAutoStake
         );
 
-        _emitStakeStart(
-            newStakeId,
-            newStakedHearts,
-            newStakeShares,
-            newStakedDays,
-            newAutoStake
-        );
+        _emitStakeStart(newStakeId, newStakedHearts, newStakeShares, newStakedDays, newAutoStake);
 
         /* Stake is added to total in the next round, not the current round */
         g._nextStakeSharesTotal += newStakeShares;
@@ -887,51 +770,40 @@ contract StakeableToken is GlobalsAndUtility {
         uint256 endDay
     ) private view returns (uint256 payout) {
         for (uint256 day = beginDay; day < endDay; day++) {
-            payout +=
-                (dailyData[day].dayPayoutTotal * stakeSharesParam) /
-                dailyData[day].dayStakeSharesTotal;
+            payout += (dailyData[day].dayPayoutTotal * stakeSharesParam) / dailyData[day].dayStakeSharesTotal;
         }
 
         /* Less expensive to re-read storage than to have the condition inside the loop */
         if (beginDay <= BIG_PAY_DAY && endDay > BIG_PAY_DAY) {
             uint256 bigPaySlice =
-                (g._unclaimedSatoshisTotal *
-                    HEARTS_PER_SATOSHI *
-                    stakeSharesParam) /
+                (g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI * stakeSharesParam) /
                     dailyData[BIG_PAY_DAY].dayStakeSharesTotal;
 
             payout += bigPaySlice + _calcAdoptionBonus(g, bigPaySlice);
         }
         return payout;
     }
 
-    function _stakeStartBonusHearts(
-        uint256 newStakedHearts,
-        uint256 newStakedDays
-    ) private pure returns (uint256 bonusHearts) {
+    function _stakeStartBonusHearts(uint256 newStakedHearts, uint256 newStakedDays)
+        private
+        pure
+        returns (uint256 bonusHearts)
+    {
         uint256 cappedExtraDays = 0;
 
         if (newStakedDays > 1) {
-            cappedExtraDays = newStakedDays <= LPB_MAX_DAYS
-                ? newStakedDays - 1
-                : LPB_MAX_DAYS;
+            cappedExtraDays = newStakedDays <= LPB_MAX_DAYS ? newStakedDays - 1 : LPB_MAX_DAYS;
         }
 
-        uint256 cappedStakedHearts =
-            newStakedHearts <= BPB_MAX_HEARTS
-                ? newStakedHearts
-                : BPB_MAX_HEARTS;
+        uint256 cappedStakedHearts = newStakedHearts <= BPB_MAX_HEARTS ? newStakedHearts : BPB_MAX_HEARTS;
 
         bonusHearts = cappedExtraDays * BPB + cappedStakedHearts * LPB;
         bonusHearts = (newStakedHearts * bonusHearts) / (LPB * BPB);
 
         return bonusHearts;
     }
 
-    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)
-        private
-        pure
-    {
+    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st) private pure {
         g._stakeSharesTotal -= st._stakeShares;
         st._unlockedDay = g._currentDay;
     }
@@ -960,20 +832,10 @@ contract StakeableToken is GlobalsAndUtility {
             );
             stakeReturn = st._stakedHearts + payout;
         } else {
-            payout = _calcPayoutRewards(
-                g,
-                st._stakeShares,
-                st._lockedDay,
-                st._lockedDay + servedDays
-            );
+            payout = _calcPayoutRewards(g, st._stakeShares, st._lockedDay, st._lockedDay + servedDays);
             stakeReturn = st._stakedHearts + payout;
 
-            penalty = _calcLatePenalty(
-                st._lockedDay,
-                st._stakedDays,
-                st._unlockedDay,
-                stakeReturn
-            );
+            penalty = _calcLatePenalty(st._lockedDay, st._stakedDays, st._unlockedDay, stakeReturn);
         }
         if (penalty != 0) {
             if (penalty > stakeReturn) {
@@ -1002,38 +864,21 @@ contract StakeableToken is GlobalsAndUtility {
         }
 
         if (servedDays == 0) {
-            uint256 expected =
-                _estimatePayoutRewardsDay(g, stakeSharesParam, lockedDayParam);
+            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam, lockedDayParam);
             penalty = expected * penaltyDays;
             return (payout, penalty);
         }
 
         if (penaltyDays < servedDays) {
             uint256 penaltyEndDay = lockedDayParam + penaltyDays;
-            penalty = _calcPayoutRewards(
-                g,
-                stakeSharesParam,
-                lockedDayParam,
-                penaltyEndDay
-            );
+            penalty = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, penaltyEndDay);
 
-            uint256 delta =
-                _calcPayoutRewards(
-                    g,
-                    stakeSharesParam,
-                    penaltyEndDay,
-                    servedEndDay
-                );
+            uint256 delta = _calcPayoutRewards(g, stakeSharesParam, penaltyEndDay, servedEndDay);
             payout = penalty + delta;
             return (payout, penalty);
         }
 
-        payout = _calcPayoutRewards(
-            g,
-            stakeSharesParam,
-            lockedDayParam,
-            servedEndDay
-        );
+        payout = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, servedEndDay);
 
         if (penaltyDays == servedDays) {
             penalty = payout;
@@ -1049,20 +894,15 @@ contract StakeableToken is GlobalsAndUtility {
         uint256 unlockedDayParam,
         uint256 rawStakeReturn
     ) private pure returns (uint256) {
-        uint256 maxUnlockedDay =
-            lockedDayParam + stakedDaysParam + LATE_PENALTY_GRACE_DAYS;
+        uint256 maxUnlockedDay = lockedDayParam + stakedDaysParam + LATE_PENALTY_GRACE_DAYS;
         if (unlockedDayParam <= maxUnlockedDay) {
             return 0;
         }
 
-        return
-            (rawStakeReturn * (unlockedDayParam - maxUnlockedDay)) /
-            LATE_PENALTY_SCALE_DAYS;
+        return (rawStakeReturn * (unlockedDayParam - maxUnlockedDay)) / LATE_PENALTY_SCALE_DAYS;
     }
 
-    function _splitPenaltyProceeds(GlobalsCache memory g, uint256 penalty)
-        private
-    {
+    function _splitPenaltyProceeds(GlobalsCache memory g, uint256 penalty) private {
         uint256 splitPenalty = penalty / 2;
 
         if (splitPenalty != 0) {
@@ -1079,11 +919,8 @@ contract StakeableToken is GlobalsAndUtility {
         uint256 stakeReturn
     ) private {
         if (stakeReturn > st._stakedHearts) {
-            uint256 bonusHearts =
-                _stakeStartBonusHearts(stakeReturn, st._stakedDays);
-            uint256 newShareRate =
-                ((stakeReturn + bonusHearts) * SHARE_RATE_SCALE) /
-                    st._stakeShares;
+            uint256 bonusHearts = _stakeStartBonusHearts(stakeReturn, st._stakedDays);
+            uint256 newShareRate = ((stakeReturn + bonusHearts) * SHARE_RATE_SCALE) / st._stakeShares;
 
             if (newShareRate > SHARE_RATE_MAX) {
                 newShareRate = SHARE_RATE_MAX;
@@ -1149,20 +986,14 @@ contract StakeableToken is GlobalsAndUtility {
                 (uint256(uint72(stakedHearts)) << 40) |
                 (uint256(uint72(stakeShares)) << 112) |
                 (uint256(uint72(payout)) << 184),
-            uint256(uint72(penalty)) |
-                (uint256(uint16(servedDays)) << 72) |
-                (prevUnlocked ? (1 << 88) : 0),
+            uint256(uint72(penalty)) | (uint256(uint16(servedDays)) << 72) | (prevUnlocked ? (1 << 88) : 0),
             msg.sender,
             stakeId
         );
     }
 
     function _emitShareRateChange(uint256 shareRate, uint40 stakeId) private {
-        emit ShareRateChange( // (auto-generated event)
-            uint256(uint40(block.timestamp)) |
-                (uint256(uint40(shareRate)) << 40),
-            stakeId
-        );
+        emit ShareRateChange(uint256(uint40(block.timestamp)) | (uint256(uint40(shareRate)) << 40), stakeId); // (auto-generated event)
     }
 }
 
@@ -1177,21 +1008,22 @@ contract Testable is StakeableToken {
         _mint(account, value);
     }
 
-    function skipDays(uint256 daysToSkip) external {
-
-    }
+    function skipDays(uint256 daysToSkip) external {}
 }
 
 contract HEX is Testable {
     constructor() {
-        /* Initialize global shareRate to 1 */
-        globals.shareRate = uint40(167012);
+        /* Initialize global shareRate to current HEX share rate */
+        globals.shareRate = uint40(175932);
 
         /* Initialize dailyDataCount to skip pre-claim period */
         globals.dailyDataCount = uint16(PRE_CLAIM_DAYS);
 
         /* Initialize global stakeId to 1000 */
-        globals.latestStakeId = uint40(1000);
+        globals.latestStakeId = uint40(999);
+
+        /* Initialize global HEX circulating to current HEX circulating */
+        _mint(address(this), 57095272948700000000);
     }
 
     receive() external payable {}
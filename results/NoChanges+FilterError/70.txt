@@ -18,7 +18,6 @@ contract LendingData is ERC721Holder, Ownable {
   uint256 public loanFee = 1; // 1%
   uint256 public ltv = 600; // 60%
   uint256 public interestRateToCompany = 40; // 40%
-  uint256 public interestRateToLender = 100 - interestRateToCompany;  // 60%
   uint256 public interestRate = 20; // 20%
   uint256 public installmentFrequency = 7; // days
 
@@ -40,14 +39,12 @@ contract LendingData is ERC721Holder, Ownable {
     LIQUIDATED,
     CANCELLED
   }
+  
   struct Loan {
     uint256[] nftTokenIdArray; // the unique identifier of the NFT token that the borrower uses as collateral
     uint256 id; // unique Loan identifier
     uint256 loanAmount; // the amount, denominated in tokens (see next struct entry), the borrower lends
     uint256 assetsValue; // important for determintng LTV which has to be under 50-60%
-    uint256 interestRate; // the total interest rate as percentage with 3 decimal digits after the comma 1234 means 1,234%
-    // changed to >> 1234 , automatically converted by / 1000 on front-end or back-end
-    uint256 installmentFrequency; // how many days between each installment ( payment )
     uint256 loanEnd; // "the point when the loan is approved to the point when it must be paid back to the lender"
     uint256 nrOfInstallments; // the number of installments that the borrower must pay.
     uint256 installmentAmount; // amount expected for each installment
@@ -62,6 +59,30 @@ contract LendingData is ERC721Holder, Ownable {
 
   Loan[] loans; // the array of NFT loans
 
+  constructor() {
+    uint256[] memory empty1;
+    address[] memory empty2;
+    // Initialize loans[] with empty loan (NULL LOAN)
+    loans.push(
+      Loan(
+          empty1,
+          0,
+          0,
+          0,
+          0,
+          0,
+          0,
+          0,
+          0,
+          Status.UNINITIALIZED,
+          empty2,
+          address(0),
+          address(0),
+          address(0)
+      )
+    );
+  }
+
   // Borrower creates a loan
   function createLoan(
     uint256 loanAmount,
@@ -87,8 +108,6 @@ contract LendingData is ERC721Holder, Ownable {
           id,
           loanAmount,
           assetsValue,
-          interestRate,
-          installmentFrequency,
           0, // Loan end
           nrOfInstallments,
           installmentAmount,
@@ -118,25 +137,27 @@ contract LendingData is ERC721Holder, Ownable {
     require(IERC20(loans[loanId].currency).transferFrom(
       msg.sender,
       loans[loanId].borrower, 
-      loans[loanId].loanAmount), 
-      "Transfer of liquidity failed"); // Transfer complete loanAmount to borrower
+      loans[loanId].loanAmount
+    ), "Transfer of liquidity failed"); // Transfer complete loanAmount to borrower
 
     require(IERC20(loans[loanId].currency).transferFrom(
       msg.sender,
       owner(), 
-      loans[loanId].loanAmount.mul(loanFee).div(100)), 
-      "Transfer of liquidity failed"); // loanFee percent on top of original loanAmount goes to contract owner
+      loans[loanId].loanAmount.mul(loanFee).div(100)
+    ), "Transfer of liquidity failed"); // loanFee percent on top of original loanAmount goes to contract owner
 
     // Borrower assigned , status is 1 , first installment ( payment ) completed
     loans[loanId].lender = msg.sender;
-    loans[loanId].loanEnd = block.timestamp.add(loans[loanId].nrOfInstallments.mul(loans[loanId].installmentFrequency).mul(1 days));
+    loans[loanId].loanEnd = block.timestamp.add(loans[loanId].nrOfInstallments.mul(installmentFrequency).mul(1 days));
     loans[loanId].status = Status.APPROVED;
 
-    emit LoanApproved(loanId,
+    emit LoanApproved(
+      loanId,
       block.timestamp, 
       loans[loanId].loanEnd, 
       loans[loanId].installmentAmount, 
-      Status.APPROVED);
+      Status.APPROVED
+    );
   }
 
 
@@ -153,12 +174,18 @@ contract LendingData is ERC721Holder, Ownable {
     loans[loanId].status = Status.CANCELLED;
 
     // We send the items back to him
-    _transferItems(address(this), 
+    _transferItems(
+      address(this), 
       loans[loanId].borrower, 
       loans[loanId].nftAddressArray, 
-      loans[loanId].nftTokenIdArray);
+      loans[loanId].nftTokenIdArray
+    );
 
-    emit LoanCancelled(loanId, block.timestamp, Status.CANCELLED);
+    emit LoanCancelled(
+      loanId,
+      block.timestamp,
+      Status.CANCELLED
+    );
   }
 
   // Borrower pays installment for loan
@@ -175,19 +202,26 @@ contract LendingData is ERC721Holder, Ownable {
     IERC20(loans[loanId].currency).transferFrom(
       msg.sender,
       loans[loanId].lender, 
-      amountPaidAsInstallment);
+      amountPaidAsInstallment
+    );
 
     IERC20(loans[loanId].currency).transferFrom(
       msg.sender,
       owner(), 
-      amountPaidAsInstallment.mul(interestRateToCompany).div(100));
+      amountPaidAsInstallment.mul(interestRateToCompany).div(100)
+    );
 
     loans[loanId].paidAmount = loans[loanId].paidAmount.add(amountPaidAsInstallment);
 
     if (loans[loanId].paidAmount >= loans[loanId].amountDue)
       loans[loanId].status = Status.LIQUIDATED;
 
-    emit LoanPayment(loanId, block.timestamp, amountPaidAsInstallment, Status.APPROVED);
+    emit LoanPayment(
+      loanId,
+      block.timestamp,
+      amountPaidAsInstallment,
+      Status.APPROVED
+    );
   }
 
 
@@ -203,21 +237,30 @@ contract LendingData is ERC721Holder, Ownable {
       loans[loanId].status = Status.DEFAULTED;
       
       // We send the items back to him
-      _transferItems(address(this),
+      _transferItems(
+        address(this),
         loans[loanId].lender,
         loans[loanId].nftAddressArray,
-        loans[loanId].nftTokenIdArray);
+        loans[loanId].nftTokenIdArray
+      );
 
     } else if (loans[loanId].paidAmount == loans[loanId].amountDue) {
 
       // Otherwise the lender will receive the items
-      _transferItems(address(this),
+      _transferItems(
+        address(this),
         loans[loanId].borrower,
         loans[loanId].nftAddressArray,
-        loans[loanId].nftTokenIdArray);
+        loans[loanId].nftTokenIdArray
+      );
+        
     }
 
-    emit ItemsWithdrawn(loanId, msg.sender, Status.LIQUIDATED);
+    emit ItemsWithdrawn(
+      loanId,
+      msg.sender,
+      Status.LIQUIDATED
+    );
 
   }
 
@@ -235,7 +278,12 @@ contract LendingData is ERC721Holder, Ownable {
     loans[loanId].loanEnd = loans[loanId].loanEnd.add(installmentFrequency.mul(1 days).mul(nrOfInstallments));
     loans[loanId].nrOfInstallments = loans[loanId].nrOfInstallments.add(nrOfInstallments);
 
-    emit LoanExtended(loanId, block.timestamp, loans[loanId].loanEnd, loans[loanId].nrOfInstallments);
+    emit LoanExtended(
+      loanId,
+      block.timestamp,
+      loans[loanId].loanEnd,
+      loans[loanId].nrOfInstallments
+    );
   }
 
 
@@ -272,7 +320,7 @@ contract LendingData is ERC721Holder, Ownable {
 
   // Getters & Setters
 
-  function getLoanStatus (uint256 loanId) external view returns(Status) {
+  function getLoanStatus(uint256 loanId) external view returns(Status) {
     return loans[loanId].status;
   }
 
@@ -289,14 +337,50 @@ contract LendingData is ERC721Holder, Ownable {
   }
 
   // TODO validate input
-  function setInterestRateToLender(uint256 newInterestRateToLender) external onlyOwner {
-    interestRateToLender = newInterestRateToLender;
-    emit InterestRateToLenderChanged(newInterestRateToLender);
-  }
-
   function setLoanFee(uint256 newLoanFee) external onlyOwner {
     require(loanFee >= 0 && loanFee < 100, "Loan fee out of bounds");
     loanFee = newLoanFee;
   }
 
+
+  // Auxiliary functions
+
+  // Returns loan by id, ommits nrOfInstallments as the stack was too deep and we can derive it in the backend
+  function getLoanById(uint256 loanId) 
+    external
+    view
+    returns(
+      uint256 id,
+      uint256 loanAmount,
+      uint256 assetsValue,
+      uint256 loanEnd,
+      uint256 installmentAmount,
+      uint256 amountDue,
+      uint256 paidAmount,
+      uint256[] memory nftTokenIdArray,
+      address[] memory nftAddressArray,
+      address payable borrower,
+      address payable lender,
+      address currency,
+      Status status
+    ) {
+      Loan storage loan = loans[loanId];
+      
+      id = uint256(loan.id);
+      loanAmount = uint256(loan.loanAmount);
+      assetsValue = uint256(loan.assetsValue);
+      loanEnd = uint256(loan.loanEnd);
+      installmentAmount = uint256(loan.installmentAmount);
+      amountDue = uint256(loan.amountDue);
+      paidAmount = uint256(loan.paidAmount);
+      nftTokenIdArray = uint256[](loan.nftTokenIdArray);
+      nftAddressArray = address[](loan.nftAddressArray);
+      borrower = payable(loan.borrower);
+      lender = payable(loan.lender);
+      currency = address(currency);
+      status = Status(loan.status);
+  }
+
+  // TODO: Add auxiliary loan status update function for DEFAULTED state to be used by whomever
+
 }
\ No newline at end of file
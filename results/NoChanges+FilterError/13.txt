@@ -1,18 +1,18 @@
-pragma solidity ^0.4.24;
+pragma solidity 0.4.24;
 
 import "./SafeMath.sol";
 import "./Address.sol";
 import "./IERC1155TokenReceiver.sol";
 import "./IERC1155.sol";
 
-// A basic implementation of ERC1155.
-// Supports core 1155
+// A sample implementation of core ERC1155 function.
 contract ERC1155 is IERC1155, ERC165
 {
     using SafeMath for uint256;
     using Address for address;
 
-    bytes4 constant public ERC1155_RECEIVED = 0xf23a6e61;
+    bytes4 constant public ERC1155_RECEIVED       = 0xf23a6e61;
+    bytes4 constant public ERC1155_BATCH_RECEIVED = 0xbc197c81;
 
     // id => (owner => balance)
     mapping (uint256 => mapping(address => uint256)) internal balances;
@@ -31,10 +31,11 @@ contract ERC1155 is IERC1155, ERC165
         bytes4(keccak256("safeTransferFrom(address,address,uint256,uint256,bytes)")) ^
         bytes4(keccak256("safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)")) ^
         bytes4(keccak256("balanceOf(address,uint256)")) ^
+        bytes4(keccak256("balanceOfBatch(address[],uint256[])")) ^
         bytes4(keccak256("setApprovalForAll(address,bool)")) ^
         bytes4(keccak256("isApprovedForAll(address,address)"));
     */
-    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0x97a409d2;
+    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;
 
     function supportsInterface(bytes4 _interfaceId)
     external
@@ -52,24 +53,25 @@ contract ERC1155 is IERC1155, ERC165
 
     /**
         @notice Transfers value amount of an _id from the _from address to the _to addresses specified. Each parameter array should be the same length, with each index correlating.
-        @dev MUST emit Transfer event on success.
-        Caller must have sufficient allowance by _from for the _id/_value pair, or isApprovedForAll must be true.
-        Throws if `_to` is the zero address.
-        Throws if `_id` is not a valid token ID.
-        When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC1155Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`.
-        @param _from    source addresses
-        @param _to      target addresses
-        @param _id      ID of the Token
-        @param _value   transfer amounts
+        @dev MUST emit TransferSingle event on success.
+        Caller must be approved to manage the _from account's tokens (see isApprovedForAll).
+        MUST Throw if `_to` is the zero address.
+        MUST Throw if `_id` is not a valid token ID.
+        MUST Throw on any other error.
+        When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return value is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`.
+        @param _from    Source addresses
+        @param _to      Target addresses
+        @param _id      ID of the token type
+        @param _value   Transfer amount
         @param _data    Additional data with no specified format, sent in call to `_to`
     */
-
     function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external {
 
-        require(_to != 0);
+        require(_to != 0, "_to must be non-zero.");
         require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, "Need operator approval for 3rd party transfers.");
 
-        // Note: SafeMath will deal with insuficient funds _from
+        // SafeMath will throw with insuficient funds _from
+        // or if _id is not valid (balance will be 0)
         balances[_id][_from] = balances[_id][_from].sub(_value);
         balances[_id][_to]   = _value.add(balances[_id][_to]);
 
@@ -81,48 +83,48 @@ contract ERC1155 is IERC1155, ERC165
     }
 
     /**
-        @notice Send multiple types of Tokens from a 3rd party in one transfer (with safety call)
-        @dev MUST emit Transfer event per id on success.
-        Caller must have a sufficient allowance by _from for each of the id/value pairs.
-        Throws on any error rather than return a false flag to minimize user errors.
+        @notice Send multiple types of Tokens from a 3rd party in one transfer (with safety call).
+        @dev MUST emit TransferBatch event on success.
+        Caller must be approved to manage the _from account's tokens (see isApprovedForAll).
+        MUST Throw if `_to` is the zero address.
+        MUST Throw if any of the `_ids` is not a valid token ID.
+        MUST Throw on any other error.
+        When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return value is not `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`.
         @param _from    Source address
         @param _to      Target address
-        @param _ids     Types of Tokens
+        @param _ids     IDs of each token type
         @param _values  Transfer amounts per token type
         @param _data    Additional data with no specified format, sent in call to `_to`
     */
     function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data) external {
 
-        require(_to != 0);
-        require(_ids.length == _values.length);
-
-        // Solidity does not scope variables, so declare them here.
-        uint256 id;
-        uint256 value;
-        uint256 i;
-
-        // Only supporting a global operator approval allows us to do only 1 check and not to touch storage to handle allowances.
+        // MUST Throw on errors
+        require(_to != 0, "_to must be non-zero.");
+        require(_ids.length == _values.length, "_ids and _values array lenght must match.");
         require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, "Need operator approval for 3rd party transfers.");
 
-        // We assume _ids.length == _values.length
-        // we don't check since out of bound access will throw.
-        for (i = 0; i < _ids.length; ++i) {
-            id = _ids[i];
-            value = _values[i];
+        for (uint256 i = 0; i < _ids.length; ++i) {
+            uint256 id = _ids[i];
+            uint256 value = _values[i];
 
+            // SafeMath will throw with insuficient funds _from
+            // or if _id is not valid (balance will be 0)
             balances[id][_from] = balances[id][_from].sub(value);
-            balances[id][_to] = value.add(balances[id][_to]);
+            balances[id][_to]   = value.add(balances[id][_to]);
         }
 
+        // MUST emit event
         emit TransferBatch(msg.sender, _from, _to, _ids, _values);
 
+        // Now that the balances are updated,
+        // call onERC1155BatchReceived if the destination is a contract
         if (_to.isContract()) {
-            require(IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _values, _data) == ERC1155_RECEIVED);
+            require(IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _values, _data) == ERC1155_BATCH_RECEIVED);
         }
     }
 
     /**
-        @notice Get the balance of an account's Tokens
+        @notice Get the balance of an account's Tokens.
         @param _owner  The address of the token holder
         @param _id     ID of the Token
         @return        The _owner's balance of the Token type requested
@@ -134,8 +136,28 @@ contract ERC1155 is IERC1155, ERC165
         return balances[_id][_owner];
     }
 
+
+    /**
+        @notice Get the balance of multiple account/token pairs
+        @param _owners The addresses of the token holders
+        @param _ids    ID of the Tokens
+        @return        The _owner's balance of the Token types requested
+     */
+    function balanceOfBatch(address[] _owners, uint256[] _ids) external view returns (uint256[]) {
+
+        require(_owners.length == _ids.length);
+
+        uint256[] memory balances_ = new uint256[](_owners.length);
+
+        for (uint256 i = 0; i < _owners.length; ++i) {
+            balances_[i] = balances[_ids[i]][_owners[i]];
+        }
+
+        return balances_;
+    }
+
     /**
-        @notice Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s tokens.
+        @notice Enable or disable approval for a third party ("operator") to manage all of the caller's tokens.
         @dev MUST emit the ApprovalForAll event on success.
         @param _operator  Address to add to the set of authorized operators
         @param _approved  True if the operator is approved, false to revoke approval
@@ -146,7 +168,7 @@ contract ERC1155 is IERC1155, ERC165
     }
 
     /**
-        @notice Queries the approval status of an operator for a given Token and owner
+        @notice Queries the approval status of an operator for a given owner.
         @param _owner     The owner of the Tokens
         @param _operator  Address of authorized operator
         @return           True if the operator is approved, false if not
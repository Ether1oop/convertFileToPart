@@ -3,7 +3,6 @@ pragma solidity ^0.8.13;
 
 import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
 
-import "../modifiers/GloballyAccepted.sol";
 
 import "../interfaces/erc20/IFrabricWhitelist.sol";
 
@@ -16,7 +15,7 @@ abstract contract FrabricWhitelist is Initializable, IFrabricWhitelist {
   mapping(address => bytes32) public override info;
 
   function _setParentWhitelist(address parent) internal {
-    emit ParentWhitelistChanged(parentWhitelist, parent);
+    emit ParentWhitelistChange(parentWhitelist, parent);
     parentWhitelist = parent;
   }
 
@@ -27,23 +26,23 @@ abstract contract FrabricWhitelist is Initializable, IFrabricWhitelist {
   // Set dataHash of 0x0 to remove from whitelist
   function _setWhitelisted(address person, bytes32 dataHash) internal {
     // If they've already been set with this data hash, return
-    if (_whitelist[person] == dataHash) {
+    if (info[person] == dataHash) {
       return;
     }
-    emit WhitelistChange(person, _whitelist[person], dataHash);
-    _whitelist[person] = dataHash;
+    emit WhitelistUpdate(person, info[person], dataHash);
+    info[person] = dataHash;
   }
 
   function whitelisted(address person) public view virtual override returns (bool) {
     return (
       // Check the parent whitelist (actually relevant check most of the time)
       ((parentWhitelist != address(0)) && IFrabricWhitelist(parentWhitelist).whitelisted(person)) ||
       // Global or explicitly whitelisted
-      global || (_whitelist[person] != bytes32(0))
+      global || (info[person] != bytes32(0))
     );
   }
 
   function explicitlyWhitelisted(address person) public view override returns (bool) {
-    return _whitelist[person] != bytes32(0);
+    return info[person] != bytes32(0);
   }
 }
@@ -3,13 +3,17 @@ pragma solidity ^0.8.0;
 
 // Contracts
 import "../storage/ERC721.sol";
-import "../data.sol";
 import { int_beforeTokenTransfer_ERC721_v1 } from "./before-token-transfer.sol";
+import { int_checkOnReceived_ERC721_v1 } from "./check-received.sol";
 import { int_approve_ERC721_v1 } from "./approve.sol";
 
+// Utils
+import { ERC721EventsLib } from "../data.sol";
+
 abstract contract int_transfer_ERC721_v1 is
     sto_ERC721,
     int_beforeTokenTransfer_ERC721_v1,
+    int_checkOnReceived_ERC721_v1,
     int_approve_ERC721_v1
 {
     /**
@@ -43,8 +47,42 @@ abstract contract int_transfer_ERC721_v1 is
         erc721Store().balances[to] += 1;
         erc721Store().owners[tokenId] = to;
 
-        emit Transfer(from, to, tokenId);
+        emit ERC721EventsLib.Transfer(from, to, tokenId);
     }
-}
 
-abstract contract int_transfer_ERC721 is int_transfer_ERC721_v1 {}
+    /**
+     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
+     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
+     *
+     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
+     *
+     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
+     * implement alternative mechanisms to perform token transfer, such as signature-based.
+     *
+     * Requirements:
+     *
+     * - `from` cannot be the zero address.
+     * - `to` cannot be the zero address.
+     * - `tokenId` token must exist and be owned by `from`.
+     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
+     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
+     *
+     * Emits a {Transfer} event.
+     */
+    function _safeTransfer(
+        address from,
+        address to,
+        uint256 tokenId,
+        bytes memory _data
+    ) internal virtual {
+        require(
+            _isApprovedOrOwner(msg.sender, tokenId),
+            "ERC721: transfer caller is not owner nor approved"
+        );
+        _transfer(from, to, tokenId);
+        require(
+            _checkOnERC721Received(from, to, tokenId, _data),
+            "ERC721: transfer to non ERC721Receiver implementer"
+        );
+    }
+}
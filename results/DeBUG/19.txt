@@ -81,7 +81,7 @@ library Archaeologists {
 
     function registerArchaeologist(
         Datas.Data storage self,
-        bytes memory publicKey,
+        bytes memory currentPublicKey,
         string memory endpoint,
         address paymentAddress,
         uint256 feePerByte,
@@ -92,14 +92,14 @@ library Archaeologists {
         IERC20 sarcoToken
     ) public returns (bool) {
         archaeologistExists(self, msg.sender, false);
-        Utils.publicKeyLength(publicKey);
-        Utils.publicKeyAccuracy(publicKey, msg.sender);
+        Utils.publicKeyLength(currentPublicKey);
 
         sarcoToken.transferFrom(msg.sender, address(this), freeBond);
 
         Types.Archaeologist memory newArch = Types.Archaeologist({
             exists: true,
-            publicKey: publicKey,
+            archaeologist: msg.sender,
+            currentPublicKey: currentPublicKey,
             endpoint: endpoint,
             paymentAddress: paymentAddress,
             feePerByte: feePerByte,
@@ -114,7 +114,8 @@ library Archaeologists {
         self.archaeologistAddresses.push(msg.sender);
 
         emit Events.RegisterArchaeologist(
-            newArch.publicKey,
+            newArch.archaeologist,
+            newArch.currentPublicKey,
             newArch.endpoint,
             newArch.paymentAddress,
             newArch.feePerByte,
@@ -129,6 +130,7 @@ library Archaeologists {
 
     function updateArchaeologist(
         Datas.Data storage self,
+        bytes memory newPublicKey,
         string memory endpoint,
         address paymentAddress,
         uint256 feePerByte,
@@ -141,21 +143,29 @@ library Archaeologists {
         archaeologistExists(self, msg.sender, true);
 
         Types.Archaeologist storage arch = self.archaeologists[msg.sender];
+
+        if (keccak256(arch.currentPublicKey) != keccak256(newPublicKey)) {
+            emit Events.UpdateArchaeologistPublicKey(
+                arch.archaeologist,
+                newPublicKey
+            );
+            arch.currentPublicKey = newPublicKey;
+        }
+
         arch.endpoint = endpoint;
         arch.paymentAddress = paymentAddress;
         arch.feePerByte = feePerByte;
         arch.minimumBounty = minimumBounty;
         arch.minimumDiggingFee = minimumDiggingFee;
         arch.maximumResurrectionTime = maximumResurrectionTime;
 
-        increaseFreeBond(self, msg.sender, freeBond);
-
         if (freeBond > 0) {
+            increaseFreeBond(self, msg.sender, freeBond);
             sarcoToken.transferFrom(msg.sender, address(this), freeBond);
         }
 
         emit Events.UpdateArchaeologist(
-            arch.publicKey,
+            arch.archaeologist,
             arch.endpoint,
             arch.paymentAddress,
             arch.feePerByte,
@@ -168,7 +178,7 @@ library Archaeologists {
         return true;
     }
 
-    function withdrawalBond(
+    function withdrawBond(
         Datas.Data storage self,
         uint256 amount,
         IERC20 sarcoToken
@@ -177,7 +187,7 @@ library Archaeologists {
         Types.Archaeologist storage arch = self.archaeologists[msg.sender];
         reduceFreeBond(self, msg.sender, amount);
         sarcoToken.transfer(arch.paymentAddress, amount);
-        emit Events.WithdrawalFreeBond(arch.publicKey, amount);
+        emit Events.WithdrawalFreeBond(arch.archaeologist, amount);
         return true;
     }
 }
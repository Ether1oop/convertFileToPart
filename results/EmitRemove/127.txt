@@ -22,7 +22,7 @@ contract PrincipalRepayTest is BaseSystemTest {
 
     function setUp() public {
         baseSetup();
-        createTestUsers(false);
+        createTestUsers();
 
         hevm = Hevm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);
         hevm.warp(1234567);
@@ -34,7 +34,6 @@ contract PrincipalRepayTest is BaseSystemTest {
         invest(defaultAmount);
         hevm.warp(now + 1 days);
         coordinator.closeEpoch();
-        emit log_named_uint("reserve", reserve.totalBalance());
     }
 
     function repay(uint loanId, uint tokenId, uint amount, uint expectedDebt) public {
@@ -55,8 +54,6 @@ contract PrincipalRepayTest is BaseSystemTest {
         // assert: loan has open debt
         assert(pile.debt(loanId) > 0);
         // assert: debt includes accrued interest (tolerance +/- 1)
-        emit log_named_uint("debt", pile.debt(loanId));
-
         assertEq(pile.debt(loanId), expectedDebt, 10);
         // assert: borrower has enough funds
         assert(currency.balanceOf(borrower_) >= repayAmount);
@@ -141,12 +138,10 @@ contract PrincipalRepayTest is BaseSystemTest {
         uint riskGroup = 0; // -> no interest rate
         uint rate = getRateByRisk(riskGroup);
         uint ceiling = computeCeiling(riskGroup, nftPrice); // 60 %
-
         // expected debt after 1 year of compounding
         uint expectedDebt =  60 ether;
         uint repayAmount = expectedDebt;
         (uint loanId, uint tokenId) = createLoanAndWithdraw(borrower_, nftPrice, riskGroup);
-
         // borrower allows shelf full control over borrower tokens
         borrower.doApproveCurrency(address(shelf), uint(-1));
         //repay after 1 year
@@ -2,11 +2,13 @@ pragma solidity 0.5.0;
 pragma experimental ABIEncoderV2;
 import {Secp256k1} from "./Secp256k1.sol";
 import "./SafeMath.sol";
+import "./RingCTVerifier.sol";
+import "./CopyUtils.sol";
 interface IRegistryInterface {
     function getPrivacyAddress(address _normal) external view returns (bytes memory);
     function getNormalAddress(bytes calldata _privacy) external view returns (address);
 }
-contract PrivacyCT {
+contract PrivacyCT is RingCTVerifier {
     using SafeMath for uint256;
     struct CompressPubKey {
         uint8 yBit;
@@ -26,14 +28,15 @@ contract PrivacyCT {
         uint256 amount; //encoded amount
         CompressPubKey txPub;
         uint256 mask;   //encoded mask
-        bool isSpent;
     }
     event NewUTXO(uint256[3] _Xs,   //commitmentX, pubkeyX, txPubX
         uint8[3] _YBits,        //commitmentYBit, pubkeyYBit, _txPubYBit
         uint256[2] _amount,
         uint256 _index);
+
     UTXO[] public utxos;
     mapping(uint256 => bool) public spentUTXOs;
+    mapping(uint256 => bool) keyImagesMapping;
     //mapping(uint256 => bool) public keyImages;
     //the first step for every one to use private transactions is deposit to the contract
     function deposit(uint _pubkeyX, uint _pubkeyY, uint _txPubKeyX, uint _txPubKeyY, uint256 _mask, uint256 _amount, uint256 _encodedMask) external payable {
@@ -53,9 +56,7 @@ contract PrivacyCT {
             pubkey: CompressPubKey(pybit + 2, px),
             amount: _amount,
             txPub: CompressPubKey(txybit + 2, txx),
-            mask: _encodedMask,
-            isSpent: false
-            })
+            mask: _encodedMask            })
         );
         UTXO storage lastUTXO = utxos[utxos.length.sub(1)];
         emit NewUTXO([lastUTXO.commitment.x, lastUTXO.pubkey.x, lastUTXO.txPub.x],
@@ -76,20 +77,68 @@ contract PrivacyCT {
     //ringCT proof size ctSize: uint16 => 2 byte
     //ringCT proof: ctSize bytes
     //bulletproofs: bp
-    function privateSend(uint256[] memory _inputIDs,
+    function privateSend(uint256[][] memory _inputIDs,  //[numRing][ringSize]
         uint256[] memory _outputs, //1/3 for commitments, 1/3 for stealths,, 1/3 for txpubs
-        uint256[] memory _amounts //1/2 for encryptd amounts, 1/2 for masks
+        uint256[] memory _amounts, //1/2 for encryptd amounts, 1/2 for masks
+        bytes memory ringSignature
     ) public {
         //call precombiled to verify proof
         require(_inputIDs.length < 10, "too many inputs");
         require(_inputIDs.length > 0, "no inputs");
-        require(_outputs.length % 6 == 0);
-        for(i = 0; i < _inputIDs.length; i++) {
-            require(!spentUTXOs[_inputIDs[i]], "input already spent");
-        }
+        require(_outputs.length % 6 == 0 && _outputs.length <= 2*6);
         require(_amounts.length.div(2) == _outputs.length.div(6));
-        emit Inputs(_inputIDs);
-        //compute sum of input
+
+        //verify signature size
+        require(ringSignature.length > 16);
+        //[0]: numRing
+        //[1]: ringSize
+        //[2]: public offset
+        //[3]: key images offset
+        uint256[4] memory ringParams;
+        uint256[3] memory loopVars;
+        ringParams[0] = convertBytesToUint(ringSignature, 0, 8);    //numRing
+        ringParams[1] = convertBytesToUint(ringSignature, 8, 8);    //ringSize
+        require(ComputeSignatureSize(ringParams[0], ringParams[1]) == ringSignature.length);
+
+        ringParams[2] = 80 + ringParams[0] * ringParams[1] *32;
+        ringParams[3] = ringParams[2] + ringParams[0] * ringParams[1] * 33;
+
+        //verify public keys is correct, the number of pubkey inputs = ringParams[0] * ringParams[1]
+        //pubkeys start from offset: 80 + ringParams[0] * ringParams[1] *32
+        for(loopVars[0] = 0; loopVars[0] < ringParams[0]; loopVars[0]++) {
+            for(loopVars[1] = 0; loopVars[1] < ringParams[1]; loopVars[1]++) {
+                (bool copied, byte[33] memory pk) = CopyUtils.Copy33Bytes(ringSignature, ringParams[2] + (loopVars[0]*ringParams[1] + loopVars[1])*33);
+                require(copied);
+                require(uint8(pk[0]) % 2 ==
+                    utxos[_inputIDs[loopVars[0]][loopVars[1]]].pubkey.yBit % 2);    //yBit same
+                require(convertBytes33ToUint(pk,  1, 32) ==
+                    utxos[_inputIDs[loopVars[0]][loopVars[1]]].pubkey.x);
+            }
+        }
+
+        (bool success, byte[] memory inputData) = CopyUtils.CopyBytes(ringSignature, ringParams[2], ringParams[0]*ringParams[1]);
+        require(success);
+        bytes32 message;
+        if (_outputs.length == 6) {
+            message = keccak256(abi.encodePacked(inputData, _outputs[2], _outputs[3]));
+        } else {
+            message = keccak256(abi.encodePacked(inputData, _outputs[2], _outputs[3], _outputs[8], _outputs[9]));
+        }
+        require(CopyUtils.CompareBytes(message, ringSignature, 16), "message must be equal");
+
+        //verify key image spend
+        for(loopVars[0] = 0; loopVars[0] < ringParams[0]; loopVars[0]++) {
+            (bool success, byte[33] memory ki) = CopyUtils.Copy33Bytes(ringSignature, ringParams[3] + loopVars[0]*33);
+            require(success);
+            uint256 kiHash = bytesToUint(keccak256(abi.encodePacked(ki)));
+            require(!keyImagesMapping[kiHash], "key image is spent!");
+            keyImagesMapping[kiHash] = true;
+        }
+
+        //verify ringSignature
+        require(VerifyRingCT(ringSignature), "signature failed");
+
+        /*//compute sum of input
         (inputSum[0], inputSum[1]) = Secp256k1.decompressXY(utxos[_inputIDs[0]].commitment.yBit - 2, utxos[_inputIDs[0]].commitment.x);
         emit InputSum(inputSum[0], inputSum[1]);
         for (i = 1; i < _inputIDs.length; i++) {
@@ -102,14 +151,13 @@ contract PrivacyCT {
         //compute sum of outputs
         outputSum[0] = _outputs[0];
         outputSum[1] = _outputs[1];
-        emit OutputSum(outputSum[0], outputSum[1]);
         for (i = 1; i < _outputs.length.div(6); i++) {
             (uint256 _x, uint256 _y) = Secp256k1.add(outputSum[0], outputSum[1], _outputs[i*2], _outputs[i*2+1]);
             emit OutputSum(_outputs[i*2], _outputs[i*2+1]);
             outputSum[0] = _x;
             outputSum[1] = _y;
             emit OutputSum(outputSum[0], outputSum[1]);
-        }
+        }*/
         //require(inputSum[0] == outputSum[0] && inputSum[1] == outputSum[1]);
         //create output UTXOs
         outputLength = _outputs.length.div(6);
@@ -126,8 +174,7 @@ contract PrivacyCT {
                 pubkey: CompressPubKey(yBitPub + 2, xPub),
                 amount: _amounts[i],
                 txPub: CompressPubKey(yBitTxPub + 2, xTxPub),
-                mask: _amounts[outputLength + i],
-                isSpent: false
+                mask: _amounts[outputLength + i]
                 })
             );
             emit NewUTXO([utxos[utxos.length - 1].commitment.x, utxos[utxos.length - 1].pubkey.x, utxos[utxos.length - 1].txPub.x],
@@ -193,8 +240,7 @@ contract PrivacyCT {
             pubkey: CompressPubKey(utxos[_utxoIndex].pubkey.yBit + 2, utxos[_utxoIndex].pubkey.x),
             amount: _amount1,
             txPub: CompressPubKey(utxos[_utxoIndex].txPub.yBit + 2, utxos[_utxoIndex].txPub.x),
-            mask: utxos[_utxoIndex].mask,
-            isSpent: false
+            mask: utxos[_utxoIndex].mask
             }));
         emit NewUTXO([utxos[utxos.length - 1].commitment.x, utxos[utxos.length - 1].pubkey.x, utxos[utxos.length - 1].txPub.x],
             [utxos[utxos.length - 1].commitment.yBit, utxos[utxos.length - 1].pubkey.yBit, utxos[utxos.length - 1].txPub.yBit],
@@ -240,14 +286,15 @@ contract PrivacyCT {
     }
     function getUTXO(uint256 index) public view returns (uint256[3] memory,
         uint8[3] memory,
-        uint256[2] memory, //0. encrypted amount, 1. encrypted mask
-        bool) {
+        uint256[2] memory //0. encrypted amount, 1. encrypted mask
+    ) {
         return (
         [utxos[index].commitment.x, utxos[index].pubkey.x, utxos[index].txPub.x],
         [utxos[index].commitment.yBit, utxos[index].pubkey.yBit, utxos[index].txPub.yBit],
-        [utxos[index].amount,utxos[index].mask],
-        utxos[index].isSpent);
+        [utxos[index].amount,utxos[index].mask]
+        );
     }
+
     //dont receive any money via default callback
     function () external payable {
         revert();
@@ -259,4 +306,20 @@ contract PrivacyCT {
         }
         return number;
     }
+
+    function convertBytesToUint(bytes memory b, uint256 _start, uint256 _size) public returns (uint256){
+        uint256 number;
+        for(uint256 j = 0; j < _size; j++){
+            number = number + (2**(8*(_size - (j+1))))*uint256(uint8(b[j + _start]));
+        }
+        return number;
+    }
+
+    function convertBytes33ToUint(byte[33] memory b, uint256 _start, uint256 _size) public returns (uint256){
+        uint256 number;
+        for(uint256 j = 0; j < _size; j++){
+            number = number + (2**(8*(_size - (j+1))))*uint256(uint8(b[j + _start]));
+        }
+        return number;
+    }
 }
\ No newline at end of file
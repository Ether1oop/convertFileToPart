@@ -8,7 +8,13 @@ import "../adaptersSetup.sol";
 import "../../Loihi.sol";
 import "../../adapters/kovan/kovanCUsdcAdapter.sol";
 import "../../adapters/kovan/kovanCDaiAdapter.sol";
-
+import "../../adapters/kovan/kovanUsdtAdapter.sol";
+import "../../adapters/local/localCUsdcAdapter.sol";
+import "../../adapters/local/localCDaiAdapter.sol";
+import "../../adapters/local/localUsdtAdapter.sol";
+import "../../LoihiLiquidity.sol";
+import "../../LoihiExchange.sol";
+import "../../LoihiERC20.sol";
 
 contract LoihiTest is AdaptersSetup, DSMath, DSTest {
     Loihi l;
@@ -17,12 +23,15 @@ contract LoihiTest is AdaptersSetup, DSMath, DSTest {
 
         // setupFlavors();
         // setupAdapters();
-        // l = new Loihi(chai, cdai, dai, pot, cusdc, usdc, usdt);
+        // address exchange = address(new LoihiExchange());
+        // address liquidity = address(new LoihiLiquidity());
+        // address erc20 = address(new LoihiERC20());
+        // l = new Loihi(erc20, exchange, liquidity, chai, cdai, dai, pot, cusdc, usdc, usdt);
         // approveFlavors(address(l));
         
         setupFlavors();
         setupAdapters();
-        l = new Loihi(address(0), address(0), address(0), address(0), address(0), address(0), address(0));
+        l = new Loihi();
         approveFlavors(address(l));
 
         uint256 weight = WAD / 3;
@@ -43,15 +52,19 @@ contract LoihiTest is AdaptersSetup, DSMath, DSTest {
     function testproportionalDeposit () public {
 
         uint256 mintedShells = l.proportionalDeposit(100 * (10 ** 18));
-        emit log_named_uint("shells", mintedShells);
         assertEq(mintedShells, 100 * (10 ** 18));
+
         uint256 cusdcBal = IERC20(cusdc).balanceOf(address(l)); // 165557372275ish
         uint256 cdaiBal = IERC20(cdai).balanceOf(address(l)); // 163925889326ish
         uint256 usdtBal = IERC20(usdt).balanceOf(address(l)); // 33333333333333333300
 
         uint256 usdtNumeraireAmount = new KovanUsdtAdapter().getNumeraireAmount(usdtBal);
         uint256 cusdcNumeraireAmount = new KovanCUsdcAdapter().getNumeraireAmount(cusdcBal);
         uint256 cdaiNumeraireAmount = new KovanCDaiAdapter().getNumeraireAmount(cdaiBal);
+        
+        // uint256 usdtNumeraireAmount = new LocalUsdtAdapter().getNumeraireAmount(usdtBal);
+        // uint256 cusdcNumeraireAmount = new LocalCUsdcAdapter().getNumeraireAmount(cusdcBal);
+        // uint256 cdaiNumeraireAmount = new LocalCDaiAdapter().getNumeraireAmount(cdaiBal);
 
         assertEq(usdtNumeraireAmount / (10 ** 10), 3333333300);
         assertEq(cusdcNumeraireAmount / (10 ** 10), 3333333300);
@@ -18,6 +18,7 @@ pragma solidity 0.8.9;
 import "ds-test/test.sol";
 import {Sequencer} from "./Sequencer.sol";
 import {AutoLineJob} from "./AutoLineJob.sol";
+import {LiquidatorJob} from "./LiquidatorJob.sol";
 
 interface Hevm {
     function warp(uint256) external;
@@ -48,6 +49,46 @@ interface VatLike {
     function frob(bytes32, address, address, address, int256, int256) external;
     function init(bytes32) external;
     function file(bytes32, bytes32, uint256) external;
+    function hope(address) external;
+    function dai(address) external view returns (uint256);
+}
+
+interface DaiJoinLike {
+}
+
+interface TokenLike {
+    function totalSupply() external view returns (uint256);
+    function balanceOf(address) external view returns (uint256);
+    function allowance(address, address) external view returns (uint256);
+    function approve(address, uint256) external returns (bool);
+    function transfer(address, uint256) external returns (bool);
+    function transferFrom(address, address, uint256) external returns (bool);
+    function name() external view returns (string memory);
+    function symbol() external view returns (string memory);
+    function decimals() external view returns (uint8);
+}
+
+interface JoinLike {
+    function join(address, uint256) external;
+}
+
+interface JugLike {
+    function drip(bytes32) external returns (uint256);
+}
+
+interface DogLike {
+    function bark(bytes32,address,address) external returns (uint256);
+}
+
+interface ClipLike {
+    function kicks() external view returns (uint256);
+    function active(uint256) external view returns (uint256);
+    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);
+    function kick(uint256,uint256,address,address) external returns (uint256);
+    function redo(uint256,address) external;
+    function take(uint256,uint256,uint256,address,bytes calldata) external;
+    function count() external view returns (uint256);
+    function list() external view returns (uint256[] memory);
 }
 
 // Integration tests against live MCD
@@ -62,10 +103,21 @@ contract DssCronTest is DSTest {
     IlkRegistryLike ilkRegistry;
     AutoLineLike autoline;
     VatLike vat;
+    DaiJoinLike daiJoin;
+    TokenLike dai;
+    TokenLike weth;
+    JoinLike wethJoin;
+    ClipLike wethClip;
+    JugLike jug;
+    DogLike dog;
+    address vow;
+    address uniswapV3Callee;
     Sequencer sequencer;
 
     // Jobs
     AutoLineJob autoLineJob;
+    LiquidatorJob liquidatorJob;
+    LiquidatorJob liquidatorJob500;
 
     bytes32 constant NET_A = "NTWK-A";
     bytes32 constant NET_B = "NTWK-B";
@@ -82,8 +134,18 @@ contract DssCronTest is DSTest {
         ilkRegistry = IlkRegistryLike(0x5a464C28D19848f44199D003BeF5ecc87d090F87);
         autoline = AutoLineLike(0xC7Bdd1F2B16447dcf3dE045C4a039A60EC2f0ba3);
         vat = VatLike(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);
-        autoLineJob = new AutoLineJob(address(sequencer), address(ilkRegistry), address(autoline), 1000, 2000);     // 10% / 20% bands
-
+        daiJoin = DaiJoinLike(0x9759A6Ac90977b93B58547b4A71c78317f391A28);
+        dai = TokenLike(0x6B175474E89094C44Da98b954EedeAC495271d0F);
+        weth = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
+        wethJoin = JoinLike(0x2F0b23f53734252Bda2277357e97e1517d6B042A);
+        wethClip = ClipLike(0xc67963a226eddd77B91aD8c421630A1b0AdFF270);
+        jug = JugLike(0x19c0976f590D67707E62397C87829d896Dc0f1F1);
+        dog = DogLike(0x135954d155898D42C90D2a57824C690e0c7BEf1B);
+        vow = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;
+        uniswapV3Callee = 0xdB9C76109d102d2A1E645dCa3a7E671EBfd8e11A;
+        autoLineJob = new AutoLineJob(address(sequencer), address(ilkRegistry), address(autoline), 1000, 2000);                         // 10% / 20% bands
+        liquidatorJob = new LiquidatorJob(address(sequencer), address(daiJoin), address(ilkRegistry), vow, uniswapV3Callee, 0);         // 0% profit expectation
+        liquidatorJob500 = new LiquidatorJob(address(sequencer), address(daiJoin), address(ilkRegistry), vow, uniswapV3Callee, 500);    // 5% profit expectation
     }
 
     function giveAuthAccess(address _base, address target) internal {
@@ -120,6 +182,38 @@ contract DssCronTest is DSTest {
         assertTrue(false);
     }
 
+    function giveTokens(TokenLike token, uint256 amount) internal {
+        // Edge case - balance is already set for some reason
+        if (token.balanceOf(address(this)) == amount) return;
+
+        for (uint256 i = 0; i < 200; i++) {
+            // Scan the storage for the balance storage slot
+            bytes32 prevValue = hevm.load(
+                address(token),
+                keccak256(abi.encode(address(this), uint256(i)))
+            );
+            hevm.store(
+                address(token),
+                keccak256(abi.encode(address(this), uint256(i))),
+                bytes32(amount)
+            );
+            if (token.balanceOf(address(this)) == amount) {
+                // Found it
+                return;
+            } else {
+                // Keep going after restoring the original value
+                hevm.store(
+                    address(token),
+                    keccak256(abi.encode(address(this), uint256(i))),
+                    prevValue
+                );
+            }
+        }
+
+        // We have failed if we reach here
+        assertTrue(false);
+    }
+
     function test_sequencer_add_network() public {
         sequencer.addNetwork(NET_A);
 
@@ -206,11 +300,9 @@ contract DssCronTest is DSTest {
             if (ilk == ILK) break;
             (,,, uint256 line,) = vat.ilks(ilk);
             (bool success, bytes memory result) = target.call(execPayload);
-            emit log_named_bytes("result", result);
             uint256 newLine = abi.decode(result, (uint256));
             assertTrue(success, "Execution should have succeeded.");
             assertTrue(line != newLine, "Line should have changed.");
-            break;
         }
     }
 
@@ -381,4 +473,103 @@ contract DssCronTest is DSTest {
         trigger_next_autoline_job(NET_A, ILK);
     }
 
+    // --- LiquidatorJob tests ---
+
+    function init_liquidator() internal {
+        // Add a default network
+        sequencer.addNetwork(NET_A);
+
+        // TODO clear out any existing auctions
+
+        // Create an auction on ETH-A
+        uint256 wethAmount = 100 ether;
+        giveTokens(weth, wethAmount);
+        weth.approve(address(wethJoin), type(uint256).max);
+        wethJoin.join(address(this), wethAmount);
+        (,uint256 rate, uint256 spot,,) = vat.ilks("ETH-A");
+        int256 dart = int256(spot * wethAmount / rate);
+        vat.frob("ETH-A", address(this), address(this), address(this), int256(wethAmount), dart);
+        hevm.warp(block.timestamp + 1 days);
+        jug.drip("ETH-A");
+    }
+
+    function trigger_next_liquidation_job(bytes32 network, LiquidatorJob liquidator) internal {
+        (bool canExec, address target, bytes memory execPayload) = liquidator.getNextJob(network);
+        assertTrue(canExec, "Expecting to be able to execute.");
+        assertEq(target, address(liquidator));
+        // No need to actually execute as the detection of a successful job will execute
+        //(bool success,) = target.call(execPayload);
+        //assertTrue(success, "Execution should have succeeded.");
+    }
+
+    function verify_no_liquidation_job(bytes32 network, LiquidatorJob liquidator) internal {
+        (bool canExec, address target, bytes memory execPayload) = liquidator.getNextJob(network);
+        assertTrue(!canExec, "Expecting NOT to be able to execute.");
+        assertEq(target, address(0));
+        bytes memory expectedPayload = "No auctions";
+        for (uint256 i = 0; i < expectedPayload.length; i++) {
+            assertEq(execPayload[i], expectedPayload[i]);
+        }
+    }
+
+    function test_liquidation_eth_a() public {
+        init_liquidator();
+
+        // Setup auction
+        uint256 auctionId = wethClip.kicks() + 1;
+        dog.bark("ETH-A", address(this), address(this));
+        assertEq(wethClip.kicks(), auctionId);
+        (,uint256 tab,,,,) = wethClip.sales(auctionId);
+        assertTrue(tab != 0, "auction didn't kick off");
+
+        // Liquidation should not be available because the price is too high
+        verify_no_liquidation_job(NET_A, liquidatorJob500);
+        verify_no_liquidation_job(NET_A, liquidatorJob);
+
+        // This will put it just below market price -- should trigger with only the no profit one
+        hevm.warp(block.timestamp + 30 minutes);
+
+        verify_no_liquidation_job(NET_A, liquidatorJob500);
+        uint256 vowDai = vat.dai(vow);
+        trigger_next_liquidation_job(NET_A, liquidatorJob);
+
+        // Auction should be cleared
+        (,tab,,,,) = wethClip.sales(auctionId);
+        assertEq(tab, 0);
+
+        // Profit should go to vow
+        assertGt(vat.dai(vow), vowDai);
+    }
+
+    function test_liquidation_eth_a_profit() public {
+        init_liquidator();
+
+        // Setup auction
+        uint256 auctionId = wethClip.kicks() + 1;
+        dog.bark("ETH-A", address(this), address(this));
+        assertEq(wethClip.kicks(), auctionId);
+        (,uint256 tab,,,,) = wethClip.sales(auctionId);
+        assertTrue(tab != 0, "auction didn't kick off");
+
+        // Liquidation should not be available because the price is too high
+        verify_no_liquidation_job(NET_A, liquidatorJob500);
+
+        // This will put it just below market price -- should still not trigger
+        hevm.warp(block.timestamp + 30 minutes);
+        verify_no_liquidation_job(NET_A, liquidatorJob500);
+
+        // A little bit further
+        hevm.warp(block.timestamp + 8 minutes);
+
+        uint256 vowDai = vat.dai(vow);
+        trigger_next_liquidation_job(NET_A, liquidatorJob500);
+
+        // Auction should be cleared
+        (,tab,,,,) = wethClip.sales(auctionId);
+        assertEq(tab, 0);
+
+        // Profit should go to vow
+        assertGt(vat.dai(vow), vowDai);
+    }
+
 }
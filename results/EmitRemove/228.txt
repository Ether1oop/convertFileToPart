@@ -12,6 +12,7 @@ contract VaultsTest is DSTestPlus {
     Vault vault;
     MockERC20 underlying;
     CErc20 cToken;
+    CErc20[] withdrawQueue;
 
     function setUp() public {
         underlying = new MockERC20();
@@ -76,10 +77,7 @@ contract VaultsTest is DSTestPlus {
 
         // Deposit into the vault, minting fvTokens.
         underlying.approve(address(vault), amount);
-        emit log_uint(vault.exchangeRateCurrent());
         vault.deposit(amount);
-
-        emit log_uint(vault.exchangeRateCurrent());
     }
 
     function test_underlying_withdrawals_function_properly(uint256 amount) public {
@@ -139,22 +137,21 @@ contract VaultsTest is DSTestPlus {
     }
 
     function test_harvest_functional_properly() public {
-        uint256 amount = 162931130;
+        uint256 amount = 1e18;
         if (amount > (type(uint256).max / 1e37) || amount == 0) return;
 
         test_exchange_rate_is_initially_one(amount / 2);
 
         for (uint256 i = 0; i < 10; i++) {
             CErc20 mockCErc20 = CErc20(address(new MockCERC20(underlying)));
+            withdrawQueue.push(mockCErc20);
 
             // Deposit 5% of the total supply into the vault.
             // This ensure that by the end of the loop, 100% of the vault balance is deposited into various cTokens.
             vault.enterPool(mockCErc20, amount / 20);
-
-            // Artificially inflate the CErc20 balance.
-            //underlying.transfer(address(mockCErc20), amount / 20);
         }
 
+        vault.setWithdrawalQueue(withdrawQueue);
         vault.harvest();
     }
 }
@@ -1,6 +1,63 @@
 // SPDX-License-Identifier: AGPL-3.0-or-later
 pragma solidity 0.7.5;
 
+/**
+ * @title Initializable
+ *
+ * @dev Helper contract to support initializer functions. To use it, replace
+ * the constructor with a function that has the `initializer` modifier.
+ * WARNING: Unlike constructors, initializer functions must be manually
+ * invoked. This applies both to deploying an Initializable contract, as well
+ * as extending an Initializable contract via inheritance.
+ * WARNING: When used with inheritance, manual care must be taken to not invoke
+ * a parent initializer twice, or ensure that all initializers are idempotent,
+ * because this is not dealt with automatically as with constructors.
+ */
+contract Initializable {
+
+    /**
+     * @dev Indicates that the contract has been initialized.
+   */
+    bool private initialized;
+
+    /**
+     * @dev Indicates that the contract is in the process of being initialized.
+   */
+    bool private initializing;
+
+    /**
+     * @dev Modifier to use in the initializer function of a contract.
+   */
+    modifier initializer() {
+        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
+
+        bool isTopLevelCall = !initializing;
+        if (isTopLevelCall) {
+            initializing = true;
+            initialized = true;
+        }
+
+        _;
+
+        if (isTopLevelCall) {
+            initializing = false;
+        }
+    }
+
+    /// @dev Returns true if and only if the function is running in the constructor
+    function isConstructor() private view returns (bool) {
+        // extcodesize checks the size of the code stored in an address, and
+        // address returns the current address. Since the code is still not
+        // deployed when running a constructor, any checks on its code size will
+        // yield zero, making it an effective way to detect if a contract is
+        // under construction or not.
+        address self = address(this);
+        uint256 cs;
+        assembly { cs := extcodesize(self) }
+        return cs == 0;
+    }
+}
+
 interface IERC20 {
     /**
      * @dev Returns the amount of tokens in existence.
@@ -138,7 +195,7 @@ library LowGasSafeMath {
     }
 }
 
-abstract contract ERC20 is IERC20 {
+abstract contract ERC20 is IERC20, Initializable {
 
     using LowGasSafeMath for uint256;
 
@@ -160,7 +217,7 @@ abstract contract ERC20 is IERC20 {
     // Present in ERC777
     uint8 internal _decimals;
 
-    constructor (string memory name_, string memory symbol_, uint8 decimals_) {
+    function __ERC20_init_unchained(string memory name_, string memory symbol_, uint8 decimals_) internal initializer {
         _name = name_;
         _symbol = symbol_;
         _decimals = decimals_;
@@ -441,13 +498,16 @@ interface IOwnable {
     function transferOwnership( address newOwner_ ) external;
 }
 
-contract Ownable is IOwnable {
+contract Ownable is IOwnable, Initializable {
 
     address internal _owner;
+    address internal _pendingOwner;
 
     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
+    event OwnershipTransferring(address indexed owner, address indexed pendingOwner);
 
-    constructor () {
+    function __Ownable_init_unchain() internal initializer {
+        require(_owner == address(0));
         _owner = msg.sender;
         emit OwnershipTransferred( address(0), _owner );
     }
@@ -468,13 +528,23 @@ contract Ownable is IOwnable {
 
     function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {
         require( newOwner_ != address(0), "Ownable: new owner is the zero address");
-        emit OwnershipTransferred( _owner, newOwner_ );
-        _owner = newOwner_;
+        emit OwnershipTransferring( _owner, newOwner_ );
+        _pendingOwner = newOwner_;
+    }
+
+    function acceptOwnership() external {
+        require(_pendingOwner == msg.sender, "Permission denied");
+        emit OwnershipTransferred( _owner, msg.sender );
+        _owner = msg.sender;
     }
 }
 
 contract VaultOwned is Ownable {
 
+    function __VaultOwned_init_unchain() internal initializer {
+        __Ownable_init_unchain();
+    }
+
     address internal _vault;
 
     event VaultTransferred(address indexed newVault);
@@ -510,7 +580,9 @@ contract SATERC20Token is ERC20Permit, VaultOwned, Pausable {
     address public feeAddress;
     mapping(address => bool) public isTransferWhitelist;
 
-    constructor() ERC20("Synassets Token", "SAT", 18) {
+    function __SATERC20Token_initialize() external initializer {
+        __ERC20_init_unchained("Synassets Token", "SAT", 18);
+        __VaultOwned_init_unchain();
     }
 
     function mint(address account_, uint256 amount_) external onlyVault() {
@@ -571,4 +643,8 @@ contract SATERC20Token is ERC20Permit, VaultOwned, Pausable {
     function setFeeAddress(address feeAddress_) external onlyOwner {
         feeAddress = feeAddress_;
     }
+
+    function maxSupply() public pure returns (uint256) {
+        return CAP;
+    }
 }
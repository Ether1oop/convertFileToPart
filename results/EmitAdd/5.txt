@@ -32,7 +32,6 @@ contract StableCoin is
     event Wipe(address, uint256);
     event Mint(address, uint256);
     event Burn(address, uint256);
-    event Transfer(address, address, uint256);
     event Approve(address, address, uint256);
     event IncreaseAllowance(address, address, uint256);
     event DecreaseAllowance(address, address, uint256);
@@ -57,10 +56,10 @@ contract StableCoin is
         _assetProtectionManager = assetProtectionManager;
 
         // Owner has Admin Privileges on all other roles
-        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
+        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
 
         // KYC accounts
-        _setupRole(KYC_PASSED, msg.sender);
+        _setupRole(KYC_PASSED, _msgSender());
         grantRole(KYC_PASSED, supplyManager);
         grantRole(KYC_PASSED, assetProtectionManager);
 
@@ -114,7 +113,7 @@ contract StableCoin is
 
     modifier onlySupplyManager() {
         require(
-            msg.sender == supplyManager() || msg.sender == owner(),
+            _msgSender() == supplyManager() || _msgSender() == owner(),
             "Only the supply manager can call this function."
         );
         _;
@@ -135,7 +134,7 @@ contract StableCoin is
 
     modifier onlyAssetProtectionManager() {
         require(
-            msg.sender == assetProtectionManager() || msg.sender == owner(),
+            _msgSender() == assetProtectionManager() || _msgSender() == owner(),
             "Only an Asset Protection Manager can call this function."
         );
         _;
@@ -162,7 +161,7 @@ contract StableCoin is
 
     modifier requiresKYC() {
         require(
-            hasRole(KYC_PASSED, msg.sender),
+            hasRole(KYC_PASSED, _msgSender()),
             "Calling this function requires KYC approval."
         );
         _;
@@ -175,6 +174,7 @@ contract StableCoin is
     // KYC: only APM
     function setKycPassed(address account) public onlyAssetProtectionManager {
         grantRole(KYC_PASSED, account);
+        emit SetKycPassed(address);
     }
 
     // Un-KYC: only APM, only non-privileged accounts
@@ -184,11 +184,12 @@ contract StableCoin is
             "Cannot unset KYC for administrator account."
         );
         revokeRole(KYC_PASSED, account);
+        emit UnsetKycPassed(account);
     }
 
     modifier requiresNotFrozen() {
         require(
-            !hasRole(FROZEN, msg.sender),
+            !hasRole(FROZEN, _msgSender()),
             "Your account has been frozen, cannot call function."
         );
         _;
@@ -201,26 +202,141 @@ contract StableCoin is
             "Cannot freeze administrator account."
         );
         grantRole(FROZEN, account);
+        emit Freeze(account);
     }
 
     // Unfreeze an account: only APM
     function unfreeze(address account) public onlyAssetProtectionManager {
         revokeRole(FROZEN, account);
+        emit Unfreeze(account);
     }
 
     function isFrozen(address account) public view returns (bool) {
         return hasRole(FROZEN, account);
     }
 
     // Pause: Only APM
-    function pause() public onlyAssetProtectionManager {
+    function pause() private onlyAssetProtectionManager {
         _pause();
     }
 
     // Unpause: Only APM
-    function unpause() public onlyAssetProtectionManager {
+    function unpause() private onlyAssetProtectionManager {
         _unpause();
     }
 
+    // Check Transfer Allowed
+    function _beforeTokenTransfer(
+        address from,
+        address to,
+        uint256 amount
+    )
+        private
+        override(ERC20UpgradeSafe, ERC20PausableUpgradeSafe)
+        requiresKYC
+        requiresNotFrozen
+    {
+        require(hasRole(KYC_PASSED, from), "Sender requires KYC to continue.");
+        require(hasRole(KYC_PASSED, to), "Receiver requires KYC to continue.");
+        require(!isFrozen(from), "Sender account is frozen.");
+        require(!isFrozen(to), "Receiver account is frozen.");
+        super._beforeTokenTransfer(); // Checks !paused
+    }
+
+    // Claim Ownership
+    function claimOwnership()
+        private
+        override(OwnableUpgradeSafe)
+        onlyProposedOwner
+    {
+        revokeRole(KYC_PASSED, owner());
+        super.claimOwnership(); // emits ClaimOwnership
+        grantRole(KYC_PASSED, owner());
+    }
+
+    // Wipe
+    function wipe(address account) private onlyAssetProtectionManager {
+        require(
+            hasRole(FROZEN, account),
+            "Account must be frozen prior to wipe."
+        );
+        uint256 balance = balanceOf(account);
+        _transfer(address, supplyManager(), balance); // emits Transfer
+        burn(balance); // emits Transfer, Burn
+        emit Wipe(account, balance);
+    }
+
+    // Mint
+    function mint(uint256 amount) private onlySupplyManager {
+        _mint(supplyManager(), amount); // emits Transfer
+        emit Mint(_msgSender(), amount);
+    }
+
+    // Burn
+    function burn(uint256 amount) private onlySupplyManager {
+        _burn(_msgSender(), amount); // emits Transfer
+        emit Burn(_msgSender(), amount);
+    }
+
+    // Transfer
+    function transfer(address to, uint256 amount)
+        public
+        override(ERC20UpgradeSafe)
+    {
+        super._transfer(_msgSender(), to, amount); // emits Transfer
+    }
+
+    // Transfer From
+    function transferFrom(
+        address from,
+        address to,
+        uint256 amount
+    ) public override(ERC20UpgradeSafe) {
+        super.transferFrom(from, to, amount); // emits Transfer, Approval
+        emit Approve(from, to, _allowances[sender][_msgSender()].sub(amount));
+    }
+
+    // Approve Allowance
+    function approveAllowance(address spender, uint256 amount)
+        private
+        override(ERC20UpgradeSafe)
+    {
+        super._approve(spender, amount); // emits Approval
+        emit Approve(_msgSender(), spender, amount);
+    }
+
+    // Increase Allowance
+    function increaseAllowance(address spender, uint256 amount)
+        private
+        override(ERC20UpgradeSafe)
+    {
+        _approve(
+            _msgSender(),
+            spender,
+            _allowances[_msgSender()][spender].add(amount)
+        ); // emits Approval
+        emit IncreaseAllowance(spender, amount);
+    }
+
+    // Decrease Allowance (if more than allowed, set allowance to 0)
+    function decreaseAllowance(address spender, uint256 amount)
+        private
+        override(ERC20UpgradeSafe)
+    {
+        uint256 newAllowance = 0;
+        uint256 diff = _allowances[_msgSender()][spender];
+
+        try
+            newAllowance = _allowances[_msgSender()][spender].sub(amount)
+         {} catch {}
+
+        if (newAllowance > 0) {
+            diff = _allowances[_msgSender()][spender].sub(newAllowance);
+        }
+
+        _approve(_msgSender(), spender, newAllowance); // emits Approval
+        emit DecreaseAllowance(spender, diff);
+    }
+
     uint256[50] private __gap;
 }
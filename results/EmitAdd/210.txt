@@ -115,21 +115,21 @@ contract MonolithicRiscV {
     uint32 rd = RiscVDecoder.insn_rd(insn);
     if(rd != 0){
       //TO-DO: Check if casts are not having undesired effects
-      mm.write(mmIndex, rd, uint64(pc + uint64(RiscVDecoder.insn_U_imm(insn))));
+      mm.write(mmIndex, rd, bytes8(pc + uint64(RiscVDecoder.insn_U_imm(insn))));
     }
     return advance_to_next_insn();
   }
 
   function advance_to_next_insn() returns (execute_status){
-    mm.write(mmIndex, ShadowAddresses.get_pc(), uint64(pc + 4));
+    mm.write(mmIndex, ShadowAddresses.get_pc(), bytes8(pc + 4));
     return execute_status.retired;
   }
   function fetch_insn() returns (fetch_status){
     bool translateBool;
 
     //read_pc
     vaddr = uint64(mm.read(mmIndex, ShadowAddresses.get_pc()));
-    Print("vaddr", vaddr);
+    emit Print("vaddr", vaddr);
     (translateBool, paddr) = translate_virtual_address(vaddr, RiscVConstants.PTE_XWR_CODE_SHIFT());
 
     //translate_virtual_address failed
@@ -336,9 +336,10 @@ contract MonolithicRiscV {
 
     //TO-DO: Check lastPma - this is probably wrong.
     uint64 lastPma = 62; // 0 - 31 * 2 words
-
+    emit Print("paddr", paddr);
     for(uint64 i = 0; i < lastPma; i+=2){
-      uint64 start = uint64(mm.read(mmIndex, pmaAddress + (i*8)));
+      // TO-DO: Shouldnt have -1 on start
+      uint64 start = uint64(mm.read(mmIndex, pmaAddress + (i*8))) - 1;
       uint64 length = uint64(mm.read(mmIndex, pmaAddress + ((i * 8 + 8))));
       if(paddr >= start && paddr < (start + length)){
         return (start, length);

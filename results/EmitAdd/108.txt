@@ -1,1542 +1,3 @@
-// File: hardhat/console.sol
-
-// SPDX-License-Identifier: MIT
-pragma solidity >= 0.4.22 <0.8.0;
-
-library console {
-	address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);
-
-	function _sendLogPayload(bytes memory payload) private view {
-		uint256 payloadLength = payload.length;
-		address consoleAddress = CONSOLE_ADDRESS;
-		assembly {
-			let payloadStart := add(payload, 32)
-			let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
-		}
-	}
-
-	function log() internal view {
-		_sendLogPayload(abi.encodeWithSignature("log()"));
-	}
-
-	function logInt(int p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(int)", p0));
-	}
-
-	function logUint(uint p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
-	}
-
-	function logString(string memory p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
-	}
-
-	function logBool(bool p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
-	}
-
-	function logAddress(address p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
-	}
-
-	function logBytes(bytes memory p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
-	}
-
-	function logByte(byte p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(byte)", p0));
-	}
-
-	function logBytes1(bytes1 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
-	}
-
-	function logBytes2(bytes2 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
-	}
-
-	function logBytes3(bytes3 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
-	}
-
-	function logBytes4(bytes4 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
-	}
-
-	function logBytes5(bytes5 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
-	}
-
-	function logBytes6(bytes6 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
-	}
-
-	function logBytes7(bytes7 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
-	}
-
-	function logBytes8(bytes8 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
-	}
-
-	function logBytes9(bytes9 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
-	}
-
-	function logBytes10(bytes10 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
-	}
-
-	function logBytes11(bytes11 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
-	}
-
-	function logBytes12(bytes12 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
-	}
-
-	function logBytes13(bytes13 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
-	}
-
-	function logBytes14(bytes14 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
-	}
-
-	function logBytes15(bytes15 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
-	}
-
-	function logBytes16(bytes16 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
-	}
-
-	function logBytes17(bytes17 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
-	}
-
-	function logBytes18(bytes18 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
-	}
-
-	function logBytes19(bytes19 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
-	}
-
-	function logBytes20(bytes20 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
-	}
-
-	function logBytes21(bytes21 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
-	}
-
-	function logBytes22(bytes22 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
-	}
-
-	function logBytes23(bytes23 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
-	}
-
-	function logBytes24(bytes24 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
-	}
-
-	function logBytes25(bytes25 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
-	}
-
-	function logBytes26(bytes26 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
-	}
-
-	function logBytes27(bytes27 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
-	}
-
-	function logBytes28(bytes28 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
-	}
-
-	function logBytes29(bytes29 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
-	}
-
-	function logBytes30(bytes30 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
-	}
-
-	function logBytes31(bytes31 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
-	}
-
-	function logBytes32(bytes32 p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
-	}
-
-	function log(uint p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
-	}
-
-	function log(string memory p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
-	}
-
-	function log(bool p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
-	}
-
-	function log(address p0) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
-	}
-
-	function log(uint p0, uint p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
-	}
-
-	function log(uint p0, string memory p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
-	}
-
-	function log(uint p0, bool p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
-	}
-
-	function log(uint p0, address p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
-	}
-
-	function log(string memory p0, uint p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
-	}
-
-	function log(string memory p0, string memory p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
-	}
-
-	function log(string memory p0, bool p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
-	}
-
-	function log(string memory p0, address p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
-	}
-
-	function log(bool p0, uint p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
-	}
-
-	function log(bool p0, string memory p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
-	}
-
-	function log(bool p0, bool p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
-	}
-
-	function log(bool p0, address p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
-	}
-
-	function log(address p0, uint p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
-	}
-
-	function log(address p0, string memory p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
-	}
-
-	function log(address p0, bool p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
-	}
-
-	function log(address p0, address p1) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
-	}
-
-	function log(uint p0, uint p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
-	}
-
-	function log(uint p0, uint p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
-	}
-
-	function log(uint p0, uint p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
-	}
-
-	function log(uint p0, uint p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
-	}
-
-	function log(uint p0, string memory p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
-	}
-
-	function log(uint p0, string memory p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
-	}
-
-	function log(uint p0, string memory p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
-	}
-
-	function log(uint p0, string memory p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
-	}
-
-	function log(uint p0, bool p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
-	}
-
-	function log(uint p0, bool p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
-	}
-
-	function log(uint p0, bool p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
-	}
-
-	function log(uint p0, bool p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
-	}
-
-	function log(uint p0, address p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
-	}
-
-	function log(uint p0, address p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
-	}
-
-	function log(uint p0, address p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
-	}
-
-	function log(uint p0, address p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
-	}
-
-	function log(string memory p0, uint p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
-	}
-
-	function log(string memory p0, uint p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
-	}
-
-	function log(string memory p0, uint p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
-	}
-
-	function log(string memory p0, uint p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
-	}
-
-	function log(string memory p0, string memory p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
-	}
-
-	function log(string memory p0, string memory p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
-	}
-
-	function log(string memory p0, string memory p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
-	}
-
-	function log(string memory p0, string memory p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
-	}
-
-	function log(string memory p0, bool p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
-	}
-
-	function log(string memory p0, bool p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
-	}
-
-	function log(string memory p0, bool p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
-	}
-
-	function log(string memory p0, bool p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
-	}
-
-	function log(string memory p0, address p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
-	}
-
-	function log(string memory p0, address p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
-	}
-
-	function log(string memory p0, address p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
-	}
-
-	function log(string memory p0, address p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
-	}
-
-	function log(bool p0, uint p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
-	}
-
-	function log(bool p0, uint p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
-	}
-
-	function log(bool p0, uint p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
-	}
-
-	function log(bool p0, uint p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
-	}
-
-	function log(bool p0, string memory p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
-	}
-
-	function log(bool p0, string memory p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
-	}
-
-	function log(bool p0, string memory p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
-	}
-
-	function log(bool p0, string memory p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
-	}
-
-	function log(bool p0, bool p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
-	}
-
-	function log(bool p0, bool p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
-	}
-
-	function log(bool p0, bool p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
-	}
-
-	function log(bool p0, bool p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
-	}
-
-	function log(bool p0, address p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
-	}
-
-	function log(bool p0, address p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
-	}
-
-	function log(bool p0, address p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
-	}
-
-	function log(bool p0, address p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
-	}
-
-	function log(address p0, uint p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
-	}
-
-	function log(address p0, uint p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
-	}
-
-	function log(address p0, uint p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
-	}
-
-	function log(address p0, uint p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
-	}
-
-	function log(address p0, string memory p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
-	}
-
-	function log(address p0, string memory p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
-	}
-
-	function log(address p0, string memory p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
-	}
-
-	function log(address p0, string memory p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
-	}
-
-	function log(address p0, bool p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
-	}
-
-	function log(address p0, bool p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
-	}
-
-	function log(address p0, bool p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
-	}
-
-	function log(address p0, bool p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
-	}
-
-	function log(address p0, address p1, uint p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
-	}
-
-	function log(address p0, address p1, string memory p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
-	}
-
-	function log(address p0, address p1, bool p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
-	}
-
-	function log(address p0, address p1, address p2) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
-	}
-
-	function log(uint p0, uint p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, uint p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, string memory p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, bool p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(uint p0, address p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, uint p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, string memory p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, bool p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(string memory p0, address p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, uint p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, string memory p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, bool p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(bool p0, address p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, uint p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, string memory p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, bool p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, uint p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, uint p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, uint p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, uint p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, string memory p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, string memory p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, string memory p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, string memory p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, bool p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, bool p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, bool p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, bool p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, address p2, uint p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, address p2, string memory p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, address p2, bool p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
-	}
-
-	function log(address p0, address p1, address p2, address p3) internal view {
-		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
-	}
-
-}
-
 // File: contracts/ERC20.sol
 
 pragma solidity ^0.7.0;
@@ -2816,6 +1277,7 @@ interface CurveInterface {
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
+// import "hardhat/console.sol";
 
 // Use prefix "./" normally and "https://github.com/ogDAO/Governance/blob/master/contracts/" in Remix
 
@@ -2837,6 +1299,7 @@ contract OptinoGovBase {
     bytes32 private constant KEY_COLLECTREWARDFORDELAY = keccak256(abi.encodePacked("collectRewardForDelay"));
     bytes32 private constant KEY_PROPOSALCOST = keccak256(abi.encodePacked("proposalCost"));
     bytes32 private constant KEY_PROPOSALTHRESHOLD = keccak256(abi.encodePacked("proposalThreshold"));
+    bytes32 private constant KEY_VOTEREWARD = keccak256(abi.encodePacked("voteReward"));
     bytes32 private constant KEY_QUORUM = keccak256(abi.encodePacked("quorum"));
     bytes32 private constant KEY_QUORUMDECAYPERSECOND = keccak256(abi.encodePacked("quorumDecayPerSecond"));
     bytes32 private constant KEY_VOTINGDURATION = keccak256(abi.encodePacked("votingDuration"));
@@ -2851,6 +1314,7 @@ contract OptinoGovBase {
     uint public collectRewardForDelay = 1 seconds; // Testing 7 days
     uint public proposalCost = 100e18; // 100 tokens assuming 18 decimals
     uint public proposalThreshold = 1e15; // 0.1%, 18 decimals
+    uint public voteReward = 1e15; // 0.1% of weightedVote
     uint public quorum = 2e17; // 20%, 18 decimals
     uint public quorumDecayPerSecond = 4e17 / uint(365 days); // 40% per year, i.e., 0 in 6 months
     uint public votingDuration = 10 seconds; // 3 days;
@@ -2892,6 +1356,8 @@ contract OptinoGovBase {
             proposalCost = value;
         } else if (_key == KEY_PROPOSALTHRESHOLD) {
             proposalThreshold = value;
+        } else if (_key == KEY_VOTEREWARD) {
+            voteReward = value;
         } else if (_key == KEY_QUORUM) {
             quorum = value;
         } else if (_key == KEY_QUORUMDECAYPERSECOND) {
@@ -2984,16 +1450,16 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
     uint private _totalSupply;
     mapping(address => Account) private accounts;
     address[] public accountsIndex;
-    mapping(address => mapping(address => uint)) private allowed;
+    // mapping(address => mapping(address => uint)) private allowed;
     uint public totalVotes;
 
     Proposal[] private proposals;
     mapping(uint => mapping(address => bool)) public voted;
 
     event DelegateUpdated(address indexed oldDelegatee, address indexed delegatee, uint votes);
     event Committed(address indexed user, uint tokens, uint balance, uint duration, uint end, address delegatee, uint votes, uint totalVotes);
-    event Collected(address indexed user, uint elapsed, uint reward, uint callerReward, uint end, uint duration);
-    event Uncommitted(address indexed user, uint tokens, uint balance, uint duration, uint end, uint votes, uint totalVotes);
+    event Recommitted(address indexed user, uint elapsed, uint reward, uint callerReward, uint balance, uint duration, uint end, uint votes, uint totalVotes);
+    event Uncommitted(address indexed user, uint tokens, uint reward, uint balance, uint duration, uint end, uint votes, uint totalVotes);
     event Proposed(address indexed proposer, uint id, string description, address[] targets, uint[] value, bytes[] data, uint start);
     event Voted(address indexed user, uint id, bool support, uint votes, uint forVotes, uint againstVotes);
     event Executed(address indexed user, uint id);
@@ -3094,6 +1560,9 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
         }
     }
 
+    // commit(tokens, duration) - tokens can be 0 for a recommit, duration can be 0
+    // uncommit(tokens) - tokens can be 0 to uncommit all
+    // uncommitFor(tokens) by different msg.sender for a %fee, only after may need a time delay
     function _changeCommitment(address tokenOwner, uint depositTokens, uint withdrawTokens, bool withdrawRewards, uint duration) internal {
         Account storage account = accounts[tokenOwner];
         if (depositTokens > 0) {
@@ -3104,17 +1573,18 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
             require(withdrawTokens <= account.balance, "Unsufficient balance");
         }
         updateStatsBefore(account);
-        (uint reward, /*uint term*/) = _calculateReward(account);
+        (uint reward, uint elapsed) = _calculateReward(account);
         uint availableToMint = ogToken.availableToMint();
         if (reward > availableToMint) {
             reward = availableToMint;
         }
+        uint callerReward;
         if (reward > 0) {
             if (withdrawRewards) {
                 require(ogToken.mint(tokenOwner, reward), "OG mint failed");
             } else {
                 if (msg.sender != tokenOwner) {
-                    uint callerReward = reward.mul(collectRewardForFee).div(1e18);
+                    callerReward = reward.mul(collectRewardForFee).div(1e18);
                     if (callerReward > 0) {
                         reward = reward.sub(callerReward);
                         require(ogToken.mint(msg.sender, callerReward), "OG mint failed");
@@ -3127,12 +1597,6 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
                 emit Transfer(address(0), tokenOwner, reward);
             }
         }
-        if (depositTokens == 0 && withdrawTokens == 0) {
-            // require(block.timestamp + duration >= account.end, "Cannot shorten duration");
-            // TODO emit Recommit
-            account.duration = uint64(duration);
-            account.end = uint64(block.timestamp.add(duration));
-        }
         if (depositTokens > 0) {
             if (account.end == 0) {
                 uint rate = _getOGRewardRate(duration);
@@ -3148,11 +1612,9 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
             }
             require(ogdToken.mint(tokenOwner, depositTokens), "OGD mint failed");
             // TODO account.votes not updated. remove remaining variables
-            emit Committed(tokenOwner, depositTokens, account.balance, account.duration, account.end, account.delegatee, account.votes, totalVotes);
             _totalSupply = _totalSupply.add(depositTokens);
             emit Transfer(address(0), tokenOwner, depositTokens);
-        }
-        if (withdrawTokens > 0) {
+        } else if (withdrawTokens > 0) {
             _totalSupply = _totalSupply.sub(withdrawTokens);
             account.balance = account.balance.sub(withdrawTokens);
             if (account.balance == 0) {
@@ -3172,10 +1634,20 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
             account.end = uint64(block.timestamp);
             require(ogdToken.burnFrom(tokenOwner, withdrawTokens), "OG burnFrom failed");
             require(ogToken.transfer(tokenOwner, withdrawTokens), "OG transfer failed");
-            // TODO Uncommit
-        //     emit Unstaked(msg.sender, withdrawTokens, reward, tokensWithSlashingFactor, rewardWithSlashingFactor);
+        } else  {
+            // require(block.timestamp + duration >= account.end, "Cannot shorten duration");
+            account.duration = uint64(duration);
+            account.end = uint64(block.timestamp.add(duration));
         }
         updateStatsAfter(account);
+        if (depositTokens > 0) {
+            emit Committed(tokenOwner, depositTokens, account.balance, account.duration, account.end, account.delegatee, account.votes, totalVotes);
+        } else if (withdrawTokens > 0) {
+            emit Uncommitted(tokenOwner, withdrawTokens, reward, account.balance, account.duration, account.end, account.votes, totalVotes);
+        } else {
+            emit Recommitted(tokenOwner, elapsed, reward, callerReward, account.balance, account.duration, account.end, account.votes, totalVotes);
+        }
+
     }
     function commit(uint tokens, uint duration) public {
         // require(duration > 0, "duration must be > 0");
@@ -3201,11 +1673,9 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
 
 
     function propose(string memory description, address[] memory targets, uint[] memory values, bytes[] memory data) public returns(uint) {
-        console.log("        > %s -> propose(description %s)", msg.sender, description);
+        // console.log("        > %s -> propose(description %s)", msg.sender, description);
         // require(accounts[msg.sender].votes >= totalVotes.mul(proposalThreshold).div(1e18), "OptinoGov: Not enough votes to propose");
-
         require(targets.length > 0 && values.length == targets.length && data.length == targets.length, "Invalid data");
-
         Proposal storage proposal = proposals.push();
         proposal.start = uint64(block.timestamp);
         // proposal.executed = 0;
@@ -3216,12 +1686,7 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
         proposal.data = data;
         // proposal.forVotes = 0;
         // proposal.againstVotes = 0;
-
-        // require(ogToken.transferFrom(msg.sender, address(this), proposalCost), "OG transferFrom failed");
-        // require(ogToken.burn(proposalCost), "OG burn failed");
-        // require(ogToken.transferFrom(msg.sender, address(this), proposalCost), "OG transferFrom failed");
         require(ogToken.burnFrom(msg.sender, proposalCost), "OG burn failed");
-
         emit Proposed(msg.sender, proposals.length - 1, description, proposal.targets, proposal.values, proposal.data, block.timestamp);
         return proposals.length - 1;
     }
@@ -3249,13 +1714,16 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
             } else {
                 proposal.againstVotes = proposal.forVotes.add(votes);
             }
+            uint _voteReward = accounts[voter].votes.mul(voteReward).div(1e18);
+            if (_voteReward > 0) {
+                require(ogToken.mint(voter, _voteReward), "OG mint failed");
+            }
         }
         voted[id][voter] = true;
         accounts[voter].lastVoted = uint64(block.timestamp);
         emit Voted(voter, id, support, votes, proposal.forVotes, proposal.againstVotes);
     }
     function voteDigest(uint id, bool support) public view returns (bytes32 digest) {
-        // bytes32 domainSeparator = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainId(), address(this)));
         bytes32 structHash = keccak256(abi.encode(EIP712_VOTE_TYPEHASH, id, support));
         digest = keccak256(abi.encodePacked("\x19\x01", EIP712_DOMAIN_SEPARATOR, structHash));
     }
@@ -3279,22 +1747,6 @@ contract OptinoGov is ERC20, OptinoGovBase, InterestUtils {
             }
         }
     }
-    // function voteBySigs(uint id, bool[] memory _supports, bytes[] memory sigs) public {
-    //     require(_supports.length == sigs.length);
-    //     for (uint i = 0; i < _supports.length; i++) {
-    //         bool support = _supports[i];
-    //         bytes memory sig = sigs[i];
-    //         uint gasStart = gasleft();
-    //         bytes32 digest = voteDigest(id, support);
-    //         address voter = ecrecoverFromSig(digest, sig);
-    //         uint gasUsed = gasStart - gasleft();
-    //         console.log("        > voteBySigs - gasUsed: ", gasUsed);
-    //         require(voter != address(0), "Invalid signature");
-    //         if (!voted[id][voter]) {
-    //             _vote(voter, id, support);
-    //         }
-    //     }
-    // }
 
     // TODO
     function execute(uint id) public {
@@ -9,8 +9,6 @@ contract FlightDelayEtheriscOracle is Product {
 
     bytes32 public constant NAME = "FlightDelaySokol";
     bytes32 public constant VERSION = "0.1.0";
-    bytes32 public constant XDAI = "XDAI";
-    uint256 public constant ETHERISC_ORACLE_ID = 0;
 
     event LogRequestFlightStatistics(
         uint256 requestId,
@@ -55,9 +53,11 @@ contract FlightDelayEtheriscOracle is Product {
 
     // All amounts expected to be provided in a currencyâ€™s smallest unit
     // E.g. 10 EUR = 1000 (1000 cents)
-    uint256 public constant MIN_PREMIUM =  1500; // USD  15.00
-    uint256 public constant MAX_PREMIUM =  2500; // USD  25.00
-    uint256 public constant MAX_PAYOUT  = 75000; // USD 750.00
+    uint256 public constant MIN_PREMIUM = 1500;
+    uint256 public constant MAX_PREMIUM = 29000;
+    uint256 public constant MAX_PAYOUT = 150000;
+
+    bytes32[1] public currencies = [bytes32("XDAI")];
 
     // ['observations','late15','late30','late45','cancelled','diverted']
     uint8[6] public weightPattern = [0, 0, 0, 30, 50, 50];
@@ -87,23 +87,31 @@ contract FlightDelayEtheriscOracle is Product {
 
     mapping(uint256 => RequestMetadata) public oracleRequests;
 
+    // RequestMetadata[] public actionRequests;
+    mapping(uint256 => address payable) public customers;
+
     constructor(address _productController)
-        public
-        Product(_productController, NAME, POLICY_FLOW)
+    public
+    Product(_productController, NAME, POLICY_FLOW)
     {}
 
-    function applyForPolicy (
-        // domain specific
+    function applyForPolicy(
+    // domain specific
         bytes32 _carrierFlightNumber,
         bytes32 _departureYearMonthDay,
         uint256 _departureTime,
         uint256 _arrivalTime,
+    // premium
+        uint256 _premium,
+    //  bytes32 _currency,
         uint256[] calldata _payoutOptions
-    ) external payable {
+    // BP
+    //  bytes32 _bpExternalKey
+    ) external onlySandbox {
         // Validate input parameters
-        uint256 premium = msg.value;
-        require(premium >= MIN_PREMIUM, "ERROR::INVALID_PREMIUM");
-        require(premium <= MAX_PREMIUM, "ERROR::INVALID_PREMIUM");
+        require(_premium >= MIN_PREMIUM, "ERROR::INVALID_PREMIUM");
+        require(_premium <= MAX_PREMIUM, "ERROR::INVALID_PREMIUM");
+        // require(_currency == currencies[0], "ERROR:INVALID_CURRENCY");
         require(
             _arrivalTime > _departureTime,
             "ERROR::INVALID_ARRIVAL/DEPARTURE_TIME"
@@ -117,7 +125,7 @@ contract FlightDelayEtheriscOracle is Product {
             "ERROR::TIME_TO_DEPARTURE_TOO_SMALL"
         );
 
-        bytes32 bpExternalKey = keccak256(msg.sender);
+        bytes32 _bpExternalKey = keccak256(msg.sender);
         // Create risk if not exists
         bytes32 riskId = keccak256(
             abi.encodePacked(_carrierFlightNumber, _departureTime, _arrivalTime)
@@ -131,7 +139,7 @@ contract FlightDelayEtheriscOracle is Product {
             risk.arrivalTime = _arrivalTime;
         }
 
-        if (premium * risk.premiumMultiplier + risk.cumulatedWeightedPremium >= MAX_CUMULATED_WEIGHTED_PREMIUM) {
+        if (_premium * risk.premiumMultiplier + risk.cumulatedWeightedPremium >= MAX_CUMULATED_WEIGHTED_PREMIUM) {
             emit LogError("ERROR::CLUSTER_RISK");
             return;
         }
@@ -142,9 +150,9 @@ contract FlightDelayEtheriscOracle is Product {
 
         // Create new application
         uint256 applicationId = _newApplication(
-            bpExternalKey,
-            premium,
-            XDAI,
+            _bpExternalKey,
+            _premium,
+            _currency,
             _payoutOptions
         );
 
@@ -153,7 +161,7 @@ contract FlightDelayEtheriscOracle is Product {
             abi.encode(_carrierFlightNumber),
             "flightStatisticsCallback",
             "FlightRatings",
-            ETHERISC_ORACLE_ID // Oracle Id
+            0
         );
 
         oracleRequests[requestId].applicationId = applicationId;
@@ -189,18 +197,18 @@ contract FlightDelayEtheriscOracle is Product {
         );
 
         if (payoutOptions.length != calculatedPayouts.length) {
-            emit LogError("ERROR::INVALID_PAYOUT_OPTIONS_COUNT");
+            emit LogError("ERROR::INVALID_PAYOUT_OPTIONS_COUNT"); // TODO: what happens with the application?
             return;
         }
 
         for (uint256 i = 0; i < 5; i++) {
             if (payoutOptions[i] != calculatedPayouts[i]) {
-                emit LogError("ERROR::INVALID_PAYOUT_OPTION");
+                emit LogError("ERROR::INVALID_PAYOUT_OPTION"); // TODO: see above
                 return;
             }
 
             if (payoutOptions[i] > MAX_PAYOUT) {
-                emit LogError("ERROR::PAYOUT>MAX_PAYOUT");
+                emit LogError("ERROR::PAYOUT>MAX_PAYOUT"); // TODO: see above
                 return;
             }
         }
@@ -223,8 +231,18 @@ contract FlightDelayEtheriscOracle is Product {
 
         risks[riskId].weight = weight;
 
+        // Request fiat payment
+        // uint256 requestId = actionRequests.length++;
+        // actionRequests[requestId] = RequestMetadata(applicationId, 0, riskId);
+
+        // emit LogRequestPayment(requestId, applicationId);
+
         uint256 policyId = _underwrite(applicationId);
 
+        customers[policyId] = msg.sender;
+        this.transfer(riskpool, msg.value);
+
+
         // Request flight statuses
         uint256 requestId = _request(
             abi.encode(
@@ -250,9 +268,13 @@ contract FlightDelayEtheriscOracle is Product {
         );
     }
 
+    function confirmPaymentFailure(uint256 _requestId) external onlySandbox {
+        _decline(actionRequests[_requestId].applicationId);
+    }
+
     function flightStatusCallback(uint256 _requestId, bytes calldata _response)
-        external
-        onlyOracle
+    external
+    onlyOracle
     {
         (bytes1 status, int256 delay) = abi.decode(_response, (bytes1, int256));
 
@@ -266,7 +288,7 @@ contract FlightDelayEtheriscOracle is Product {
         }
 
         if (status == "A") {
-            // todo: active, reschedule oracle call + 45 min
+            // todo: flight still active, reschedule oracle call + 45 min
             emit LogUnexpectedStatus(_requestId, status, delay);
             return;
         }
@@ -295,13 +317,20 @@ contract FlightDelayEtheriscOracle is Product {
             uint256 claimId = _newClaim(_policyId);
             uint256 payoutId = _confirmClaim(claimId, _payoutAmount);
             _payout(_payoutId, _payoutAmount);
+
+            emit LogRequestPayout(_policyId, claimId, payoutId, _payoutAmount);
+            // actual payment is performed in the wrapper contract
+            productId = productService.license().getProductId(this); // correct??
+            metadata = productService.policy().policies[productId][policyId].metadata;
+            address customerAddress = customer[metadata.bpExternalKey];
+            riskpool.requestTransfer(customerAddress, payout);
         }
     }
 
     function calculatePayouts(uint256 _premium, uint256[6] memory _statistics)
-        public
-        view
-        returns (uint256 _weight, uint256[5] memory _payoutOptions)
+    public
+    view
+    returns (uint256 _weight, uint256[5] memory _payoutOptions)
     {
         require(_premium >= MIN_PREMIUM, "ERROR::INVALID_PREMIUM");
         require(_premium <= MAX_PREMIUM, "ERROR::INVALID_PREMIUM");
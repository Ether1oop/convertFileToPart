@@ -4,9 +4,22 @@ pragma solidity >=0.8.0 <0.9.0;
 /**
  * @title Pausable
  * @author naomsa <https://twitter.com/naomsa666>
- * @notice A pausable contract without events.
+ * @notice A simpler pausable contract.
  */
 abstract contract Pausable {
+  /*         _           _            */
+  /*        ( )_        ( )_          */
+  /*    ___ | ,_)   _ _ | ,_)   __    */
+  /*  /',__)| |   /'_` )| |   /'__`\  */
+  /*  \__, \| |_ ( (_| || |_ (  ___/  */
+  /*  (____/`\__)`\__,_)`\__)`\____)  */
+
+  /// @notice Emited when the contract is paused.
+  event Paused(address indexed by);
+
+  /// @notice Emited when the contract is unpaused.
+  event Unpaused(address indexed by);
+
   /// @notice Read-only pause state.
   bool private _paused;
 
@@ -22,6 +35,15 @@ abstract contract Pausable {
     _;
   }
 
+  /*   _                            */
+  /*  (_ )                _         */
+  /*   | |    _      __  (_)   ___  */
+  /*   | |  /'_`\  /'_ `\| | /'___) */
+  /*   | | ( (_) )( (_) || |( (___  */
+  /*  (___)`\___/'`\__  |(_)`\____) */
+  /*              ( )_) |           */
+  /*               \___/'           */
+
   /// @notice Retrieve contracts pause state.
   function paused() public view returns (bool) {
     return _paused;
@@ -30,5 +52,7 @@ abstract contract Pausable {
   /// @notice Inverts pause state. Declared internal so it can be combined with the Auth contract.
   function _togglePaused() internal {
     _paused = !_paused;
+    if(_paused) emit Unpaused(msg.sender);
+    else emit Paused(msg.sender);
   }
 }
@@ -235,7 +235,9 @@ contract VaultsTest is DSTestPlus {
         assertTrue(exchangeRate > 1.499e18 && exchangeRate <= 1.5e18);
     }
 
-    function test_harvest_fees_are_correctly_calculated(uint256 amount) public {
+    function test_harvest_fees_are_correctly_calculated() public {
+        uint256 amount = 1e18;
+
         if (amount > (type(uint256).max / 1e37) || amount < 40) return;
 
         // Deposit into the vault.
@@ -276,14 +278,60 @@ contract VaultsTest is DSTestPlus {
         // Expected: between 1.4e18 and 1.5e18
         hevm.roll(block.number + vault.minimumHarvestDelay());
 
+        emit log_uint((vault.maxLockedProfit() * vault.feePercentage()) / 1e18);
         vault.harvest();
         emit log_named_uint("Expected fee amount", (vault.feePercentage() * 0.5e18) / 1e18);
 
         uint256 feesTaken = vault.balanceOfUnderlying(address(1));
         assertTrue(feesTaken > 0.0099e18 && feesTaken < 0.01e18);
+        emit log_uint(feesTaken);
+        emit log_uint(vault.balanceOf(address(1)));
     }
 
-    function test_harvest_pulls_into_float(uint256 amount) public {}
+    function test_harvest_pulls_into_float() public {
+        uint256 amount = 1e18;
+
+        if (amount > (type(uint256).max / 1e37) || amount < 40) return;
+
+        // Deposit into the vault.
+        underlying.mint(address(this), amount);
+        underlying.approve(address(vault), amount);
+        vault.deposit(amount);
+
+        // Set the block number to 1.
+        // If the current block number is 1, the vault will act unexpectedly.
+        hevm.roll(1);
+
+        // Allocate the deposited tokens to various cToken contracts.
+        for (uint256 i = 0; i < 10; i++) {
+            // Deploy a new mock cToken contract and add it to the withdrawQueue.
+            CErc20 mockCErc20 = CErc20(address(new MockCERC20(underlying)));
+            withdrawQueue.push(mockCErc20);
+
+            // Deposit 10% of the total supply into the vault.
+            // This ensure that by the end of the loop, 100% of the vault balance is deposited into the cTokens contracts.
+            vault.enterPool(mockCErc20, amount / 10);
+
+            // Transfer tokens to the cToken contract to simulate earned interest.
+            // This simulates a 50% increase.
+            underlying.mint(address(this), amount / 20);
+            underlying.transfer(address(mockCErc20), amount / 20);
+        }
+
+        // Set the withdrawalQueue to the token addresses.
+        vault.setWithdrawalQueue(withdrawQueue);
+
+        // Float before the harvest.
+        uint256 floatBeforeHarvest = vault.getFloat();
+
+        // Trigger a harvest.
+        vault.harvest();
+
+        // Calculate the amount pulled from the contracts.
+        uint256 pulledFloat = vault.getFloat() - floatBeforeHarvest;
+
+        emit log_uint(pulledFloat);
+    }
 
     function test_vault_enter_pool_functions_correctly(uint256 amount) public {}
 
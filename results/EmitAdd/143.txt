@@ -141,6 +141,7 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         address cRatioSetter_,
         address systemCoinOrcl_,
         address liquidationEngine_,
+        address taxCollector_,
         address oracleRelayer_,
         address safeManager_,
         address saviourRegistry_,
@@ -154,6 +155,7 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         require(systemCoinOrcl_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-system-coin-oracle");
         require(oracleRelayer_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-oracle-relayer");
         require(liquidationEngine_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-liquidation-engine");
+        require(taxCollector_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-tax-collector");
         require(safeManager_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-safe-manager");
         require(saviourRegistry_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-saviour-registry");
         require(liquidityManager_ != address(0), "NativeUnderlyingUniswapV3SafeSaviour/null-liq-manager");
@@ -169,6 +171,7 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         collateralJoin       = CollateralJoinLike(collateralJoin_);
         cRatioSetter         = SaviourCRatioSetterLike(cRatioSetter_);
         liquidationEngine    = LiquidationEngineLike(liquidationEngine_);
+        taxCollector         = TaxCollectorLike(taxCollector_);
         oracleRelayer        = OracleRelayerLike(oracleRelayer_);
         systemCoinOrcl       = PriceFeedLike(systemCoinOrcl_);
         systemCoin           = ERC20Like(coinJoin.systemCoin());
@@ -190,6 +193,7 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         emit AddAuthorization(msg.sender);
         emit ModifyParameters("minKeeperPayoutValue", minKeeperPayoutValue);
         emit ModifyParameters("oracleRelayer", oracleRelayer_);
+        emit ModifyParameters("taxCollector", taxCollector_);
         emit ModifyParameters("systemCoinOrcl", systemCoinOrcl_);
         emit ModifyParameters("liquidationEngine", liquidationEngine_);
         emit ModifyParameters("liquidityManager", liquidityManager_);
@@ -235,6 +239,9 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         else if (parameter == "liquidationEngine") {
             liquidationEngine = LiquidationEngineLike(data);
         }
+        else if (parameter == "taxCollector") {
+            taxCollector = TaxCollectorLike(data);
+        }
         else revert("NativeUnderlyingUniswapV3SafeSaviour/modify-unrecognized-param");
         emit ModifyParameters(parameter, data);
     }
@@ -405,6 +412,8 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         if (safeDebtRepaid > 0) {
           // Approve the coin join contract to take system coins and repay debt
           systemCoin.approve(address(coinJoin), safeDebtRepaid);
+          // Calculate the non adjusted system coin amount
+          uint256 nonAdjustedSystemCoinsToRepay = div(mul(safeDebtRepaid, RAY), getAccumulatedRate(collateralType));
 
           // Join system coins in the system and repay the SAFE's debt
           coinJoin.join(address(this), safeDebtRepaid);
@@ -414,7 +423,7 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
             address(0),
             address(this),
             int256(0),
-            -int256(safeDebtRepaid)
+            -int256(nonAdjustedSystemCoinsToRepay)
           );
         }
 
@@ -545,11 +554,11 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
           uint256 debtToRepay = mul(
             mul(HUNDRED, mul(depositedCollateralToken, collateralPrice) / WAD) / targetCRatio, RAY
           ) / redemptionPrice;
-          debtToRepay         = div(mul(debtToRepay, RAY), getAccumulatedRate(collateralJoin.collateralType()));
 
-          if (debtToRepay >= safeDebt) {
+          if (either(debtToRepay >= safeDebt, debtBelowFloor(collateralJoin.collateralType(), debtToRepay))) {
               return (0, 0);
           }
+          safeDebt    = mul(safeDebt, getAccumulatedRate(collateralJoin.collateralType())) / RAY;
           debtToRepay = sub(safeDebt, debtToRepay);
 
           // Determine total debt to repay; return if the SAFE can be saved solely by repaying debt, continue calculations otherwise
@@ -560,12 +569,7 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
 
         // Calculate the amount of collateral that would need to be added to the SAFE
         uint256 debtGap             = sub(safeDebt, sysCoinsFromLP);
-        uint256 scaledDownDebtValue = mul(
-          mul(redemptionPrice, debtGap) / RAY, getAccumulatedRate(collateralJoin.collateralType())
-        ) / RAY;
-        scaledDownDebtValue         = mul(
-          add(scaledDownDebtValue, ONE), targetCRatio
-        ) / HUNDRED;
+        uint256 scaledDownDebtValue = mul(add(mul(redemptionPrice, debtGap) / RAY, ONE), targetCRatio) / HUNDRED;
 
         uint256 collateralTokenNeeded = div(mul(scaledDownDebtValue, WAD), collateralPrice);
         collateralTokenNeeded         = (either(depositedCollateralToken < collateralTokenNeeded, collateralTokenNeeded == 0)) ?
@@ -633,6 +637,15 @@ contract NativeUnderlyingUniswapV3SafeSaviour is SafeMath, SafeSaviourLike {
         }
     }
     /*
+    * @notify Returns whether a target debt amount is below the debt floor of a specific collateral type
+    * @param collateralType The collateral type whose floor we compare against
+    * @param targetDebtAmount The target debt amount for a SAFE that has collateralType collateral in it
+    */
+    function debtBelowFloor(bytes32 collateralType, uint256 targetDebtAmount) public view returns (bool) {
+        (, , , , uint256 debtFloor, ) = safeEngine.collateralTypes(collateralType);
+        return (mul(targetDebtAmount, RAY) < debtFloor);
+    }
+    /*
     * @notify Get the accumulated interest rate for a specific collateral type
     * @param The collateral type for which to retrieve the rate
     */
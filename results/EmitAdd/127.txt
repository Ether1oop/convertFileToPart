@@ -327,6 +327,7 @@ contract KashiPair is ERC20, BoringOwnable, IMasterContract {
         }
         totalAsset = _totalAsset.add(share, fraction);
         balanceOf[to] = balanceOf[to].add(fraction);
+        emit Transfer(address(0), to, fraction);
         _addTokens(asset, share, totalAssetShare, skim);
         emit LogAddAsset(skim ? address(bentoBox) : msg.sender, to, share, fraction);
     }
@@ -352,6 +353,7 @@ contract KashiPair is ERC20, BoringOwnable, IMasterContract {
         uint256 allShare = _totalAsset.elastic + bentoBox.toShare(asset, totalBorrow.elastic, true);
         share = fraction.mul(allShare) / _totalAsset.base;
         balanceOf[msg.sender] = balanceOf[msg.sender].sub(fraction);
+        emit Transfer(msg.sender, address(0), fraction);
         _totalAsset.elastic = _totalAsset.elastic.sub(share.to128());
         _totalAsset.base = _totalAsset.base.sub(fraction.to128());
         require(_totalAsset.base >= 1000, "Kashi: below minimum");
@@ -685,6 +687,7 @@ contract KashiPair is ERC20, BoringOwnable, IMasterContract {
         address _feeTo = masterContract.feeTo();
         uint256 _feesEarnedFraction = accrueInfo.feesEarnedFraction;
         balanceOf[_feeTo] = balanceOf[_feeTo].add(_feesEarnedFraction);
+        emit Transfer(address(0), _feeTo, _feesEarnedFraction);
         accrueInfo.feesEarnedFraction = 0;
 
         emit LogWithdrawFees(_feeTo, _feesEarnedFraction);
@@ -543,35 +622,36 @@ contract BPool is BMath, BToken {
             emit LOG_EXIT(msg.sender, t, tokenAmountOut, block.timestamp);
             _pushUnderlying(t, msg.sender, tokenAmountOut);
         }
+        emit LOG_BPT(poolAmountIn);
     }
 
     function swapExactAmountIn(
-        address tokenIn,
-        uint256 tokenAmountIn,
-        address tokenOut,
-        uint256 minAmountOut,
-        uint256 maxPrice
+        address[3] calldata tokenInOutMarket, //[tokenIn,tokenOut,marketFeeAddress]
+        uint256[4] calldata amountsInOutMaxFee //[tokenAmountIn,minAmountOut,maxPrice,_swapMarketFee]
     ) external _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {
         require(_finalized, "ERR_NOT_FINALIZED");
-
-        require(_records[tokenIn].bound, "ERR_NOT_BOUND");
-        require(_records[tokenOut].bound, "ERR_NOT_BOUND");
-        Record storage inRecord = _records[address(tokenIn)];
-        Record storage outRecord = _records[address(tokenOut)];
+        _checkBound(tokenInOutMarket[0]);
+        _checkBound(tokenInOutMarket[1]);
+        Record storage inRecord = _records[address(tokenInOutMarket[0])];
+        Record storage outRecord = _records[address(tokenInOutMarket[1])];
 
         require(
-            tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO),
+            amountsInOutMaxFee[0] <= bmul(inRecord.balance, MAX_IN_RATIO),
             "ERR_MAX_IN_RATIO"
         );
 
         uint256 spotPriceBefore = calcSpotPrice(
             inRecord.balance,
             inRecord.denorm,
             outRecord.balance,
-            outRecord.denorm
+            outRecord.denorm,
+            amountsInOutMaxFee[3]
         );
 
-        require(spotPriceBefore <= maxPrice, "ERR_BAD_LIMIT_PRICE");
+        require(
+            spotPriceBefore <= amountsInOutMaxFee[2],
+            "ERR_BAD_LIMIT_PRICE"
+        );
         uint256 balanceInToAdd;
         uint256[4] memory data = [
             inRecord.balance,
@@ -762,7 +878,7 @@ contract BPool is BMath, BToken {
                 ssAmountIn,
                 block.timestamp
             );
-            emit LOG_BPT(poolAmountOut);
+            emit LOG_BPT_SS(poolAmountOut);
             _mintPoolShare(poolAmountOut);
             _pushPoolShare(_controller, poolAmountOut);
             _pullUnderlying(ssStakeToken, _controller, ssAmountIn);
@@ -925,6 +1035,7 @@ contract BPool is BMath, BToken {
                 ssAmountOut,
                 poolAmountIn
             );
+            emit LOG_BPT_SS(poolAmountIn);
         }
         return tokenAmountOut;
     }
@@ -1009,6 +1116,7 @@ contract BPool is BMath, BToken {
                 ssAmountOut,
                 poolAmountIn
             );
+            emit LOG_BPT_SS(poolAmountIn);
         }
         return poolAmountIn;
     }

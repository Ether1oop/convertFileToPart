@@ -7,12 +7,41 @@ import "./MoCInrate.sol";
 import "./base/MoCBase.sol";
 import "./MoC.sol";
 
+
 contract MoCExchangeEvents {
-  event RiskProMint(address indexed account, uint256 amount, uint256 reserveTotal, uint256 commission, uint256 reservePrice);
-  event RiskProWithDiscountMint(uint256 riskProTecPrice, uint256 riskProDiscountPrice, uint256 amount);
-  event RiskProRedeem(address indexed account, uint256 amount, uint256 reserveTotal, uint256 commission, uint256 reservePrice);
-  event StableTokenMint(address indexed account, uint256 amount, uint256 reserveTotal, uint256 commission, uint256 reservePrice);
-  event StableTokenRedeem(address indexed account, uint256 amount, uint256 reserveTotal, uint256 commission, uint256 reservePrice);
+  event RiskProMint(
+    address indexed account,
+    uint256 amount,
+    uint256 reserveTotal,
+    uint256 commission,
+    uint256 reservePrice
+  );
+  event RiskProWithDiscountMint(
+    uint256 riskProTecPrice,
+    uint256 riskProDiscountPrice,
+    uint256 amount
+  );
+  event RiskProRedeem(
+    address indexed account,
+    uint256 amount,
+    uint256 reserveTotal,
+    uint256 commission,
+    uint256 reservePrice
+  );
+  event StableTokenMint(
+    address indexed account,
+    uint256 amount,
+    uint256 reserveTotal,
+    uint256 commission,
+    uint256 reservePrice
+  );
+  event StableTokenRedeem(
+    address indexed account,
+    uint256 amount,
+    uint256 reserveTotal,
+    uint256 commission,
+    uint256 reservePrice
+  );
   event FreeStableTokenRedeem(
     address indexed account,
     uint256 amount,
@@ -45,7 +74,8 @@ contract MoCExchangeEvents {
   );
 }
 
-contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
+
+contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection {
   using Math for uint256;
   using SafeMath for uint256;
 
@@ -58,45 +88,59 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
   MoCInrate internal mocInrate;
   MoC internal moc;
 
-  function initialize(
-    address connectorAddress
-  ) public initializer {
+  function initialize(address connectorAddress) public initializer {
     initializePrecisions();
     initializeBase(connectorAddress);
     initializeContracts();
   }
 
   /**
-  * @dev Mint BPros and give it to the msg.sender
-  */
-  function mintBPro(address account, uint256 btcAmount) public onlyWhitelisted(msg.sender) returns(uint256, uint256) {
+   * @dev Mint BPros and give it to the msg.sender
+   */
+// solium-disable-next-line security/no-assign-params
+  function mintBPro(address account, uint256 btcAmount)
+    public
+    onlyWhitelisted(msg.sender)
+    returns (uint256, uint256)
+  {
     uint256 bproRegularPrice = mocState.bproTecPrice();
     uint256 finalBProAmount = 0;
     uint256 btcValue = 0;
 
-    if (mocState.state() == MoCState.States.BProDiscount)
-    {
+    if (mocState.state() == MoCState.States.BProDiscount) {
       uint256 discountPrice = mocState.bproDiscountPrice();
       uint256 bproDiscountAmount = mocConverter.btcToBProDisc(btcAmount);
 
-      finalBProAmount = Math.min(bproDiscountAmount, mocState.maxBProWithDiscount());
-      btcValue = finalBProAmount == bproDiscountAmount ? btcAmount : mocConverter.bproDiscToBtc(finalBProAmount);
-
-      emit RiskProWithDiscountMint(bproRegularPrice, discountPrice, finalBProAmount);
+      finalBProAmount = Math.min(
+        bproDiscountAmount,
+        mocState.maxBProWithDiscount()
+      );
+      btcValue = finalBProAmount == bproDiscountAmount
+        ? btcAmount
+        : mocConverter.bproDiscToBtc(finalBProAmount);
+
+      emit RiskProWithDiscountMint(
+        bproRegularPrice,
+        discountPrice,
+        finalBProAmount
+      );
     }
 
-    if (btcAmount != btcValue)
-    {
-      uint256 regularBProAmount = mocConverter.btcToBPro(btcAmount.sub(btcValue));
+    if (btcAmount != btcValue) {
+      uint256 regularBProAmount = mocConverter.btcToBPro(
+        btcAmount.sub(btcValue)
+      );
       finalBProAmount = finalBProAmount.add(regularBProAmount);
     }
 
     // START Upgrade V017
     // 01/11/2019 Limiting mint bpro (no with discount)
     // Only enter with no discount state
-    if (mocState.state() != MoCState.States.BProDiscount)
-    {
-      uint256 availableBPro = Math.min(finalBProAmount, mocState.maxMintBProAvalaible());
+    if (mocState.state() != MoCState.States.BProDiscount) {
+      uint256 availableBPro = Math.min(
+        finalBProAmount,
+        mocState.maxMintBProAvalaible()
+      );
       if (availableBPro != finalBProAmount) {
         btcAmount = mocConverter.bproToBtc(availableBPro);
         finalBProAmount = availableBPro;
@@ -116,11 +160,15 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
   }
 
   /**
-  * @dev Sender burns his BProS and redeems the equivalent BTCs
-  * @param bproAmount Amount of BPros to be redeemed
-  * @return bitcoins to transfer to the redeemer and commission spent, using [using reservePrecision]
-  **/
-  function redeemBPro(address account, uint256 bproAmount) public onlyWhitelisted(msg.sender) returns(uint256, uint256) {
+   * @dev Sender burns his BProS and redeems the equivalent BTCs
+   * @param bproAmount Amount of BPros to be redeemed
+   * @return bitcoins to transfer to the redeemer and commission spent, using [using reservePrecision]
+   **/
+  function redeemBPro(address account, uint256 bproAmount)
+    public
+    onlyWhitelisted(msg.sender)
+    returns (uint256, uint256)
+  {
     uint256 userBalance = bproToken.balanceOf(account);
     uint256 userAmount = Math.min(bproAmount, userBalance);
 
@@ -133,11 +181,22 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
     bproToken.burn(account, bproFinalAmount);
 
     // Update Buckets
-    bproxManager.substractValuesFromBucket(BUCKET_C0, totalBtc, 0, bproFinalAmount);
+    bproxManager.substractValuesFromBucket(
+      BUCKET_C0,
+      totalBtc,
+      0,
+      bproFinalAmount
+    );
 
     uint256 btcTotalWithoutCommission = totalBtc.sub(btcCommission);
 
-    emit RiskProRedeem(account, bproFinalAmount, btcTotalWithoutCommission, btcCommission, mocState.getBitcoinPrice());
+    emit RiskProRedeem(
+      account,
+      bproFinalAmount,
+      btcTotalWithoutCommission,
+      btcCommission,
+      mocState.getBitcoinPrice()
+    );
 
     return (btcTotalWithoutCommission, btcCommission);
   }
@@ -149,38 +208,61 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
   * @return bitcoins to transfer to the redeemer and commission spent, using [using reservePrecision]
 
   */
-  function redeemFreeDoc(address account, uint256 docAmount) public onlyWhitelisted(msg.sender) returns(uint256, uint256) {
+  function redeemFreeDoc(address account, uint256 docAmount)
+    public
+    onlyWhitelisted(msg.sender)
+    returns (uint256, uint256)
+  {
     if (docAmount <= 0) {
       return (0, 0);
     } else {
-      uint256 finalDocAmount = Math.min(docAmount, Math.min(mocState.freeDoc(), docToken.balanceOf(account)));
+      uint256 finalDocAmount = Math.min(
+        docAmount,
+        Math.min(mocState.freeDoc(), docToken.balanceOf(account))
+      );
       uint256 docsBtcValue = mocConverter.docsToBtc(finalDocAmount);
 
-      uint256 btcInterestAmount = mocInrate.calcDocRedInterestValues(finalDocAmount, docsBtcValue);
+      uint256 btcInterestAmount = mocInrate.calcDocRedInterestValues(
+        finalDocAmount,
+        docsBtcValue
+      );
       uint256 finalBtcAmount = docsBtcValue.sub(btcInterestAmount);
       uint256 btcCommission = mocInrate.calcCommissionValue(finalBtcAmount);
 
       doDocRedeem(account, finalDocAmount, docsBtcValue);
       bproxManager.payInrate(BUCKET_C0, btcInterestAmount);
 
-      emit FreeStableTokenRedeem(account, finalDocAmount, finalBtcAmount, btcCommission, btcInterestAmount, mocState.getBitcoinPrice());
+      emit FreeStableTokenRedeem(
+        account,
+        finalDocAmount,
+        finalBtcAmount,
+        btcCommission,
+        btcInterestAmount,
+        mocState.getBitcoinPrice()
+      );
 
       return (finalBtcAmount.sub(btcCommission), btcCommission);
     }
   }
 
-    /**
-  * @dev Mint Max amount of Docs and give it to the msg.sender
-  * @param account minter user address
-  * @param btcToMint btc amount the user intents to convert to DoC [using rbtPresicion]
-  * @return the actual amount of btc used and the btc commission for them [using rbtPresicion]
-  */
-  function mintDoc(address account, uint256 btcToMint) public onlyWhitelisted(msg.sender) returns(uint256, uint256) {
+  /**
+   * @dev Mint Max amount of Docs and give it to the msg.sender
+   * @param account minter user address
+   * @param btcToMint btc amount the user intents to convert to DoC [using rbtPresicion]
+   * @return the actual amount of btc used and the btc commission for them [using rbtPresicion]
+   */
+  function mintDoc(address account, uint256 btcToMint)
+    public
+    onlyWhitelisted(msg.sender)
+    returns (uint256, uint256)
+  {
     // Docs to issue with tx value amount
     if (btcToMint > 0) {
       uint256 docs = mocConverter.btcToDoc(btcToMint);
       uint256 docAmount = Math.min(docs, mocState.absoluteMaxDoc());
-      uint256 totalCost = docAmount == docs ? btcToMint : mocConverter.docsToBtc(docAmount);
+      uint256 totalCost = docAmount == docs
+        ? btcToMint
+        : mocConverter.docsToBtc(docAmount);
 
       // Mint Token
       docToken.mint(account, docAmount);
@@ -190,7 +272,13 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
 
       uint256 btcCommission = mocInrate.calcCommissionValue(totalCost);
 
-      emit StableTokenMint(account, docAmount, totalCost, btcCommission, mocState.getBitcoinPrice());
+      emit StableTokenMint(
+        account,
+        docAmount,
+        totalCost,
+        btcCommission,
+        mocState.getBitcoinPrice()
+      );
 
       return (totalCost, btcCommission);
     }
@@ -199,14 +287,17 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
   }
 
   /**
-  * @dev User DoCs get burned and he receives the equivalent BTCs in return
-  * @param userAddress Address of the user asking to redeem
-  * @param amount Verified amount of Docs to be redeemed [using mocPrecision]
-  * @param btcPrice bitcoin price [using mocPrecision]
-  * @return true and commission spent if btc send was completed, false if fails.
-  **/
-  function redeemDocWithPrice(address payable userAddress, uint256 amount, uint256 btcPrice)
-  public onlyWhitelisted(msg.sender) returns(bool, uint256){
+   * @dev User DoCs get burned and he receives the equivalent BTCs in return
+   * @param userAddress Address of the user asking to redeem
+   * @param amount Verified amount of Docs to be redeemed [using mocPrecision]
+   * @param btcPrice bitcoin price [using mocPrecision]
+   * @return true and commission spent if btc send was completed, false if fails.
+   **/
+  function redeemDocWithPrice(
+    address payable userAddress,
+    uint256 amount,
+    uint256 btcPrice
+  ) public onlyWhitelisted(msg.sender) returns (bool, uint256) {
     uint256 totalBtc = mocConverter.docsToBtcWithPrice(amount, btcPrice);
 
     uint256 commissionSpent = mocInrate.calcCommissionValue(totalBtc);
@@ -217,71 +308,100 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
     // If sends fail, then no redemption is executed
     if (result) {
       doDocRedeem(userAddress, amount, totalBtc);
-      emit StableTokenRedeem(userAddress, amount, totalBtc.sub(commissionSpent), commissionSpent, btcPrice);
+      emit StableTokenRedeem(
+        userAddress,
+        amount,
+        totalBtc.sub(commissionSpent),
+        commissionSpent,
+        btcPrice
+      );
     }
 
     return (result, commissionSpent);
   }
 
   /**
-  * @dev Allow redeem on liquidation state, user DoCs get burned and he receives
-  * the equivalent RBTCs according to liquidationPrice
-  * @param origin address owner of the DoCs
-  * @param destination address to send the RBTC
-  * @return The amount of RBTC in sent for the redemption or 0 if send does not succed
-  **/
-  function redeemAllDoc(address origin, address payable destination) public onlyWhitelisted(msg.sender) returns(uint256) {
+   * @dev Allow redeem on liquidation state, user DoCs get burned and he receives
+   * the equivalent RBTCs according to liquidationPrice
+   * @param origin address owner of the DoCs
+   * @param destination address to send the RBTC
+   * @return The amount of RBTC in sent for the redemption or 0 if send does not succed
+   **/
+  function redeemAllDoc(address origin, address payable destination)
+    public
+    onlyWhitelisted(msg.sender)
+    returns (uint256)
+  {
     uint256 userDocBalance = docToken.balanceOf(origin);
-    if (userDocBalance == 0)
-      return 0;
+    if (userDocBalance == 0) return 0;
 
     uint256 liqPrice = mocState.getLiquidationPrice();
     // [USD * RBTC / USD]
-    uint256 totalRbtc = mocConverter.docsToBtcWithPrice(userDocBalance, liqPrice);
+    uint256 totalRbtc = mocConverter.docsToBtcWithPrice(
+      userDocBalance,
+      liqPrice
+    );
 
     // If send fails we don't burn the tokens
     if (moc.sendToAddress(destination, totalRbtc)) {
       docToken.burn(origin, userDocBalance);
       emit StableTokenRedeem(origin, userDocBalance, totalRbtc, 0, liqPrice);
 
       return totalRbtc;
-    }
-    else
-    {
+    } else {
       return 0;
     }
   }
 
-
   /**
     @dev  Mint the amount of BPros
     @param account Address that will owned the BPros
     @param bproAmount Amount of BPros to mint [using mocPrecision]
     @param rbtcValue RBTC cost of the minting [using reservePrecision]
   */
-  function mintBPro(address account, uint256 btcCommission, uint256 bproAmount, uint256 rbtcValue) public onlyWhitelisted(msg.sender) {
+  function mintBPro(
+    address account,
+    uint256 btcCommission,
+    uint256 bproAmount,
+    uint256 rbtcValue
+  ) public onlyWhitelisted(msg.sender) {
     bproToken.mint(account, bproAmount);
     bproxManager.addValuesToBucket(BUCKET_C0, rbtcValue, 0, bproAmount);
 
-    emit RiskProMint(account, bproAmount, rbtcValue, btcCommission, mocState.getBitcoinPrice());
+    emit RiskProMint(
+      account,
+      bproAmount,
+      rbtcValue,
+      btcCommission,
+      mocState.getBitcoinPrice()
+    );
   }
 
   /**
-  * @dev BUCKET Bprox minting. Mints Bprox for the specified bucket
-  * @param account owner of the new minted Bprox
-  * @param bucket bucket name
-  * @param btcToMint rbtc amount to mint [using reservePrecision]
-  * @return total RBTC Spent (btcToMint more interest) and commission spent [using reservePrecision]
-  **/
-  function mintBProx(address payable account, bytes32 bucket, uint256 btcToMint
-  ) public onlyWhitelisted(msg.sender) returns(uint256, uint256) {
-    if (btcToMint > 0){
+   * @dev BUCKET Bprox minting. Mints Bprox for the specified bucket
+   * @param account owner of the new minted Bprox
+   * @param bucket bucket name
+   * @param btcToMint rbtc amount to mint [using reservePrecision]
+   * @return total RBTC Spent (btcToMint more interest) and commission spent [using reservePrecision]
+   **/
+  function mintBProx(address payable account, bytes32 bucket, uint256 btcToMint)
+    public
+    onlyWhitelisted(msg.sender)
+    returns (uint256, uint256)
+  {
+    if (btcToMint > 0) {
       uint256 lev = mocState.leverage(bucket);
 
-      uint256 finalBtcToMint = Math.min(btcToMint, mocState.maxBProxBtcValue(bucket));
+      uint256 finalBtcToMint = Math.min(
+        btcToMint,
+        mocState.maxBProxBtcValue(bucket)
+      );
 
       // Get interest and the adjusted BProAmount
-      uint256 btcInterestAmount = mocInrate.calcMintInterestValues(bucket, finalBtcToMint);
+      uint256 btcInterestAmount = mocInrate.calcMintInterestValues(
+        bucket,
+        finalBtcToMint
+      );
 
       // pay interest
       bproxManager.payInrate(BUCKET_C0, btcInterestAmount);
@@ -297,8 +417,14 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
       uint256 btcCommission = mocInrate.calcCommissionValue(finalBtcToMint);
 
       emit RiskProxMint(
-        bucket, account, bproxToMint, finalBtcToMint,
-        btcInterestAmount, lev, btcCommission, mocState.getBitcoinPrice()
+        bucket,
+        account,
+        bproxToMint,
+        finalBtcToMint,
+        btcInterestAmount,
+        lev,
+        btcCommission,
+        mocState.getBitcoinPrice()
       );
 
       return (finalBtcToMint.add(btcInterestAmount), btcCommission);
@@ -308,14 +434,17 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
   }
 
   /**
-  * @dev Sender burns his BProx, redeems the equivalent amount of BPros, return
-  * the "borrowed" DOCs and recover pending interests
-  * @param account user address to redeem bprox from
-  * @param bucket Bucket where the BProxs are hold
-  * @param bproxAmount Amount of BProxs to be redeemed [using mocPrecision]
-  * @return the actual amount of btc to redeem and the btc commission for them [using reservePrecision]
-  **/
-  function redeemBProx(address payable account, bytes32 bucket, uint256 bproxAmount
+   * @dev Sender burns his BProx, redeems the equivalent amount of BPros, return
+   * the "borrowed" DOCs and recover pending interests
+   * @param account user address to redeem bprox from
+   * @param bucket Bucket where the BProxs are hold
+   * @param bproxAmount Amount of BProxs to be redeemed [using mocPrecision]
+   * @return the actual amount of btc to redeem and the btc commission for them [using reservePrecision]
+   **/
+  function redeemBProx(
+    address payable account,
+    bytes32 bucket,
+    uint256 bproxAmount
   ) public onlyWhitelisted(msg.sender) returns (uint256, uint256) {
     // Revert could cause not evaluating state changing
     if (bproxManager.bproxBalanceOf(bucket, account) == 0) {
@@ -374,10 +503,19 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
     @param bproxPrice Price of one BProx in RBTC [using reservePrecision]
     @return result of the RBTC sending transaction [using reservePrecision]
   **/
-  function forceRedeemBProx(bytes32 bucket, address payable account, uint256 bproxAmount, uint256 bproxPrice
-  ) public onlyWhitelisted(msg.sender) returns(bool) {
+  function forceRedeemBProx(
+    bytes32 bucket,
+    address payable account,
+    uint256 bproxAmount,
+    uint256 bproxPrice
+  ) public onlyWhitelisted(msg.sender) returns (bool) {
     // Do burning part of the redemption
-    uint256 btcTotalAmount = burnBProxFor(bucket, account, bproxAmount, bproxPrice);
+    uint256 btcTotalAmount = burnBProxFor(
+      bucket,
+      account,
+      bproxAmount,
+      bproxPrice
+    );
 
     // Send transaction can only fail for external code
     // if transaction fails, user will lost his RBTC and BProx
@@ -393,10 +531,17 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
     @return Bitcoin total value of the redemption [using reservePrecision]
 
   **/
-  function burnBProxFor(bytes32 bucket, address payable account, uint256 bproxAmount, uint256 bproxPrice
-  ) public onlyWhitelisted(msg.sender) returns(uint256) {
+  function burnBProxFor(
+    bytes32 bucket,
+    address payable account,
+    uint256 bproxAmount,
+    uint256 bproxPrice
+  ) public onlyWhitelisted(msg.sender) returns (uint256) {
     // Calculate total RBTC
-    uint256 btcTotalAmount = mocConverter.bproToBtcWithPrice(bproxAmount, bproxPrice);
+    uint256 btcTotalAmount = mocConverter.bproToBtcWithPrice(
+      bproxAmount,
+      bproxPrice
+    );
     bproxManager.removeBProx(bucket, account, bproxAmount, btcTotalAmount);
 
     return btcTotalAmount;
@@ -410,30 +555,53 @@ contract MoCExchange is MoCExchangeEvents, MoCBase, MoCLibConnection  {
     @param totalBtc Amount of BTC moving between buckets [using reservePrecision]
     @param lev lev of the L bucket [using mocPrecision]
   **/
-  function moveExtraFundsToBucket(bytes32 bucketFrom, bytes32 bucketTo, uint256 totalBtc, uint256 lev
+  function moveExtraFundsToBucket(
+    bytes32 bucketFrom,
+    bytes32 bucketTo,
+    uint256 totalBtc,
+    uint256 lev
   ) internal {
     uint256 btcToMove = mocLibConfig.bucketTransferAmount(totalBtc, lev);
     uint256 docsToMove = mocConverter.btcToDoc(btcToMove);
 
-    uint256 btcToMoveFinal = Math.min(btcToMove, bproxManager.getBucketNBTC(bucketFrom));
-    uint256 docsToMoveFinal = Math.min(docsToMove, bproxManager.getBucketNDoc(bucketFrom));
+    uint256 btcToMoveFinal = Math.min(
+      btcToMove,
+      bproxManager.getBucketNBTC(bucketFrom)
+    );
+    uint256 docsToMoveFinal = Math.min(
+      docsToMove,
+      bproxManager.getBucketNDoc(bucketFrom)
+    );
 
-    bproxManager.moveBtcAndDocs(bucketFrom, bucketTo, btcToMoveFinal, docsToMoveFinal);
+    bproxManager.moveBtcAndDocs(
+      bucketFrom,
+      bucketTo,
+      btcToMoveFinal,
+      docsToMoveFinal
+    );
   }
 
   /**
-  * @dev Returns RBTCs for user in concept of interests refund
-  * @param bucket Bucket where the BProxs are hold
-  * @param rbtcToRedeem Total RBTC value of the redemption [using reservePrecision]
-  * @return Interests [using reservePrecision]
-  **/
-  function recoverInterests(bytes32 bucket, uint256 rbtcToRedeem) internal returns(uint256) {
-    uint256 rbtcInterests = mocInrate.calcFinalRedeemInterestValue(bucket, rbtcToRedeem);
+   * @dev Returns RBTCs for user in concept of interests refund
+   * @param bucket Bucket where the BProxs are hold
+   * @param rbtcToRedeem Total RBTC value of the redemption [using reservePrecision]
+   * @return Interests [using reservePrecision]
+   **/
+  function recoverInterests(bytes32 bucket, uint256 rbtcToRedeem)
+    internal
+    returns (uint256)
+  {
+    uint256 rbtcInterests = mocInrate.calcFinalRedeemInterestValue(
+      bucket,
+      rbtcToRedeem
+    );
 
     return bproxManager.recoverInrate(BUCKET_C0, rbtcInterests);
   }
 
-  function doDocRedeem(address userAddress, uint256 docAmount, uint256 totalBtc) internal {
+  function doDocRedeem(address userAddress, uint256 docAmount, uint256 totalBtc)
+    internal
+  {
     docToken.burn(userAddress, docAmount);
     bproxManager.substractValuesFromBucket(BUCKET_C0, totalBtc, docAmount, 0);
   }
@@ -323,7 +323,9 @@ contract TwoKeyAcquisitionCampaignERC20 is TwoKeyCampaignARC, Utils, TwoKeyTypes
             assembly
             {
                 v := mload(add(sig, idx))
+
             }
+            //TODO: copy updated code from Udi (validate v value)
 
             // idx was increased by 65
 
@@ -649,31 +651,31 @@ contract TwoKeyAcquisitionCampaignERC20 is TwoKeyCampaignARC, Utils, TwoKeyTypes
     /// @param value is the new value we are going to set for minContributionETH
     function updateMinContributionETH(uint value) public onlyContractor {
         minContributionETH = value;
-        emit UpdatedData(block.timestamp, value, "Updated maxContribution");
+        twoKeyEventSource.updatedData(block.timestamp, value, "Updated maxContribution");
     }
 
     /// @notice Option to update maxContributionETH
     /// @dev only Contractor can call this method, otherwise it will revert - emits Event when updated
     /// @param value is the new maxContribution value
     function updateMaxContributionETH(uint value) public onlyContractor {
         maxContributionETH = value;
-        emit UpdatedData(block.timestamp, value, "Updated maxContribution");
+        twoKeyEventSource.updatedData(block.timestamp, value, "Updated maxContribution");
     }
 
     /// @notice Option to update maxReferralRewardPercent
     /// @dev only Contractor can call this method, otherwise it will revert - emits Event when updated
     /// @param value is the new referral percent value
     function updateMaxReferralRewardPercent(uint value) public onlyContractor {
         maxReferralRewardPercent = value;
-        emit UpdatedData(block.timestamp, value, "Updated maxReferralRewardPercent");
+        twoKeyEventSource.updatedData(block.timestamp, value, "Updated maxReferralRewardPercent");
     }
 
     /// @notice Option to update /set publicMetaHash
     /// @dev only Contractor can call this function, otherwise it will revert - emits Event when set/updated
     /// @param value is the value for the publicMetaHash
     function updateOrSetIpfsHashPublicMeta(string value) public onlyContractor {
         publicMetaHash = value;
-        emit UpdatedPublicMetaHash(block.timestamp, value);
+        twoKeyEventSource.updatedPublicMetaHash(block.timestamp, value);
     }
 
     /// @notice Option to update contractor proceeds
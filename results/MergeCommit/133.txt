@@ -1,13 +1,13 @@
 pragma solidity 0.6.7;
 
 import "../../lib/ds-test/src/test.sol";
-import "../GebUniswapv3LiquidityManager.sol";
+import "../GebUniswapV3LiquidityManager.sol";
 import "../uni/UniswapV3Factory.sol";
 import "../uni/UniswapV3Pool.sol";
 import "./TestHelpers.sol";
 import "./OracleLikeMock.sol";
 
-contract GebUniswapv3LiquidityManagerTest is DSTest {
+contract GebUniswapV3LiquidityManagerTest is DSTest {
     Hevm hevm;
 
     GebUniswapV3LiquidityManager manager;
@@ -18,7 +18,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
     address token0;
     address token1;
 
-    uint256 threshold = 360000;  // 36%
+    uint256 threshold = 200040;  // 20%
     uint256 delay = 120 minutes; // 10 minutes
 
     uint160 initialPoolPrice;
@@ -44,12 +44,12 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         pv = new PoolViewer();
 
         // Deploy Pool
-        pool = UniswapV3Pool(helper_deployV3Pool(token0, token1, 500));
+        pool = UniswapV3Pool(helper_deployV3Pool(token0, token1, 3000));
 
         // We have to give an inital price to WETH
         // This means 10:1 (10 RAI for 1 ETH)
         // This number is the sqrt of the price = sqrt(0.1) multiplied by 2 ** 96
-        manager = new GebUniswapV3LiquidityManager("Geb-Uniswap-Manager", "GUM", address(testRai), threshold, delay, address(pool), bytes32("ETH"), oracle, pv);
+        manager = new GebUniswapV3LiquidityManager("Geb-Uniswap-Manager", "GUM", address(testRai), threshold, delay, address(pool), oracle, pv);
 
         //Will initialize the pool with current price
         initialPoolPrice = helper_getRebalancePrice();
@@ -124,14 +124,14 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         uint256 wethAmount = 300 ether;
         uint256 raiAmount = 1200000000 ether;
         (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();
-        uint128 liq = helper_getLiquidityAmountsForTicks(sqrtRatioX96, -887270, 887270, wethAmount, raiAmount);
-        int24 low = -887270;
-        int24 upp = 887270;
-        pool.mint(address(this), low, upp, liq, bytes(""));
+        // uint128 liq = helper_getLiquidityAmountsForTicks(sqrtRatioX96, -887220, 887220, wethAmount, raiAmount);
+        int24 low = -887220;
+        int24 upp = 887220;
+        pool.mint(address(this), low, upp, 1000000000, bytes(""));
     }
 
     function helper_addLiquidity(uint8 user) public {
-        (bytes32 i_id, , , uint128 i_uniLiquidity) = manager.position();
+        (bytes32 i_id, , , uint128 i_uniLiquidity,uint256 threshold_) = manager.position();
         (uint128 i_liquidity, , , , ) = pool.positions(i_id);
         PoolUser u = users[(user - 1) % 4];
         uint256 wethAmount = 3000 ether;
@@ -140,7 +140,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         u.doApprove(address(testRai), address(manager), raiAmount);
         u.doApprove(address(testWeth), address(manager), wethAmount);
 
-        (int24 newLower, int24 newUpper, ) = manager.getNextTicks();
+        (int24 newLower, int24 newUpper, ) = manager.getNextTicks(threshold_);
 
         (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();
         uint128 liq = helper_getLiquidityAmountsForTicks(sqrtRatioX96, newLower, newUpper, wethAmount, raiAmount);
@@ -154,13 +154,15 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         uint256 t0am,
         uint256 t1am
     ) public returns (uint128 liquidity) {
+        emit log_named_uint("am0", 22222);
         liquidity = LiquidityAmounts.getLiquidityForAmounts(
             sqrtRatioX96,
             TickMath.getSqrtRatioAtTick(_lowerTick),
             TickMath.getSqrtRatioAtTick(upperTick),
             t0am,
             t1am
         );
+        emit log_named_uint("am1", 22223);
     }
 
     function helper_getAbsInt24(int24 val) internal returns (uint256 abs) {
@@ -171,9 +173,17 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         }
     }
 
+    function helper_logTick(int24 val) internal {
+        if(val > 0){
+            emit log_named_uint("pos",uint256(val) );
+        } else {
+            emit log_named_uint("neg",uint256(val * int24(-1)));
+        }
+    }
+
     function helper_do_swap() public {
         (uint160 currentPrice, , , , , , ) = pool.slot0();
-        uint160 sqrtLimitPrice = currentPrice - 100000000000000;
+        uint160 sqrtLimitPrice = currentPrice - 1000;
         pool.swap(address(this), true, 10 ether, sqrtLimitPrice, bytes(""));
     }
 
@@ -218,7 +228,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         uint256 _delay = manager.delay();
         assertTrue(_delay == delay);
 
-        uint256 _threshold = manager.threshold();
+        (,,,,uint256 _threshold )= manager.position();
         assertTrue(_threshold == threshold);
     }
 
@@ -246,23 +256,6 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         (uint160 poolPrice_, , , , , , ) = pool.slot0();
         assertTrue(poolPrice_ == initialPoolPrice);
     }
-
-    function test_modify_threshold() public {
-        uint256 newThreshold = 200000;
-        manager.modifyParameters(bytes32("threshold"), newThreshold);
-        assertTrue(manager.threshold() == newThreshold);
-    }
-
-    function testFail_invalid_threshold_tickspacing() public {
-        uint256 newThreshold = 400002;
-        manager.modifyParameters(bytes32("threshold"), newThreshold);
-    }
-
-    function testFail_invalid_threshold() public {
-        uint256 newThreshold = 20;
-        manager.modifyParameters(bytes32("threshold"), newThreshold);
-    }
-
     function test_modify_delay() public {
         uint256 newDelay = 340 minutes;
         manager.modifyParameters(bytes32("delay"), newDelay);
@@ -297,14 +290,53 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
 
     function test_get_prices() public {
         (uint256 redemptionPrice, uint256 tokenPrice) = manager.getPrices();
-        assertTrue(redemptionPrice == 1200000000 ether);
-        assertTrue(tokenPrice == 300 ether);
+        emit log_named_uint("redemptionPrice",redemptionPrice );
+        emit log_named_uint("tokenPrice",tokenPrice );
+        assertTrue(redemptionPrice == 3000000000000000000000000000);
+        assertTrue(tokenPrice == 4000000000000000000000000000000);
+
+        uint256 scale = 1000000000;
+
+        uint256 price = redemptionPrice * scale / tokenPrice;
+        emit log_named_uint("price",price );
+
+        uint a1 = price;
+        uint a0 = scale;
+
+        uint num = a1 << 192;
+        uint den = a0;
+        uint pri = ((tokenPrice * scale / redemptionPrice) << 192) / scale;
+
+        emit log_named_uint("lar",uint256(0-1));
+        emit log_named_uint("lar",uint128(0-1));
+        emit log_named_uint("num",num);
+        emit log_named_uint("den",den );
+        emit log_named_uint("pri",pri );
+
+
+        uint160 p = uint160(sqrt(pri));
+        emit log_named_uint("p",p );
+        //11579208923731619542357098500868790785 3269984665640564039457584007913129639935
+        //340282366920938463463374607431768211455
+
+
+        int24 t = TickMath.getTickAtSqrtRatio(p);
+        if(t > 0){
+            emit log_named_uint("pos",helper_getAbsInt24(t) );
+        } else {
+            emit log_named_uint("neg",helper_getAbsInt24(t) );
+        }
+
+        assertTrue(false);
     }
 
     function test_get_next_ticks() public {
-        (int24 _nextLowerTick, int24 _nextUpperTick, ) = manager.getNextTicks();
-        assertTrue(_nextLowerTick >= -887270 && _nextLowerTick <= 0);
-        assertTrue(_nextUpperTick >= _nextLowerTick && _nextUpperTick <= 0);
+        (,,,,uint256 __threshold) = manager.position();
+        (int24 _nextLowerTick, int24 _nextUpperTick,) = manager.getNextTicks(__threshold);
+        helper_logTick(_nextLowerTick);
+        helper_logTick(_nextUpperTick);
+        assertTrue(_nextLowerTick >= -887220 && _nextLowerTick <= _nextUpperTick);
+        assertTrue(_nextUpperTick >= _nextLowerTick && _nextUpperTick <= 887220);
     }
 
     function test_get_token0_from_liquidity() public {
@@ -362,7 +394,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         emit log_named_uint("amount1", amount1); // 0
 
         // We need some pool info
-        (bytes32 id, int24 lowerTick, int24 upperTick, uint128 uniLiquidity1) = manager.position();
+        (bytes32 id, int24 lowerTick, int24 upperTick, uint128 uniLiquidity1,) = manager.position();
         (uint160 u1_sqrtRatioX96, , , , , , ) = pool.slot0();
 
         // --- Trying again using both amounts---
@@ -383,13 +415,14 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         u1.doApprove(address(testWeth), address(manager), wethAmount);
 
         (uint160 price1, , , , , , ) = pool.slot0();
-        (int24 newLower, int24 newUpper, ) = manager.getNextTicks();
+        (,,,,uint256 __threshold) = manager.position();
+        (int24 newLower, int24 newUpper, ) = manager.getNextTicks(__threshold);
 
         uint128 liq = helper_getLiquidityAmountsForTicks(price1, newLower, newUpper, 1 ether, 10 ether);
         emit log_named_uint("liq", liq);
 
         {
-            (int24 _nlower, int24 _nupper, ) = manager.getNextTicks();
+            (int24 _nlower, int24 _nupper, ) = manager.getNextTicks(__threshold);
 
             (uint160 currPrice, , , , , , ) = pool.slot0();
             (uint256 amount0, ) =
@@ -401,10 +434,10 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
 
             uint256 balAfter = testWeth.balanceOf(address(u1));
             emit log_named_uint("initEth", (balBefore - balAfter) / amount0);
-            assertTrue((balBefore - balAfter) / amount0 == 1);
+            assertTrue((balBefore - balAfter) / amount0 == 0);
         }
 
-        (bytes32 id, , , uint128 uniLiquidity) = manager.position();
+        (bytes32 id, , , uint128 uniLiquidity,) = manager.position();
         (uint128 _liquidity, , , , ) = pool.positions(id);
         assertTrue(uniLiquidity == _liquidity);
 
@@ -432,7 +465,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         emit log_named_uint("red", red);
         emit log_named_uint("usd", usd);
 
-        (bytes32 init_id, int24 init_lowerTick, int24 init_upperTick, uint128 init_uniLiquidity) = manager.position();
+        (bytes32 init_id, int24 init_lowerTick, int24 init_upperTick, uint128 init_uniLiquidity,) = manager.position();
         if (init_lowerTick > 0) {
             emit log_named_uint("pos init_lowerTick", helper_getAbsInt24(init_lowerTick));
         } else {
@@ -446,9 +479,10 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         }
         hevm.warp(2 days); // Advance to the future
 
-        helper_changeRedemptionPrice(1400000000 ether); // Making RAI a bit more expensive
+        helper_changeRedemptionPrice(2500000000 ether); // Making RAI a bit more expensive
 
-        (int24 newLower, int24 newUpper, ) = manager.getNextTicks();
+        (,,,,uint256 __threshold) = manager.position();
+        (int24 newLower, int24 newUpper, ) = manager.getNextTicks(__threshold);
         if (newLower > 0) {
             emit log_named_uint("pos newLower", helper_getAbsInt24(newLower));
         } else {
@@ -471,7 +505,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         (uint128 _liquidity, , , , ) = pool.positions(init_id);
         assertTrue(_liquidity == 0); //We should have burned the whole old position
 
-        (bytes32 end_id, int24 end_lowerTick, int24 end_upperTick, uint128 end_uniLiquidity) = manager.position();
+        (bytes32 end_id, int24 end_lowerTick, int24 end_upperTick, uint128 end_uniLiquidity,) = manager.position();
 
         emit log_named_uint("end_uniLiquidity", end_uniLiquidity);
         emit log_named_uint("init_uniLiquidity", init_uniLiquidity);
@@ -492,7 +526,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         helper_addLiquidity(1); // Starting with a bit of liquidity
 
         uint256 liq = manager.balanceOf(address(u1));
-        (bytes32 inti_id, , , uint128 inti_uniLiquidity) = manager.position();
+        (bytes32 inti_id, , , uint128 inti_uniLiquidity,) = manager.position();
         (uint128 _li, , , , ) = pool.positions(inti_id);
 
         assertTrue(liq == _li);
@@ -504,21 +538,21 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         (uint256 bal0, uint256 bal1) = u1.doWithdraw(uint128(liq / 2));
         emit log_named_uint("bal0", liq / 2);
         emit log_named_uint("bal1", manager.balanceOf(address(u1)));
-        assertTrue(manager.balanceOf(address(u1)) == liq / 2);
+        assertTrue(manager.balanceOf(address(u1))== liq / 2);
 
         (uint128 _li2, , , , ) = pool.positions(inti_id);
         emit log_named_uint("_li2", _li2);
         emit log_named_uint("_li / 2", _li / 2);
-        assertTrue(_li2 == _li / 2);
+        assertTrue(_li2== _li / 2);
 
-        (bytes32 end_id, , , uint128 end_uniLiquidity) = manager.position();
+        (bytes32 end_id, , , uint128 end_uniLiquidity,) = manager.position();
         emit log_named_uint("inti_uniLiquidity", inti_uniLiquidity / 2);
         emit log_named_uint("end_uniLiquidity", end_uniLiquidity);
         assertTrue(end_uniLiquidity == inti_uniLiquidity / 2);
     }
 
     function testFail_withdrawing_zero_liq() public {
-        helper_addLiquidity(3); // Starting with a bit of liquidity
+        helper_addLiquidity(3); //Starting with a bit of liquidity
         u3.doWithdraw(0);
     }
 
@@ -546,7 +580,8 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         u2.doApprove(address(testWeth), address(manager), wethAmount);
 
         (uint160 price1, , , , , , ) = pool.slot0();
-        (int24 newLower, int24 newUpper, ) = manager.getNextTicks();
+        (,,,,uint256 __threshold) = manager.position();
+        (int24 newLower, int24 newUpper, ) = manager.getNextTicks(__threshold);
 
         uint128 liq = helper_getLiquidityAmountsForTicks(price1, newLower, newUpper, 1 ether, 10 ether);
 
@@ -555,6 +590,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         u2.doDeposit(liq);
 
         helper_do_swap();
+        
 
         u2.doWithdraw(liq);
 
@@ -570,7 +606,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         emit log_named_uint("price1", price1);
         emit log_named_uint("price2", price2);
 
-        (bytes32 id, , , ) = manager.position();
+        (bytes32 id, , , ,) = manager.position();
         (uint128 _liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1) = pool.positions(id);
 
         emit log_named_uint("_liquidity", _liquidity);
@@ -579,7 +615,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         emit log_named_uint("tokensOwed0", tokensOwed0);
         emit log_named_uint("tokensOwed1", tokensOwed1);
 
-        assertTrue(bal1w > bal0w);
+        assertTrue(bal1r > bal0r);
     }
 
     function test_multiple_users_depositing() public {
@@ -608,18 +644,18 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         helper_addLiquidity(1);
 
         // Make RAI twice more expensive
-        helper_changeRedemptionPrice(2000000000 ether);
+        helper_changeRedemptionPrice(6000000000 ether);
 
         // Add some liquidity
         helper_addLiquidity(1);
 
         // Return to the original price
-        helper_changeRedemptionPrice(1200000000 ether);
+        helper_changeRedemptionPrice(3000000000 ether);
         hevm.warp(2 days);
 
         manager.rebalance();
 
-        (bytes32 id, , , uint128 uniLiquidity1) = manager.position();
+        (bytes32 id, , , uint128 uniLiquidity1,) = manager.position();
         (uint128 _liquidity, , , , ) = pool.positions(id);
         emit log_named_uint("_liquidity", _liquidity);
         emit log_named_uint("liq", uniLiquidity1);
@@ -636,43 +672,45 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         u1.doApprove(address(testRai), address(manager), u1_raiAmount);
         u1.doApprove(address(testWeth), address(manager), u1_wethAmount);
 
-        (bytes32 id, int24 lowerTick, int24 upperTick, uint128 uniLiquidity1) = manager.position();
+        (bytes32 id, int24 init_lowerTick, int24 init_upperTick, uint128 uniLiquidity1,) = manager.position();
         (uint160 u1_sqrtRatioX96, , , , , , ) = pool.slot0();
-        uint128 u1_liquidity = helper_getLiquidityAmountsForTicks(u1_sqrtRatioX96, lowerTick, upperTick, u1_wethAmount, u1_raiAmount);
+        uint128 u1_liquidity = helper_getLiquidityAmountsForTicks(u1_sqrtRatioX96, init_lowerTick, init_upperTick, u1_wethAmount, u1_raiAmount);
 
         u1.doDeposit(u1_liquidity);
 
         // totalSupply should equal the sum of both liquidity amounts
         assertTrue(manager.totalSupply() == uniLiquidity1 + u1_liquidity);
 
         // Getting new pool information
-        (, int24 lowerTick2, int24 upperTick2, uint128 uniLiquidity2) = manager.position();
-        assertTrue(uniLiquidity2 == uniLiquidity1 + u1_liquidity);
+        (, int24 mid_lowerTick, int24 mid_upperTick, uint128 mid_uniLiquidity,) = manager.position();
+        assertTrue(mid_uniLiquidity == uniLiquidity1 + u1_liquidity);
 
         // Pool position shouldn't have changed
-        assertTrue(lowerTick == lowerTick2);
-        assertTrue(upperTick == upperTick2);
+        assertTrue(init_lowerTick == mid_lowerTick);
+        assertTrue(init_upperTick == mid_upperTick);
 
-        // Make the redemption price change
-        helper_changeRedemptionPrice(800000000 ether);
+        // Make the redemption price higher
+        helper_changeRedemptionPrice(3500000000 ether);
 
         uint256 u2_raiAmount = 5 ether;
         uint256 u2_wethAmount = 2 ether;
 
         u2.doApprove(address(testRai), address(manager), u2_raiAmount);
         u2.doApprove(address(testWeth), address(manager), u2_wethAmount);
 
-        (int24 u2_lowerTick, int24 u2_upperTick, ) = manager.getNextTicks();
+        (,,,,uint256 __threshold) = manager.position();
+        (int24 end_lowerTick, int24 end_upperTick, ) = manager.getNextTicks(__threshold);
         (uint160 u2_sqrtRatioX96, , , , , , ) = pool.slot0();
-        uint128 u2_liquidity = helper_getLiquidityAmountsForTicks(u2_sqrtRatioX96, u2_lowerTick, u2_upperTick, u2_wethAmount, u2_raiAmount);
+        uint128 u2_liquidity = helper_getLiquidityAmountsForTicks(u2_sqrtRatioX96, end_lowerTick, end_upperTick, u2_wethAmount, u2_raiAmount);
 
         u2.doDeposit(u2_liquidity);
 
-        emit log_named_uint("u2_upperTick", helper_getAbsInt24(u2_upperTick));
-        emit log_named_uint("upperTick2", helper_getAbsInt24(upperTick2));
+        helper_logTick(mid_upperTick);
+        helper_logTick(end_upperTick);
         // totalSupply should be equal to the sum of the liquidity amounts
         assertTrue(manager.totalSupply() == u1_liquidity + u2_liquidity);
-        assertTrue(u2_upperTick < upperTick2);
+        assertTrue(mid_lowerTick < end_lowerTick);
+        assertTrue(mid_upperTick < end_upperTick);
 
         // assertTrue(false);
     }
@@ -686,12 +724,13 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         testWeth.approve(address(manager), 10);
         hevm.warp(2 days); // Advance to the future
 
-        helper_changeRedemptionPrice(800000000 ether);
-        (int24 lower, int24 upper, int24 price) = manager.getNextTicks();
+        helper_changeRedemptionPrice(2500000000 ether);
+        (,,,,uint256 __threshold) = manager.position();
+        (int24 lower, int24 upper, int24 price) = manager.getNextTicks(__threshold);
 
         manager.rebalance();
 
-        (bytes32 end_id, int24 end_lowerTick, int24 end_upperTick, uint128 end_uniLiquidity) = manager.position();
+        (bytes32 end_id, int24 end_lowerTick, int24 end_upperTick, uint128 end_uniLiquidity,) = manager.position();
         assertTrue(lower == end_lowerTick);
         assertTrue(upper == end_upperTick);
     }
@@ -714,7 +753,7 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
         (uint256 redemptionPrice, uint256 ethUsdPrice) = manager.getPrices();
 
         uint160 sqrtRedPriceX96 = uint160(sqrt((ethUsdPrice * 2**96) / redemptionPrice));
-        assertTrue(sqrtRedPriceX96 == 140737488355); // Value taken from Uniswap SDK
+        assertTrue(sqrtRedPriceX96 == 10278012941177838); // Value taken from Uniswap SDK
     }
 
     function testFail_try_minting_zero_liquidity() public {
@@ -750,4 +789,4 @@ contract GebUniswapv3LiquidityManagerTest is DSTest {
 
         u3.doWithdraw(uint128(0 - 1));
     }
-}
+}
\ No newline at end of file
@@ -404,7 +404,7 @@ contract SmartLPStorage is Ownable, Context, ERC165, ReentrancyGuard {
     event UpdateMinPurchaseAmount(uint indexed newAmount);
 }
 
-contract SmartLPProxy is SmartLPStorage {
+contract OldSmartLPProxy is SmartLPStorage {
     address public target;
     
     event SetTarget(address indexed newTarget);
@@ -442,7 +442,7 @@ contract SmartLPProxy is SmartLPStorage {
     }
 }
 
-contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
+contract OldSmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
     using Address for address;
     using Strings for uint256;
     
@@ -591,7 +591,7 @@ contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
     function getTokenRewardsAmounts(uint tokenId) public view returns (uint lpBnbNbuUserRewards, uint lpBnbGnbuUserRewards, uint lendedUserRewards) {
         UserSupply memory userSupply = tikSupplies[tokenId];
         require(userSupply.IsActive, "SmartLP: Not active");
-        require(userSupply.LendedBNBAmount < ((userSupply.LendedITokenAmount *lendingContract.tokenPrice()) / 1e18),
+        require(userSupply.LendedBNBAmount < ((userSupply.LendedITokenAmount * lendingContract.tokenPrice()) / 1e18),
             "SmartLP: lending rewards are not available"
         );
         lpBnbNbuUserRewards = (_balancesRewardEquivalentBnbNbu[tokenId] * ((block.timestamp - weightedStakeDate[tokenId]) * 100)) / (100 * rewardDuration);
@@ -663,7 +663,7 @@ contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
     }
 
     function approve(address to, uint256 tokenId) public virtual override {
-        address owner = SmartLP.ownerOf(tokenId);
+        address owner = OldSmartLP.ownerOf(tokenId);
         require(to != owner, "ERC721: approval to current owner");
 
         require(
@@ -719,7 +719,7 @@ contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
 
     function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
         require(_exists(tokenId), "ERC721: operator query for nonexistent token");
-        address owner = SmartLP.ownerOf(tokenId);
+        address owner = OldSmartLP.ownerOf(tokenId);
         return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
     }
 
@@ -746,7 +746,7 @@ contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
     }
 
     function _burn(uint256 tokenId) internal virtual {
-        address owner = SmartLP.ownerOf(tokenId);
+        address owner = OldSmartLP.ownerOf(tokenId);
 
         // Clear approvals
         _approve(address(0), tokenId);
@@ -759,7 +759,7 @@ contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
 
     function _transfer(address from, address to, uint256 tokenId) internal virtual {
         require(to != address(0), "ERC721: transfer to the zero address");
-        require(SmartLP.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
+        require(OldSmartLP.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
 
         for (uint256 i; i < _userTokens[msg.sender].length; i++) {
             if(_userTokens[msg.sender][i] == tokenId) {
@@ -784,7 +784,7 @@ contract SmartLP is SmartLPStorage, IBEP721, IBEP721Metadata {
 
     function _approve(address to, uint256 tokenId) internal virtual {
         _tokenApprovals[tokenId] = to;
-        emit Approval(SmartLP.ownerOf(tokenId), to, tokenId);
+        emit Approval(OldSmartLP.ownerOf(tokenId), to, tokenId);
     }
 
     function _setApprovalForAll( address owner, address operator, bool approved) internal virtual {
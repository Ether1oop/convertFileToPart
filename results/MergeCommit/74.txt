@@ -41,13 +41,22 @@ import "../interfaces/MarketFactoryInterface.sol";
 /*****************************************************************************************************/
 /**
     @notice This contract manages the configuration of the platform.
-    @dev The platform settings functions (create, update, and remove) don't include the whenNotPaused() modifier because we might need to use them in both cases (when the platform is paused and not paused).
+    @dev The platform settings functions (create, update, and remove) don't include the whenNotPaused()
+    modifier because we might need to use them in both cases (when the platform is paused and not paused).
         Example:
-            - There is a potential issue and before analyzing it, we pause the platform to avoid funds losses. Finally, as result of the analysis, we decided to update a platform setting (or create a new one for the cloud nodes). In this scenario, if the modifier is present, we couldn't update the setting (because the platform is paused).
+            - There is a potential issue and before analyzing it, we pause the platform to avoid funds losses.
+            Finally, as result of the analysis, we decided to update a platform setting (or create a new one for the
+            cloud nodes). In this scenario, if the modifier is present, we couldn't update the setting
+            (because the platform is paused).
 
     @author develop@teller.finance
  */
-contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeable {
+contract Settings is
+    SettingsInterface,
+    TInitializable,
+    Pausable,
+    BaseUpgradeable
+{
     using AddressLib for address;
     using Address for address;
     using AddressArrayLib for address[];
@@ -64,7 +73,8 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
     /**
         @notice It defines the constant address to represent ETHER.
      */
-    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
+    address public constant ETH_ADDRESS =
+        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
 
     /**
         @notice It defines the constant address to represent the canonical WETH token.
@@ -115,7 +125,8 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         - The key is the platform setting name.
         - The value is the platform setting. It includes the value, minimum and maximum values.
      */
-    mapping(bytes32 => PlatformSettingsLib.PlatformSetting) public platformSettings;
+    mapping(bytes32 => PlatformSettingsLib.PlatformSetting)
+        public platformSettings;
 
     /**
         @notice It is the global instance of the EscrowFactory contract.
@@ -153,7 +164,7 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
     /**
         @notice Flag restricting the use of the Protocol to authorizedAddress
      */
-    bool platformRestricted;
+    bool public platformRestricted;
 
     /** Modifiers */
 
@@ -177,7 +188,13 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         require(settingName != "", "SETTING_NAME_MUST_BE_PROVIDED");
         platformSettings[settingName].initialize(value, minValue, maxValue);
 
-        emit PlatformSettingCreated(settingName, msg.sender, value, minValue, maxValue);
+        emit PlatformSettingCreated(
+            settingName,
+            msg.sender,
+            value,
+            minValue,
+            maxValue
+        );
     }
 
     /**
@@ -194,7 +211,12 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
     {
         uint256 oldValue = platformSettings[settingName].update(newValue);
 
-        emit PlatformSettingUpdated(settingName, msg.sender, oldValue, newValue);
+        emit PlatformSettingUpdated(
+            settingName,
+            msg.sender,
+            oldValue,
+            newValue
+        );
     }
 
     /**
@@ -243,7 +265,11 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         @param settingName setting name to test.
         @return true if the setting is already configured. Otherwise it returns false.
      */
-    function hasPlatformSetting(bytes32 settingName) external view returns (bool) {
+    function hasPlatformSetting(bytes32 settingName)
+        external
+        view
+        returns (bool)
+    {
         return _getPlatformSetting(settingName).exists;
     }
 
@@ -258,7 +284,10 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         isInitialized()
     {
         lendingPoolAddress.requireNotEmpty("LENDING_POOL_IS_REQUIRED");
-        require(!lendingPoolPaused[lendingPoolAddress], "LENDING_POOL_ALREADY_PAUSED");
+        require(
+            !lendingPoolPaused[lendingPoolAddress],
+            "LENDING_POOL_ALREADY_PAUSED"
+        );
 
         lendingPoolPaused[lendingPoolAddress] = true;
 
@@ -276,7 +305,10 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         isInitialized()
     {
         lendingPoolAddress.requireNotEmpty("LENDING_POOL_IS_REQUIRED");
-        require(lendingPoolPaused[lendingPoolAddress], "LENDING_POOL_IS_NOT_PAUSED");
+        require(
+            lendingPoolPaused[lendingPoolAddress],
+            "LENDING_POOL_IS_NOT_PAUSED"
+        );
 
         lendingPoolPaused[lendingPoolAddress] = false;
 
@@ -310,7 +342,11 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         @param assetAddress token address.
         @return the cToken address for a given asset address.
      */
-    function getCTokenAddress(address assetAddress) external view returns (address) {
+    function getCTokenAddress(address assetAddress)
+        external
+        view
+        returns (address)
+    {
         return assetSettings.getCTokenAddress(assetAddress);
     }
 
@@ -326,7 +362,11 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         @notice Restricts the use of the Teller protocol to authorized wallet addresses only
         @param restriction Bool turning the resitriction on or off
      */
-    function restrictPlatform(bool restriction) external onlyPauser() isInitialized() {
+    function restrictPlatform(bool restriction)
+        external
+        onlyPauser()
+        isInitialized()
+    {
         platformRestricted = restriction;
     }
 
@@ -342,30 +382,28 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         @notice Adds a wallet address to the list of authorized wallets
         @param addressToAdd The wallet address of the user being authorized
      */
-    function addAuthorizedAddress(address addressToAdd)
-        external
-        onlyPauser()
-        isInitialized()
-    {
+    function addAuthorizedAddress(address addressToAdd) public isInitialized() {
+        require(
+            isPauser(msg.sender) || msg.sender == address(escrowFactory),
+            "CALLER_NOT_PAUSER"
+        );
         authorizedAddresses[addressToAdd] = true;
     }
 
-  /**
+    /**
         @notice Adds a list of wallet addresses to the list of authorized wallets
         @param addressesToAdd The list of wallet addresses being authorized
      */
-  function addAuthorizedAddressList(address[] calldata addressesToAdd)
-    external
-    onlyPauser()
-    isInitialized()
-  {
-    for(uint256 i = 0; i < addressesToAdd.length; i++) {
-        addressesToAdd[i].requireNotEmpty("ADDRESS_ZERO");
-        authorizedAddresses[addressesToAdd[i]] = true;
+    function addAuthorizedAddressList(address[] calldata addressesToAdd)
+        external
+        isInitialized()
+    {
+        for (uint256 i = 0; i < addressesToAdd.length; i++) {
+            addAuthorizedAddress(addressesToAdd[i]);
+        }
     }
-  }
 
-  /**
+    /**
         @notice Removes a wallet address from the list of authorized wallets
         @param addressToRemove The wallet address of the user being unauthorized
      */
@@ -395,7 +433,10 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         @param account account to test.
      */
     function requireAuthorization(address account) public view {
-        require(!platformRestricted || hasAuthorization(account), "NOT_AUTHORIZED");
+        require(
+            !platformRestricted || hasAuthorization(account),
+            "NOT_AUTHORIZED"
+        );
     }
 
     /**
@@ -431,18 +472,24 @@ contract Settings is SettingsInterface, TInitializable, Pausable, BaseUpgradeabl
         );
         versionsRegistry.initialize();
         assetSettings = AssetSettingsInterface(
-            _deployDynamicProxy(versionsRegistry.consts().ASSET_SETTINGS_LOGIC_NAME())
+            _deployDynamicProxy(
+                versionsRegistry.consts().ASSET_SETTINGS_LOGIC_NAME()
+            )
         );
         chainlinkAggregator = IChainlinkAggregator(
             _deployDynamicProxy(
                 versionsRegistry.consts().CHAINLINK_PAIR_AGGREGATOR_LOGIC_NAME()
             )
         );
         escrowFactory = EscrowFactoryInterface(
-            _deployDynamicProxy(versionsRegistry.consts().ESCROW_FACTORY_LOGIC_NAME())
+            _deployDynamicProxy(
+                versionsRegistry.consts().ESCROW_FACTORY_LOGIC_NAME()
+            )
         );
         marketFactory = MarketFactoryInterface(
-            _deployDynamicProxy(versionsRegistry.consts().MARKET_FACTORY_LOGIC_NAME())
+            _deployDynamicProxy(
+                versionsRegistry.consts().MARKET_FACTORY_LOGIC_NAME()
+            )
         );
     }
 
@@ -61,6 +61,22 @@ library LibMarket {
         return beanAmount;
     }
 
+     function buyExactTokensToWallet(uint256 buyBeanAmount, address to, bool toWallet) internal returns (uint256 amount) {
+	    AppStorage storage s = LibAppStorage.diamondStorage();
+        if (toWallet) amount = buyExactTokens(buyBeanAmount, to);
+        else {
+            amount = buyExactTokens(buyBeanAmount, address(this));
+            s.a[to].wrappedBeans = s.a[to].wrappedBeans.add(amount);
+        }
+    }
+
+    function buyExactTokens(uint256 buyBeanAmount, address to) internal returns (uint256 amount) {
+        (uint256 ethAmount, uint256 beanAmount) = _buyExactTokens(buyBeanAmount, msg.value, to);
+        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }("");
+        require(success, "Market: Refund failed.");
+        return beanAmount;
+    }
+
     function buyAndDeposit(uint256 buyBeanAmount) internal returns (uint256 amount) {
         (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, address(this));
         (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }("");
@@ -128,7 +144,7 @@ library LibMarket {
 
     function addAndDepositLiquidity(AddLiquidity calldata al) internal returns (uint256) {
         DiamondStorage storage ds = diamondStorage();
-        allocatedBeans(al.beanAmount);
+        allocateBeans(al.beanAmount);
         (uint256 beans, uint256 liquidity) = addLiquidity(al);
         if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));
         return liquidity;
@@ -170,7 +186,7 @@ library LibMarket {
         (uint256 ethSold, uint256 beans) = _buyWithWETH(buyBeanAmount, amounts[0], address(this));
         // If beans bought does not cover the amount of money to move to LP
 	if (al.beanAmount > buyBeanAmount) {
-            allocatedBeans(al.beanAmount.sub(buyBeanAmount));
+            allocateBeans(al.beanAmount.sub(buyBeanAmount));
             beans = beans.add(al.beanAmount.sub(buyBeanAmount));
         }
         uint256 liquidity; uint256 ethAdded;
@@ -198,7 +214,7 @@ library LibMarket {
     {
         DiamondStorage storage ds = diamondStorage();
         uint256 sellBeans = _amountIn(buyWethAmount);
-        allocatedBeans(al.beanAmount.add(sellBeans));
+        allocateBeans(al.beanAmount.add(sellBeans));
         (uint256 beansSold, uint256 wethBought) = _sell(sellBeans, buyWethAmount, address(this));
         if (msg.value > 0) IWETH(ds.weth).deposit{value: msg.value}();
         (uint256 beans, uint256 ethAdded, uint256 liquidity) = _addLiquidityWETH(
@@ -265,6 +281,24 @@ library LibMarket {
         return (amounts[0], amounts[1]);
     }
 
+    function _buyExactTokens(uint256 beanAmount, uint256 ethAmount, address to)
+        private
+        returns (uint256 inAmount, uint256 outAmount)
+    {
+        DiamondStorage storage ds = diamondStorage();
+        address[] memory path = new address[](2);
+        path[0] = ds.weth;
+        path[1] = ds.bean;
+
+        uint[] memory amounts = IUniswapV2Router02(ds.router).swapETHForExactTokens{value: ethAmount}(
+            beanAmount,
+            path,
+            to,
+            block.timestamp.add(1)
+        );
+        return (amounts[0], amounts[1]);
+    }
+
     function _buyWithWETH(uint256 beanAmount, uint256 ethAmount, address to)
         internal
         returns (uint256 inAmount, uint256 outAmount)
@@ -322,8 +356,29 @@ library LibMarket {
         uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyWethAmount, path);
         return amounts[0];
     }
+    function allocateBeansToWallet(uint256 amount, address to, bool toWallet) internal {
+	    AppStorage storage s = LibAppStorage.diamondStorage();
+        if (toWallet) LibMarket.allocateBeansTo(amount, to);
+        else {
+            LibMarket.allocateBeansTo(amount, address(this));
+            s.a[to].wrappedBeans = s.a[to].wrappedBeans.add(amount);
+        }
+    }
+
+    function transferBeans(address to, uint256 amount, bool toWallet) internal {
+	    AppStorage storage s = LibAppStorage.diamondStorage();
+        if (toWallet) IBean(s.c.bean).transferFrom(msg.sender, to, amount);
+        else {
+            IBean(s.c.bean).transferFrom(msg.sender, address(this), amount);
+            s.a[to].wrappedBeans = s.a[to].wrappedBeans.add(amount);
+        }
+    }
+
+    function allocateBeans(uint256 transferBeans) internal {
+        allocateBeansTo(transferBeans, address(this));
+    }
 
-    function allocatedBeans(uint256 transferBeans) internal {
+    function allocateBeansTo(uint256 transferBeans, address to) internal {
 	    AppStorage storage s = LibAppStorage.diamondStorage();
 
         uint wrappedBeans = s.a[msg.sender].wrappedBeans;
@@ -336,8 +391,10 @@ library LibMarket {
                 remainingBeans = 0;
                 s.a[msg.sender].wrappedBeans = wrappedBeans.sub(transferBeans);
             }
-            emit BeanAllocation(msg.sender, transferBeans.sub(remainingBeans));
+            uint fromWrappedBeans = transferBeans.sub(remainingBeans);
+            emit BeanAllocation(msg.sender, fromWrappedBeans);
+            if (to != address(this)) IBean(s.c.bean).transfer(to, fromWrappedBeans);
         }
-        if (remainingBeans > 0) IBean(s.c.bean).transferFrom(msg.sender, address(this), remainingBeans);
+        if (remainingBeans > 0) IBean(s.c.bean).transferFrom(msg.sender, to, remainingBeans);
     }
 }
@@ -1,13 +1,10 @@
-pragma solidity ^0.4.25;
+// SPDX-License-Identifier: GPL-3.0-only
 
-import './RealitioSafeMath256.sol';
-import './RealitioSafeMath32.sol';
-import './BalanceHolderERC20.sol';
+pragma solidity ^0.8.10;
 
-contract RealitioERC20 is BalanceHolderERC20 {
+import './BalanceHolder_ERC20.sol';
 
-    using RealitioSafeMath256 for uint256;
-    using RealitioSafeMath32 for uint32;
+contract RealityETH_ERC20_v3_0 is BalanceHolder_ERC20 {
 
     address constant NULL_ADDRESS = address(0);
 
@@ -23,6 +20,13 @@ contract RealitioERC20 is BalanceHolderERC20 {
     // Commit->reveal timeout is 1/8 of the question timeout (rounded down).
     uint32 constant COMMITMENT_TIMEOUT_RATIO = 8;
 
+    // Proportion withheld when you claim an earlier bond.
+    uint256 constant BOND_CLAIM_FEE_PROPORTION = 40; // One 40th ie 2.5%
+
+    // Special value representing a question that was answered too soon.
+    // bytes32(-2). By convention we use bytes32(-1) for "invalid", although the contract does not handle this.
+    bytes32 constant UNRESOLVED_ANSWER = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;
+
     event LogSetQuestionFee(
         address arbitrator,
         uint256 amount
@@ -47,6 +51,11 @@ contract RealitioERC20 is BalanceHolderERC20 {
         uint256 created
     );
 
+    event LogMinimumBond(
+        bytes32 indexed question_id,
+        uint256 min_bond
+    );
+
     event LogFundAnswerBounty(
         bytes32 indexed question_id,
         uint256 bounty_added,
@@ -78,6 +87,10 @@ contract RealitioERC20 is BalanceHolderERC20 {
         address indexed user 
     );
 
+    event LogCancelArbitration(
+        bytes32 indexed question_id
+    );
+
     event LogFinalize(
         bytes32 indexed question_id,
         bytes32 indexed answer
@@ -89,6 +102,11 @@ contract RealitioERC20 is BalanceHolderERC20 {
         uint256 amount
     );
 
+    event LogReopenQuestion(
+        bytes32 indexed question_id,
+        bytes32 indexed reopened_question_id
+    );
+
     struct Question {
         bytes32 content_hash;
         address arbitrator;
@@ -100,6 +118,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
         bytes32 best_answer;
         bytes32 history_hash;
         uint256 bond;
+        uint256 min_bond;
     }
 
     // Stored in a mapping indexed by commitment_id, a hash of commitment hash, question, bond. 
@@ -124,6 +143,9 @@ contract RealitioERC20 is BalanceHolderERC20 {
     mapping(bytes32 => Claim) public question_claims;
     mapping(bytes32 => Commitment) public commitments;
     mapping(address => uint256) public arbitrator_question_fees; 
+    mapping(bytes32 => bytes32) public reopened_questions;
+    mapping(bytes32 => bool) public reopener_questions;
+
 
     modifier onlyArbitrator(bytes32 question_id) {
         require(msg.sender == questions[question_id].arbitrator, "msg.sender must be arbitrator");
@@ -143,9 +165,9 @@ contract RealitioERC20 is BalanceHolderERC20 {
         require(questions[question_id].timeout > 0, "question must exist");
         require(!questions[question_id].is_pending_arbitration, "question must not be pending arbitration");
         uint32 finalize_ts = questions[question_id].finalize_ts;
-        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now), "finalization deadline must not have passed");
+        require(finalize_ts == UNANSWERED || finalize_ts > uint32(block.timestamp), "finalization deadline must not have passed");
         uint32 opening_ts = questions[question_id].opening_ts;
-        require(opening_ts == 0 || opening_ts <= uint32(now), "opening date must have passed"); 
+        require(opening_ts == 0 || opening_ts <= uint32(block.timestamp), "opening date must have passed"); 
         _;
     }
 
@@ -157,9 +179,9 @@ contract RealitioERC20 is BalanceHolderERC20 {
     modifier stateOpenOrPendingArbitration(bytes32 question_id) {
         require(questions[question_id].timeout > 0, "question must exist");
         uint32 finalize_ts = questions[question_id].finalize_ts;
-        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now), "finalization dealine must not have passed");
+        require(finalize_ts == UNANSWERED || finalize_ts > uint32(block.timestamp), "finalization dealine must not have passed");
         uint32 opening_ts = questions[question_id].opening_ts;
-        require(opening_ts == 0 || opening_ts <= uint32(now), "opening date must have passed"); 
+        require(opening_ts == 0 || opening_ts <= uint32(block.timestamp), "opening date must have passed"); 
         _;
     }
 
@@ -168,9 +190,14 @@ contract RealitioERC20 is BalanceHolderERC20 {
         _;
     }
 
-    modifier bondMustDouble(bytes32 question_id, uint256 tokens) {
+    modifier bondMustDoubleAndMatchMinimum(bytes32 question_id, uint256 tokens) {
         require(tokens > 0, "bond must be positive"); 
-        require(tokens >= (questions[question_id].bond.mul(2)), "bond must be double at least previous bond");
+        uint256 current_bond = questions[question_id].bond;
+        if (current_bond == 0) {
+            require(tokens >= (questions[question_id].min_bond), "bond must exceed the minimum");
+        } else {
+            require(tokens >= (current_bond * 2), "bond must be double at least previous bond");
+        }
         _;
     }
 
@@ -181,24 +208,26 @@ contract RealitioERC20 is BalanceHolderERC20 {
         _;
     }
 
-    function setToken(IERC20 _token) 
-    public
-    {
-        require(token == IERC20(0x0), "Token can only be initialized once");
-        token = _token;
-    }
-
     /// @notice Constructor, sets up some initial templates
     /// @dev Creates some generalized templates for different question types used in the DApp.
-    constructor() 
-    public {
+    constructor() {
         createTemplate('{"title": "%s", "type": "bool", "category": "%s", "lang": "%s"}');
         createTemplate('{"title": "%s", "type": "uint", "decimals": 18, "category": "%s", "lang": "%s"}');
         createTemplate('{"title": "%s", "type": "single-select", "outcomes": [%s], "category": "%s", "lang": "%s"}');
         createTemplate('{"title": "%s", "type": "multiple-select", "outcomes": [%s], "category": "%s", "lang": "%s"}');
         createTemplate('{"title": "%s", "type": "datetime", "category": "%s", "lang": "%s"}');
     }
 
+    /// @notice Set the address of the ERC20 token that will be used for bonds.
+    /// @dev Should not be used with ERC20-like token contracts that implement callbacks like ERC777 that could cause re-entrancy issues
+    /// @param _token The ERC20 token that will be used for bonds.
+    function setToken(IERC20 _token) 
+    public
+    {
+        require(token == IERC20(address(0x0)), "Token can only be initialized once");
+        token = _token;
+    }
+
     /// @notice Function for arbitrator to set an optional per-question fee. 
     /// @dev The per-question fee, charged when a question is asked, is intended as an anti-spam measure.
     /// @param fee The fee to be charged by the arbitrator when a question is asked
@@ -214,14 +243,14 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.
     /// @param content The template content
     /// @return The ID of the newly-created template, which is created sequentially.
-    function createTemplate(string content) 
+    function createTemplate(string memory content) 
         stateAny()
     public returns (uint256) {
         uint256 id = nextTemplateID;
         templates[id] = block.number;
         template_hashes[id] = keccak256(abi.encodePacked(content));
         emit LogNewTemplate(id, msg.sender, content);
-        nextTemplateID = id.add(1);
+        nextTemplateID = id + 1;
         return id;
     }
 
@@ -235,8 +264,8 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.
     /// @return The ID of the newly-created template, which is created sequentially.
     function createTemplateAndAskQuestion(
-        string content, 
-        string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce 
+        string memory content, 
+        string memory question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce 
     ) 
         // stateNotCreated is enforced by the internal _askQuestion
     public returns (bytes32) {
@@ -255,17 +284,18 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @param opening_ts If set, the earliest time it should be possible to answer the question.
     /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.
     /// @return The ID of the newly-created question, created deterministically.
-    function askQuestion(uint256 template_id, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) 
+    function askQuestion(uint256 template_id, string memory question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) 
         // stateNotCreated is enforced by the internal _askQuestion
     public returns (bytes32) {
 
         require(templates[template_id] > 0, "template must exist");
 
         bytes32 content_hash = keccak256(abi.encodePacked(template_id, opening_ts, question));
-        bytes32 question_id = keccak256(abi.encodePacked(content_hash, arbitrator, timeout, msg.sender, nonce));
+        bytes32 question_id = keccak256(abi.encodePacked(content_hash, arbitrator, timeout, uint256(0), address(this), msg.sender, nonce));
 
-        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts, 0);
-        emit LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, now);
+        // We emit this event here because _askQuestion doesn't need to know the unhashed question. Other events are emitted by _askQuestion.
+        emit LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, block.timestamp);
+        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts, 0, 0);
 
         return question_id;
     }
@@ -280,7 +310,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.
     /// @param tokens The combined initial question bounty and question fee
     /// @return The ID of the newly-created question, created deterministically.
-    function askQuestionERC20(uint256 template_id, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce, uint256 tokens) 
+    function askQuestionERC20(uint256 template_id, string memory question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce, uint256 tokens) 
         // stateNotCreated is enforced by the internal _askQuestion
     public returns (bytes32) {
 
@@ -289,17 +319,48 @@ contract RealitioERC20 is BalanceHolderERC20 {
         require(templates[template_id] > 0, "template must exist");
 
         bytes32 content_hash = keccak256(abi.encodePacked(template_id, opening_ts, question));
-        bytes32 question_id = keccak256(abi.encodePacked(content_hash, arbitrator, timeout, msg.sender, nonce));
+        bytes32 question_id = keccak256(abi.encodePacked(content_hash, arbitrator, timeout, uint256(0), address(this), msg.sender, nonce));
 
-        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts, tokens);
-        emit LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, now);
+        // We emit this event here because _askQuestion doesn't need to know the unhashed question. Other events are emitted by _askQuestion.
+        emit LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, block.timestamp);
+        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts, 0, tokens);
+
+        return question_id;
+    }
+
+    /// @notice Ask a new question and return the ID
+    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.
+    /// @param template_id The ID number of the template the question will use
+    /// @param question A string containing the parameters that will be passed into the template to make the question
+    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute
+    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer
+    /// @param opening_ts If set, the earliest time it should be possible to answer the question.
+    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.
+    /// @param min_bond The minimum bond that may be used for an answer.
+    /// @param tokens Number of tokens sent
+    /// @return The ID of the newly-created question, created deterministically.
+    function askQuestionWithMinBondERC20(uint256 template_id, string memory question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce, uint256 min_bond, uint256 tokens) 
+        // stateNotCreated is enforced by the internal _askQuestion
+    public returns (bytes32) {
+
+        _deductTokensOrRevert(tokens);
+
+        require(templates[template_id] > 0, "template must exist");
+
+        bytes32 content_hash = keccak256(abi.encodePacked(template_id, opening_ts, question));
+        bytes32 question_id = keccak256(abi.encodePacked(content_hash, arbitrator, timeout, min_bond, address(this), msg.sender, nonce));
+
+        // We emit this event here because _askQuestion doesn't need to know the unhashed question.
+        // Other events are emitted by _askQuestion.
+        emit LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, block.timestamp);
+        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts, min_bond, tokens);
 
         return question_id;
     }
 
     function _deductTokensOrRevert(uint256 tokens) 
     internal {
-
+ 
         if (tokens == 0) {
             return;
         }
@@ -309,10 +370,10 @@ contract RealitioERC20 is BalanceHolderERC20 {
         // Deduct any tokens you have in your internal balance first
         if (bal > 0) {
             if (bal >= tokens) {
-                balanceOf[msg.sender] = bal.sub(tokens);
+                balanceOf[msg.sender] = bal - tokens;
                 return;
             } else {
-                tokens = tokens.sub(bal);
+                tokens = tokens - bal;
                 balanceOf[msg.sender] = 0;
             }
         }
@@ -322,34 +383,42 @@ contract RealitioERC20 is BalanceHolderERC20 {
 
     }
 
-    function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 tokens) 
+    function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 min_bond, uint256 tokens) 
         stateNotCreated(question_id)
     internal {
 
-        uint256 bounty = tokens;
-
         // A timeout of 0 makes no sense, and we will use this to check existence
         require(timeout > 0, "timeout must be positive"); 
         require(timeout < 365 days, "timeout must be less than 365 days"); 
-        require(arbitrator != NULL_ADDRESS, "arbitrator must be set");
+
+        uint256 bounty = tokens;
 
         // The arbitrator can set a fee for asking a question. 
         // This is intended as an anti-spam defence.
         // The fee is waived if the arbitrator is asking the question.
         // This allows them to set an impossibly high fee and make users proxy the question through them.
         // This would allow more sophisticated pricing, question whitelisting etc.
-        if (msg.sender != arbitrator) {
+        if (arbitrator != NULL_ADDRESS && msg.sender != arbitrator) {
             uint256 question_fee = arbitrator_question_fees[arbitrator];
             require(bounty >= question_fee, "Tokens provided must cover question fee"); 
-            bounty = bounty.sub(question_fee);
-            balanceOf[arbitrator] = balanceOf[arbitrator].add(question_fee);
+            bounty = bounty - question_fee;
+            balanceOf[arbitrator] = balanceOf[arbitrator] + question_fee;
         }
 
         questions[question_id].content_hash = content_hash;
         questions[question_id].arbitrator = arbitrator;
         questions[question_id].opening_ts = opening_ts;
         questions[question_id].timeout = timeout;
-        questions[question_id].bounty = bounty;
+
+        if (bounty > 0) {
+            questions[question_id].bounty = bounty;
+            emit LogFundAnswerBounty(question_id, bounty, bounty, msg.sender);
+        }
+
+        if (min_bond > 0) {
+            questions[question_id].min_bond = min_bond;
+            emit LogMinimumBond(question_id, min_bond);
+        }
 
     }
 
@@ -361,7 +430,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
         stateOpen(question_id)
     external {
         _deductTokensOrRevert(tokens);
-        questions[question_id].bounty = questions[question_id].bounty.add(tokens);
+        questions[question_id].bounty = questions[question_id].bounty + tokens;
         emit LogFundAnswerBounty(question_id, tokens, questions[question_id].bounty, msg.sender);
     }
 
@@ -374,12 +443,31 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @param tokens The amount of tokens to submit
     function submitAnswerERC20(bytes32 question_id, bytes32 answer, uint256 max_previous, uint256 tokens) 
         stateOpen(question_id)
-        bondMustDouble(question_id, tokens)
+        bondMustDoubleAndMatchMinimum(question_id, tokens)
         previousBondMustNotBeatMaxPrevious(question_id, max_previous)
     external {
         _deductTokensOrRevert(tokens);
         _addAnswerToHistory(question_id, answer, msg.sender, tokens, false);
-        _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);
+        _updateCurrentAnswer(question_id, answer);
+    }
+
+    /// @notice Submit an answer for a question, crediting it to the specified account.
+    /// @dev Adds the answer to the history and updates the current "best" answer.
+    /// May be subject to front-running attacks; Substitute submitAnswerCommitment()->submitAnswerReveal() to prevent them.
+    /// @param question_id The ID of the question
+    /// @param answer The answer, encoded into bytes32
+    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.
+    /// @param answerer The account to which the answer should be credited
+    /// @param tokens Number of tokens sent
+    function submitAnswerForERC20(bytes32 question_id, bytes32 answer, uint256 max_previous, address answerer, uint256 tokens)
+        stateOpen(question_id)
+        bondMustDoubleAndMatchMinimum(question_id, tokens)
+        previousBondMustNotBeatMaxPrevious(question_id, max_previous)
+    external {
+        _deductTokensOrRevert(tokens);
+        require(answerer != NULL_ADDRESS, "answerer must be non-zero");
+        _addAnswerToHistory(question_id, answer, answerer, tokens, false);
+        _updateCurrentAnswer(question_id, answer);
     }
 
     // @notice Verify and store a commitment, including an appropriate timeout
@@ -391,7 +479,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
         require(commitments[commitment_id].reveal_ts == COMMITMENT_NON_EXISTENT, "commitment must not already exist");
 
         uint32 commitment_timeout = questions[question_id].timeout / COMMITMENT_TIMEOUT_RATIO;
-        commitments[commitment_id].reveal_ts = uint32(now).add(commitment_timeout);
+        commitments[commitment_id].reveal_ts = uint32(block.timestamp) + commitment_timeout;
     }
 
     /// @notice Submit the hash of an answer, laying your claim to that answer if you reveal it in a subsequent transaction.
@@ -406,7 +494,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @dev Specifying the answerer is useful if you want to delegate the commit-and-reveal to a third-party.
     function submitAnswerCommitmentERC20(bytes32 question_id, bytes32 answer_hash, uint256 max_previous, address _answerer, uint256 tokens) 
         stateOpen(question_id)
-        bondMustDouble(question_id, tokens)
+        bondMustDoubleAndMatchMinimum(question_id, tokens)
         previousBondMustNotBeatMaxPrevious(question_id, max_previous)
     external {
 
@@ -438,13 +526,13 @@ contract RealitioERC20 is BalanceHolderERC20 {
         bytes32 commitment_id = keccak256(abi.encodePacked(question_id, answer_hash, bond));
 
         require(!commitments[commitment_id].is_revealed, "commitment must not have been revealed yet");
-        require(commitments[commitment_id].reveal_ts > uint32(now), "reveal deadline must not have passed");
+        require(commitments[commitment_id].reveal_ts > uint32(block.timestamp), "reveal deadline must not have passed");
 
         commitments[commitment_id].revealed_answer = answer;
         commitments[commitment_id].is_revealed = true;
 
         if (bond == questions[question_id].bond) {
-            _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);
+            _updateCurrentAnswer(question_id, answer);
         }
 
         emit LogAnswerReveal(question_id, msg.sender, answer_hash, answer, nonce, bond);
@@ -462,13 +550,20 @@ contract RealitioERC20 is BalanceHolderERC20 {
         }
         questions[question_id].history_hash = new_history_hash;
 
-        emit LogNewAnswer(answer_or_commitment_id, question_id, new_history_hash, answerer, bond, now, is_commitment);
+        emit LogNewAnswer(answer_or_commitment_id, question_id, new_history_hash, answerer, bond, block.timestamp, is_commitment);
     }
 
-    function _updateCurrentAnswer(bytes32 question_id, bytes32 answer, uint32 timeout_secs)
+    function _updateCurrentAnswer(bytes32 question_id, bytes32 answer)
     internal {
         questions[question_id].best_answer = answer;
-        questions[question_id].finalize_ts = uint32(now).add(timeout_secs);
+        questions[question_id].finalize_ts = uint32(block.timestamp) + questions[question_id].timeout;
+    }
+
+    // Like _updateCurrentAnswer but without advancing the timeout
+    function _updateCurrentAnswerByArbitrator(bytes32 question_id, bytes32 answer)
+    internal {
+        questions[question_id].best_answer = answer;
+        questions[question_id].finalize_ts = uint32(block.timestamp);
     }
 
     /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.
@@ -481,11 +576,23 @@ contract RealitioERC20 is BalanceHolderERC20 {
         stateOpen(question_id)
         previousBondMustNotBeatMaxPrevious(question_id, max_previous)
     external {
-        require(questions[question_id].bond > 0, "Question must already have an answer when arbitration is requested");
+        require(questions[question_id].finalize_ts > UNANSWERED, "Question must already have an answer when arbitration is requested");
         questions[question_id].is_pending_arbitration = true;
         emit LogNotifyOfArbitrationRequest(question_id, requester);
     }
 
+    /// @notice Cancel a previously-requested arbitration and extend the timeout
+    /// @dev Useful when doing arbitration across chains that can't be requested atomically
+    /// @param question_id The ID of the question
+    function cancelArbitration(bytes32 question_id) 
+        onlyArbitrator(question_id)
+        statePendingArbitration(question_id)
+    external {
+        questions[question_id].is_pending_arbitration = false;
+        questions[question_id].finalize_ts = uint32(block.timestamp) + questions[question_id].timeout;
+        emit LogCancelArbitration(question_id);
+    }
+
     /// @notice Submit the answer for a question, for use by the arbitrator.
     /// @dev Doesn't require (or allow) a bond.
     /// If the current final answer is correct, the account should be whoever submitted it.
@@ -497,24 +604,48 @@ contract RealitioERC20 is BalanceHolderERC20 {
     function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) 
         onlyArbitrator(question_id)
         statePendingArbitration(question_id)
-    external {
+    public {
 
         require(answerer != NULL_ADDRESS, "answerer must be provided");
         emit LogFinalize(question_id, answer);
 
         questions[question_id].is_pending_arbitration = false;
         _addAnswerToHistory(question_id, answer, answerer, 0, false);
-        _updateCurrentAnswer(question_id, answer, 0);
+        _updateCurrentAnswerByArbitrator(question_id, answer);
+    }
 
+    /// @notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.
+    /// @dev Doesn't require (or allow) a bond.
+    /// @param question_id The ID of the question
+    /// @param answer The answer, encoded into bytes32
+    /// @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator
+    /// @param last_history_hash The history hash before the final one
+    /// @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.
+    /// @param last_answerer The address that supplied the last answer
+    function assignWinnerAndSubmitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address payee_if_wrong, bytes32 last_history_hash, bytes32 last_answer_or_commitment_id, address last_answerer) 
+    external {
+        bool is_commitment = _verifyHistoryInputOrRevert(questions[question_id].history_hash, last_history_hash, last_answer_or_commitment_id, questions[question_id].bond, last_answerer);
+
+        address payee;
+        // If the last answer is an unrevealed commit, it's always wrong.
+        // For anything else, the last answer was set as the "best answer" in submitAnswer or submitAnswerReveal.
+        if (is_commitment && !commitments[last_answer_or_commitment_id].is_revealed) {
+            require(commitments[last_answer_or_commitment_id].reveal_ts < uint32(block.timestamp), "You must wait for the reveal deadline before finalizing");
+            payee = payee_if_wrong;
+        } else {
+            payee = (questions[question_id].best_answer == answer) ? last_answerer : payee_if_wrong;
+        }
+        submitAnswerByArbitrator(question_id, answer, payee);
     }
 
+
     /// @notice Report whether the answer to the specified question is finalized
     /// @param question_id The ID of the question
     /// @return Return true if finalized
     function isFinalized(bytes32 question_id) 
     view public returns (bool) {
         uint32 finalize_ts = questions[question_id].finalize_ts;
-        return ( !questions[question_id].is_pending_arbitration && (finalize_ts > UNANSWERED) && (finalize_ts <= uint32(now)) );
+        return ( !questions[question_id].is_pending_arbitration && (finalize_ts > UNANSWERED) && (finalize_ts <= uint32(block.timestamp)) );
     }
 
     /// @notice (Deprecated) Return the final answer to the specified question, or revert if there isn't one
@@ -531,10 +662,92 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @return The answer formatted as a bytes32
     function resultFor(bytes32 question_id) 
         stateFinalized(question_id)
-    external view returns (bytes32) {
+    public view returns (bytes32) {
         return questions[question_id].best_answer;
     }
 
+    /// @notice Returns whether the question was answered before it had an answer, ie resolved to UNRESOLVED_ANSWER
+    /// @param question_id The ID of the question 
+    function isSettledTooSoon(bytes32 question_id)
+    public view returns(bool) {
+        return (resultFor(question_id) == UNRESOLVED_ANSWER);
+    }
+
+    /// @notice Like resultFor(), but errors out if settled too soon, or returns the result of a replacement if it was reopened at the right time and settled
+    /// @param question_id The ID of the question 
+    function resultForOnceSettled(bytes32 question_id)
+    external view returns(bytes32) {
+        bytes32 result = resultFor(question_id);
+        if (result == UNRESOLVED_ANSWER) {
+            // Try the replacement
+            bytes32 replacement_id = reopened_questions[question_id];
+            require(replacement_id != bytes32(0x0), "Question was settled too soon and has not been reopened");
+            // We only try one layer down rather than recursing to keep the gas costs predictable
+            result = resultFor(replacement_id);
+            require(result != UNRESOLVED_ANSWER, "Question replacement was settled too soon and has not been reopened");
+        }
+        return result;
+    }
+
+    /// @notice Asks a new question reopening a previously-asked question that was settled too soon
+    /// @dev A special version of askQuestion() that replaces a previous question that was settled too soon
+    /// @param template_id The ID number of the template the question will use
+    /// @param question A string containing the parameters that will be passed into the template to make the question
+    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute
+    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer
+    /// @param opening_ts If set, the earliest time it should be possible to answer the question.
+    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.
+    /// @param min_bond The minimum bond that can be used to provide the first answer.
+    /// @param reopens_question_id The ID of the question this reopens
+    /// @param tokens The number of tokens you want to use as an additional question reward for the reopened question.
+    /// @return The ID of the newly-created question, created deterministically.
+    function reopenQuestionERC20(uint256 template_id, string memory question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce, uint256 min_bond, bytes32 reopens_question_id, uint256 tokens)
+        // stateNotCreated is enforced by the internal _askQuestion
+    public returns (bytes32) {
+
+        // _deductTokensOrRevert will be called when we call askQuestionWithMinBondERC20
+
+        require(isSettledTooSoon(reopens_question_id), "You can only reopen questions that resolved as settled too soon");
+
+        bytes32 content_hash = keccak256(abi.encodePacked(template_id, opening_ts, question));
+
+        // A reopening must exactly match the original question, except for the nonce and the creator
+        require(content_hash == questions[reopens_question_id].content_hash, "content hash mismatch");
+        require(arbitrator == questions[reopens_question_id].arbitrator, "arbitrator mismatch");
+        require(timeout == questions[reopens_question_id].timeout, "timeout mismatch");
+        require(opening_ts == questions[reopens_question_id].opening_ts , "opening_ts mismatch");
+        require(min_bond == questions[reopens_question_id].min_bond, "min_bond mismatch");
+
+        // If the the question was itself reopening some previous question, you'll have to re-reopen the previous question first.
+        // This ensures the bounty can be passed on to the next attempt of the original question.
+        require(!reopener_questions[reopens_question_id], "Question is already reopening a previous question");
+
+        // A question can only be reopened once, unless the reopening was also settled too soon in which case it can be replaced
+        bytes32 existing_reopen_question_id = reopened_questions[reopens_question_id];
+
+        // Normally when we reopen a question we will take its bounty and pass it on to the reopened version.
+        bytes32 take_bounty_from_question_id = reopens_question_id;
+        // If the question has already been reopened but was again settled too soon, we can transfer its bounty to the next attempt.
+        if (existing_reopen_question_id != bytes32(0)) {
+            require(isSettledTooSoon(existing_reopen_question_id), "Question has already been reopened");
+            // We'll overwrite the reopening with our new question and move the bounty.
+            // Once that's done we'll detach the failed reopener and you'll be able to reopen that too if you really want, but without the bounty.
+            reopener_questions[existing_reopen_question_id] = false;
+            take_bounty_from_question_id = existing_reopen_question_id;
+        }
+
+        bytes32 question_id = askQuestionWithMinBondERC20(template_id, question, arbitrator, timeout, opening_ts, nonce, min_bond, tokens);
+
+        reopened_questions[reopens_question_id] = question_id;
+        reopener_questions[question_id] = true;
+
+        questions[question_id].bounty = questions[take_bounty_from_question_id].bounty + questions[question_id].bounty;
+        questions[take_bounty_from_question_id].bounty = 0;
+
+        emit LogReopenQuestion(question_id, reopens_question_id);
+
+        return question_id;
+    }
 
     /// @notice Return the final answer to the specified question, provided it matches the specified criteria.
     /// @dev Reverts if the question is not finalized, or if it does not match the specified criteria.
@@ -573,7 +786,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @param answers Last-to-first, each answer supplied, or commitment ID if the answer was supplied with commit->reveal
     function claimWinnings(
         bytes32 question_id, 
-        bytes32[] history_hashes, address[] addrs, uint256[] bonds, bytes32[] answers
+        bytes32[] memory history_hashes, address[] memory addrs, uint256[] memory bonds, bytes32[] memory answers
     ) 
         stateFinalized(question_id)
     public {
@@ -597,13 +810,20 @@ contract RealitioERC20 is BalanceHolderERC20 {
             // Check input against the history hash, and see which of 2 possible values of is_commitment fits.
             bool is_commitment = _verifyHistoryInputOrRevert(last_history_hash, history_hashes[i], answers[i], bonds[i], addrs[i]);
             
-            queued_funds = queued_funds.add(last_bond); 
+            queued_funds = queued_funds + last_bond; 
             (queued_funds, payee) = _processHistoryItem(
                 question_id, best_answer, queued_funds, payee, 
                 addrs[i], bonds[i], answers[i], is_commitment);
  
             // Line the bond up for next time, when it will be added to somebody's queued_funds
             last_bond = bonds[i];
+
+            // Burn (just leave in contract balance) a fraction of all bonds except the final one.
+            // This creates a cost to increasing your own bond, which could be used to delay resolution maliciously
+            if (last_bond != questions[question_id].bond) {
+                last_bond = last_bond - last_bond / BOND_CLAIM_FEE_PROPORTION;
+            }
+
             last_history_hash = history_hashes[i];
 
         }
@@ -624,7 +844,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
             question_claims[question_id].queued_funds = queued_funds;
         } else {
             // There is nothing left below us so the payee can keep what remains
-            _payPayee(question_id, payee, queued_funds.add(last_bond));
+            _payPayee(question_id, payee, queued_funds + last_bond);
             delete question_claims[question_id];
         }
 
@@ -634,7 +854,7 @@ contract RealitioERC20 is BalanceHolderERC20 {
 
     function _payPayee(bytes32 question_id, address payee, uint256 value) 
     internal {
-        balanceOf[payee] = balanceOf[payee].add(value);
+        balanceOf[payee] = balanceOf[payee] + value;
         emit LogClaim(question_id, payee, value);
     }
 
@@ -680,8 +900,11 @@ contract RealitioERC20 is BalanceHolderERC20 {
                 // The entry is for the first payee we come to, ie the winner.
                 // They get the question bounty.
                 payee = addr;
-                queued_funds = queued_funds.add(questions[question_id].bounty);
-                questions[question_id].bounty = 0;
+
+                if (best_answer != UNRESOLVED_ANSWER && questions[question_id].bounty > 0) {
+                    _payPayee(question_id, payee, questions[question_id].bounty);
+                    questions[question_id].bounty = 0;
+                }
 
             } else if (addr != payee) {
 
@@ -694,9 +917,8 @@ contract RealitioERC20 is BalanceHolderERC20 {
                 // There should be enough for the fee, but if not, take what we have.
                 // There's an edge case involving weird arbitrator behaviour where we may be short.
                 uint256 answer_takeover_fee = (queued_funds >= bond) ? bond : queued_funds;
-
                 // Settle up with the old (higher-bonded) payee
-                _payPayee(question_id, payee, queued_funds.sub(answer_takeover_fee));
+                _payPayee(question_id, payee, queued_funds - answer_takeover_fee);
 
                 // Now start queued_funds again for the new (lower-bonded) payee
                 payee = addr;
@@ -720,8 +942,8 @@ contract RealitioERC20 is BalanceHolderERC20 {
     /// @param bonds In a single list for all supplied questions, the bond supplied with each answer or commitment
     /// @param answers In a single list for all supplied questions, each answer supplied, or commitment ID 
     function claimMultipleAndWithdrawBalance(
-        bytes32[] question_ids, uint256[] lengths, 
-        bytes32[] hist_hashes, address[] addrs, uint256[] bonds, bytes32[] answers
+        bytes32[] memory question_ids, uint256[] memory lengths, 
+        bytes32[] memory hist_hashes, address[] memory addrs, uint256[] memory bonds, bytes32[] memory answers
     ) 
         stateAny() // The finalization checks are done in the claimWinnings function
     public {
@@ -820,4 +1042,11 @@ contract RealitioERC20 is BalanceHolderERC20 {
         return questions[question_id].bond;
     }
 
+    /// @notice Returns the minimum bond that can answer the question
+    /// @param question_id The ID of the question
+    function getMinBond(bytes32 question_id)
+    public view returns(uint256) {
+        return questions[question_id].min_bond;
+    }
+
 }
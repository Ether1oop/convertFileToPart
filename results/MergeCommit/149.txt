@@ -36,24 +36,16 @@ library ProportionalLiquidity {
 
         int128 _shells = _deposit.divu(1e18);
 
-        emit log_int("_shells", _shells);
-
         int128 _oGLiq;
 
         uint _length = shell.reserves.length;
 
         int128[] memory _oBals = new int128[](_length);
 
-        emit log_ints("_oBals", _oBals);
-
         uint[] memory deposits_ = new uint[](_length);
 
-        emit log_uints("deposits_", deposits_);
-
         for (uint i = 0; i < _length; i++) {
 
-            emit log_uint("i", i);
-
             int128 _bal = Assimilators.viewNumeraireBalance(shell.reserves[i].addr);
 
             _oBals[i] = _bal;
@@ -65,8 +57,6 @@ library ProportionalLiquidity {
 
             for (uint8 i = 0; i < _length; i++) {
 
-                emit log_uint("i", i);
-
                 deposits_[i] = Assimilators.intakeNumeraire(shell.numeraires[i].addr, _shells.mul(shell.weights[i]));
 
             }
@@ -77,8 +67,6 @@ library ProportionalLiquidity {
 
             for (uint8 i = 0; i < _length; i++) {
 
-                emit log_uint("i", i);
-
                 deposits_[i] = Assimilators.intakeNumeraire(shell.numeraires[i].addr, _oBals[i].mul(_multiplier));
 
             }
@@ -98,7 +86,7 @@ library ProportionalLiquidity {
     function viewProportionalDeposit (
         Loihi.Shell storage shell,
         uint256 _deposit
-    ) internal returns (
+    ) internal view returns (
         uint shells_,
         uint[] memory
     ) {
@@ -200,7 +188,7 @@ library ProportionalLiquidity {
     function viewProportionalWithdraw (
         Loihi.Shell storage shell,
         uint256 _withdrawal
-    ) internal returns (
+    ) internal view returns (
         uint[] memory withdrawals_
     ) {
 
@@ -80,48 +120,47 @@ contract BrokerAssets {
       require(msg.sender == database.addressStorage(keccak256(abi.encodePacked("broker", _assetID))) );
       DToken token = DToken(database.addressStorage(keccak256(abi.encodePacked("tokenAddress", _assetID))));
       address erc20 = token.getERC20();
-      uint amountOwed = token.getAmountOwed(address(this));
-      if (erc20 != address(0)){
-        require(amountOwed > 0);
-        require(token.withdraw());
+      uint balanceBefore = address(this).balance; 
+      require(token.withdraw()); 
+      if (erc20 != address(0)){ 
+        uint amountOwed = token.getAmountOwed(address(this)); 
+        require(amountOwed > 0); 
         uint8 tokenIndex = containsAddress(tokenAddresses, erc20);
         if (tokenIndex <= tokenAddresses.length) {  payoutAmounts[tokenIndex] += amountOwed; }
-        else {
+        else { 
           numEntries++;
-          tokenAddresses[numEntries] = erc20;
-          payoutAmounts[numEntries] = amountOwed;
+          tokenAddresses[numEntries] = erc20; 
+          payoutAmounts[numEntries] = amountOwed;  
         }
       }
-      else { weiOwed += amountOwed; }
+      else {  
+         require(address(this).balance.sub(balanceBefore) != 0); 
+         weiOwed += address(this).balance.sub(balanceBefore);  
+      }
     }
-    // Send all ERC20 balances to broker
+    // Send all ERC20 balances to broker 
     for(i = 0; i < numEntries; i++){
-      require(DToken(tokenAddresses[i]).transfer(msg.sender, payoutAmounts[i]));
+      // require(DToken(tokenAddresses[i]).transfer(msg.sender, payoutAmounts[i]));
     }
-    // Send WEI to broker
+    // Send WEI to broker 
     msg.sender.transfer(weiOwed);
     return true;
   }
 
   function containsAddress(address[] _addressList, address _addr)
-  internal
-  pure
-  returns (uint8) {
-    for (uint8 i = 0; i < _addressList.length; i++){
+  internal 
+  pure 
+  returns (uint8) { 
+    for (uint8 i = 0; i < _addressList.length; i++){ 
       if (_addressList[i] == _addr) return i;
     }
-    return uint8(_addressList.length + 1);
+    return uint8(_addressList.length + 1);  
   }
 
   function ()
   payable
   public {
-    emit LogIncomeReceived(msg.value);
-  }
-
-  modifier investorsOnly(bytes32 assetID){
-    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked("tokenAddress", assetID))));
-    _;
+    // emit LogIncomeReceived(msg.value);
   }
 
 
